{"meta":{"title":"Shimmer's Blog","subtitle":"","description":"","author":"Shimmer","url":"https://gitee.com/shimmer612","root":"/shimmer-blog/"},"pages":[],"posts":[{"title":"","slug":"davjs学习","date":"2021-02-23T01:04:15.074Z","updated":"2021-02-23T01:03:58.342Z","comments":true,"path":"2021/02/23/davjs学习/","link":"","permalink":"https://gitee.com/shimmer612/2021/02/23/davjs%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"1title: Dav结构的分析 Dav结构的分析 下面是davjs models的一个基本结构 1234567891011121314151617181920212223242526272829303132333435export default &#123; //dav model的名字namespace: &#x27;example&#x27;,//数据state: &#123;num:1&#125;, //表示当前的example中的state状态，这里可以给初始值，这里num初始为1 //这里是做异步处理的相当于VueX的actioneffects: &#123; //payload是参数 put触发action ，select获取数据， call异步操作 *addByONe(&#123; payload&#125;, &#123; call, put,select &#125;) &#123; //这里使用selectconst num = yield select(state =&gt; state.num) //这里就获取到了当前state中的数据numlet param1; param1 = num + payload; 这里就可以使用num进行操作了yield put(&#123;type: &#x27;save&#x27;,num:param1&#125;);&#125;&#125;, //用来保存更新state值 上面的put方法调用这里的方法,reducers: &#123;save(state, action) &#123; //这里的state是当前总的state，这里的action包含了上面传递的参数和type return &#123; ...state, ...action.num &#125;; //这里用ES6语法来更新当前state中num的值&#125;&#125;, &#125;;","categories":[],"tags":[]},{"title":"新年快乐","slug":"hello-world","date":"2021-02-20T05:57:07.816Z","updated":"2021-02-20T06:35:24.507Z","comments":true,"path":"2021/02/20/hello-world/","link":"","permalink":"https://gitee.com/shimmer612/2021/02/20/hello-world/","excerpt":"","text":"大家新年快乐","categories":[],"tags":[]}],"categories":[],"tags":[]}