{"meta":{"title":"Shimmer's Blog","subtitle":"黑暗中寻光的人","description":"","author":"Shimmer","url":"https://gitee.com/shimmer612","root":"/shimmer-blog/"},"pages":[{"title":"tags","date":"2021-02-23T09:07:02.000Z","updated":"2021-02-23T09:08:25.950Z","comments":true,"path":"tags/index.html","permalink":"https://gitee.com/shimmer612/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"对Ant-Design Table组件进行封装","slug":"2021-02-26-对Ant-Design-Table组件进行封装","date":"2021-02-25T16:00:00.000Z","updated":"2021-02-26T07:59:39.891Z","comments":true,"path":"2021/02/26/2021-02-26-对Ant-Design-Table组件进行封装/","link":"","permalink":"https://gitee.com/shimmer612/2021/02/26/2021-02-26-%E5%AF%B9Ant-Design-Table%E7%BB%84%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85/","excerpt":"","text":"Table组件封装页面, dataSource通过Modal中的获取的数据传过来，主要对columns进行封装。把一些常用的属性给暴露出来。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122import &#123; connect &#125; from &quot;umi&quot;;import &#123; Spin, Table, Space, Popconfirm, Tooltip &#125; from &quot;antd&quot;;import CommonPagination from &quot;@/components/CommonPagination&quot;;import moment from &quot;moment&quot;;import &#123; formatNum &#125; from &quot;@/utils/utils&quot;const SearchForm = (&#123; tableConfig, tableData &#125;) =&gt; &#123; const tableItem = tableData.find((item) =&gt; item.tableKey === tableConfig.tableKey) || &#123;&#125;; const &#123; loading &#125; = tableItem; // 根据tablekey取到对应请求的loading状态 const dataSource = tableItem.data || []; const columns = tableConfig.columns.map(item =&gt; &#123; if (item.actionMap) &#123; item = &#123; ...item, render(res) &#123; // 生成action列表 const actionList = (item.actionMap || []).map((action, index) =&gt; &#123; switch (action.type) &#123; case &quot;href&quot;: if (action.render) &#123; return &lt;div key=&#123;index&#125; onClick=&#123;() =&gt; &#123; if (action.onClick) &#123; action.onClick(res) &#125; &#125;&#125;&gt;&#123;action.render(res)&#125;&lt;/div&gt; &#125; return &lt;a key=&#123;index&#125; onClick=&#123;() =&gt; &#123; if (action.onClick) &#123; action.onClick(res) &#125; &#125;&#125;&gt;&#123;action.text&#125;&lt;/a&gt; case &quot;confirm&quot;: return &lt;Popconfirm key=&#123;index&#125; title=&#123;&lt;div&gt;确认要执行&#123;action.text ? &lt;a href=&quot;#&quot;&gt;&#123;action.text&#125;&lt;/a&gt; : action.render(res)&#125;操作吗？&lt;/div&gt;&#125; onConfirm=&#123;() =&gt; &#123; if (action.onConfirm) &#123; action.onConfirm(res) &#125; &#125;&#125; onCancel=&#123;() =&gt; &#123; if (action.onCancel) &#123; action.onCancel(res) &#125; &#125;&#125; okText=&quot;确认&quot; cancelText=&quot;取消&quot; &gt; &#123;action.text ? &lt;a href=&quot;#&quot;&gt;&#123;action.text&#125;&lt;/a&gt; : action.render(res)&#125; &lt;/Popconfirm&gt; default: return &lt;span key=&#123;index&#125;&gt;未知类型，请检查&lt;/span&gt; &#125; &#125;); return &lt;Space size=&quot;middle&quot;&gt; &#123; actionList.map(action =&gt; action) &#125; &lt;/Space&gt; &#125; &#125; &#125; else if (item.numFormat) &#123; item = &#123; ...item, render(res) &#123; return formatNum(res, ...item.numFormat); &#125; &#125; &#125; else if (item.timeFormat) &#123; item = &#123; ...item, render(res) &#123; return res ? moment(res).format(item.timeFormat) : &quot;--&quot; &#125; &#125; &#125; else if (item.tipCol) &#123; const render = item.render; item = &#123; ...item, ellipsis: &#123; show: false &#125;, render(res) &#123; if (item.tipCol === false) &#123; return res &#125; if (item.tipCol === true) &#123; return ( &lt;Tooltip placement=&quot;topLeft&quot; title=&#123;render ? render(res) : res&#125;&gt; &lt;span&gt;&#123;render ? render(res) : res&#125;&lt;/span&gt; &lt;/Tooltip&gt; ) &#125; &#125; &#125; &#125; return item; &#125;) return ( &lt;Spin spinning=&#123;loading === true&#125;&gt; &lt;div style=&#123;&#123; marginTop: 24, padding: 24, background: &quot;#fff&quot; &#125;&#125;&gt; &lt;Table pagination=&#123;false&#125; columns=&#123;columns&#125; dataSource=&#123;dataSource || []&#125; scroll=&#123;&#123; x: &quot;max-content&quot; &#125;&#125; bordered /&gt; &lt;CommonPagination tableKey=&#123;tableConfig.tableKey&#125; /&gt; &lt;/div&gt; &lt;/Spin&gt; );&#125;;export default connect((&#123; global &#125;) =&gt; (&#123; tableData: global.tableData || [],&#125;))(SearchForm); 分页封装页面 根据modal传过来的数据进行前台分页。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import &#123; connect &#125; from &quot;umi&quot;;import &#123; Pagination &#125; from &quot;antd&quot;;const styles = &#123; display: &quot;flex&quot;, justifyContent: &quot;flex-end&quot;, alignItems: &quot;center&quot;, backgroundColor: &quot;#fff&quot;, height: &quot;60px&quot;&#125;const CommonPagination = (props) =&gt; &#123; const &#123; dispatch, tableData, tableKey &#125; = props; const &#123; page: pageData, params &#125; = tableData.find(item =&gt; item.tableKey === tableKey) || &#123;&#125;; // 分页变化 const pageChange = (page) =&gt; &#123; dispatch(&#123; type: &quot;global/getTableData&quot;, payload: &#123; tableKey, params: &#123; page, &#125; &#125;, &#125;); &#125;; return ( &lt;div style=&#123;styles&#125;&gt; &#123;pageData &amp;&amp; ( &lt;Pagination total=&#123;pageData.total&#125; showTotal=&#123;() =&gt; `共计 $&#123;pageData.total&#125; 个`&#125; defaultCurrent=&#123;1&#125; showSizeChanger=&#123;false&#125; onChange=&#123;pageChange&#125; current=&#123;params.page&#125; /&gt; )&#125; &lt;/div&gt; );&#125;;export default connect((&#123;global &#125;) =&gt; (&#123; tableData: global.tableData || [],&#125;))(CommonPagination); 使用 ### CommonTable（通用表格） 必传参数tableConfig 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495tableConfig=&#123; tableKey:&#x27;tableKey&#x27;, // 必传 columns:[ // 必传 &#123; title: &quot;Age&quot;, key: &quot;age&quot;, width: 100, numFormat:[1,true] &#125;, &#123; title: &quot;Time&quot;, width: 150, key: &quot;time&quot;, timeFormat: &quot;YYYY-MM-DD HH:mm:ss&quot; &#125;, &#123; title: &quot;Action&quot;, width: 200, actionMap:[ &#123; type: &quot;href&quot;, text: &quot;123&quot;, onClick(res) &#123; console.log(&quot;123&quot;,res); &#125;, render(res)&#123; return &lt;span&gt;&#123;res.name&#125;&lt;/span&gt; &#125; &#125;, &#123; type: &quot;confirm&quot;, onConfirm() &#123; console.log(&quot;onOk&quot;); &#125;, onCancel() &#123; console.log(&quot;onCancel&quot;); &#125;, text: &quot;删除&quot;, render(res)&#123; return &lt;a&gt;&#123;res.name&#125;&lt;/a&gt; &#125; &#125;, ], &#125; ], config:&#123;&#125; // table的配置，与官方文档一致&#125;&lt;CommonTable tableConfig=&#123;tableConfig&#125; /&gt; 其中columns与官方文档配置一致，当有如下参数时会进行特殊处理： tipCol (文字过长省略,Tooltip上方提示) 12345678910111213141516171819columns: [ &#123; title: &quot;Address&quot;, dataIndex: &quot;address&quot;, width: 150, key: &quot;address&quot;, tipCol: true, &#125;,] true时开启false关闭 numFormat（时间格式化） 1234567891011121314151617columns: [ &#123; title: &quot;Age&quot;, key: &quot;age&quot;, width: 100, numFormat:[1,true] &#125;] numFormat[保留几位小数，是否进行千分位格式化]，numFormat[2,true]效果1234.567=&gt;1,234.57 timeFormat（日期格式化） 1234567891011121314151617columns: [ &#123; title: &quot;Time&quot;, width: 150, key: &quot;time&quot;, timeFormat: &quot;YYYY-MM-DD HH:mm:ss&quot; &#125;,] timeFormat:时间戳格式，格式化为指定格式 actionMap（操作栏） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&#123; title: &quot;Action&quot;, width: 200, actionMap:[ &#123; type: &quot;href&quot;, text: &quot;123&quot;, onClick(res) &#123; console.log(&quot;123&quot;,res); &#125;, render(res)&#123; return &lt;span&gt;&#123;res.name&#125;&lt;/span&gt; &#125; &#125;, &#123; type: &quot;confirm&quot;, onConfirm() &#123; console.log(&quot;onOk&quot;); &#125;, onCancel() &#123; console.log(&quot;onCancel&quot;); &#125;, text: &quot;删除&quot;, render(res)&#123; return &lt;a&gt;&#123;res.name&#125;&lt;/a&gt; &#125; &#125;, ],&#125; actionMap的type用于决定操作类型，具体如下： href，text和render至少有一个，render优先级高于text。当只有text参数时，生成结果为&lt;a&gt;&#123;text&#125;&lt;/a&gt;。当有render时，生成结果为render的返回值。 confirm，用于操作前的确认。render与text的关系与href一致。","categories":[],"tags":[{"name":"AntDesign - React","slug":"AntDesign-React","permalink":"https://gitee.com/shimmer612/tags/AntDesign-React/"}]},{"title":"davJs学习02","slug":"umi中，davjs学习02","date":"2021-02-23T16:00:00.000Z","updated":"2021-02-24T07:30:24.443Z","comments":true,"path":"2021/02/24/umi中，davjs学习02/","link":"","permalink":"https://gitee.com/shimmer612/2021/02/24/umi%E4%B8%AD%EF%BC%8Cdavjs%E5%AD%A6%E4%B9%A002/","excerpt":"","text":"最近公司新项目用的UmiJs3.x，整个项目的数据，通过内置的Davjs来控制。 昨天自己分析了一下Davjs。但是脑海中的概念还是很模糊。今天再梳理一下。 第一步首先是在Models文件夹下创建一个JS文件 123456789101112131415161718192021222324252627282930313233const GlobalModel = &#123; //model的名称 namespace: &quot;global&quot;, state: &#123; //放数据的地方 user:&#123;&#125; &#125;, effects: &#123; // 异步获取数据，不能直接修改数据，需要通过put调用reducers的方法。 `其中call和普通是dva 提供的effect 函数内部的处理函数 call：执行异步函数， put：发出一个 Action，类似于 dispatch select获取数据，` *getTableData(&#123; payload &#125;, &#123; put, select, call &#125;) &#123; const tableList = yield select((state) =&gt; state.global.tableData); yield put(&#123; type: &quot;setTableParams&quot;, payload, &#125;); &#125;, reducers: &#123; //同步获取数据 setTableParams(state) &#123; return &#123; ...state &#125; &#125; &#125;,&#125;;export default GlobalModel; 第二步对应页面中 12345678910111213141516171819202122232425262728import React from &quot;react&quot;;import &#123; connect &#125; from &quot;umi&quot;;const TableDemo = (props) =&gt; &#123; //能直接获取到users const &#123;dispatch, users&#125; = props dispatch(&#123; //global这个model中，getTableData这个异步操作函数 type: &quot;global/getTableData&quot;, payload: &#123; &#125;, &#125;); return ( &lt;div&gt; &#123;users.name&#125; &lt;/div&gt; )&#125;//把global中state中的数据绑定到页面的props上export default connect((&#123; global &#125;) =&gt; (&#123; users: global.users&#125;))(TableDemo); 还可以调用Service文件夹里的接口，获取数据","categories":[],"tags":[{"name":"UmiJs","slug":"UmiJs","permalink":"https://gitee.com/shimmer612/tags/UmiJs/"},{"name":"Davjs","slug":"Davjs","permalink":"https://gitee.com/shimmer612/tags/Davjs/"},{"name":"React","slug":"React","permalink":"https://gitee.com/shimmer612/tags/React/"}]},{"title":"关于我","slug":"关于我","date":"2021-02-22T16:00:00.000Z","updated":"2021-02-23T08:49:18.453Z","comments":true,"path":"2021/02/23/关于我/","link":"","permalink":"https://gitee.com/shimmer612/2021/02/23/%E5%85%B3%E4%BA%8E%E6%88%91/","excerpt":"","text":"姓名：张振 年龄：25 现居：江苏-常州 路 很长 顺道寻光","categories":[],"tags":[{"name":"Aboutme","slug":"Aboutme","permalink":"https://gitee.com/shimmer612/tags/Aboutme/"}]},{"title":"Dav结构的分析","slug":"davjs学习","date":"2021-02-22T10:34:00.000Z","updated":"2021-02-23T02:22:05.583Z","comments":true,"path":"2021/02/22/davjs学习/","link":"","permalink":"https://gitee.com/shimmer612/2021/02/22/davjs%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"下面是davjs models的一个基本结构 1234567891011121314151617181920212223242526272829303132333435export default &#123; //dav model的名字namespace: &#x27;example&#x27;,//数据state: &#123;num:1&#125;, //表示当前的example中的state状态，这里可以给初始值，这里num初始为1 //这里是做异步处理的相当于VueX的actioneffects: &#123; //payload是参数 put触发action ，select获取数据， call异步操作 *addByONe(&#123; payload&#125;, &#123; call, put,select &#125;) &#123; //这里使用selectconst num = yield select(state =&gt; state.num) //这里就获取到了当前state中的数据numlet param1; param1 = num + payload; 这里就可以使用num进行操作了yield put(&#123;type: &#x27;save&#x27;,num:param1&#125;);&#125;&#125;, //用来保存更新state值 上面的put方法调用这里的方法,reducers: &#123;save(state, action) &#123; //这里的state是当前总的state，这里的action包含了上面传递的参数和type return &#123; ...state, ...action.num &#125;; //这里用ES6语法来更新当前state中num的值&#125;&#125;, &#125;;","categories":[],"tags":[{"name":"Davjs","slug":"Davjs","permalink":"https://gitee.com/shimmer612/tags/Davjs/"},{"name":"React","slug":"React","permalink":"https://gitee.com/shimmer612/tags/React/"}]},{"title":"新年快乐","slug":"hello-world","date":"2021-02-10T16:00:00.000Z","updated":"2021-02-23T05:25:35.342Z","comments":true,"path":"2021/02/11/hello-world/","link":"","permalink":"https://gitee.com/shimmer612/2021/02/11/hello-world/","excerpt":"","text":"大家新年快乐","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"AntDesign - React","slug":"AntDesign-React","permalink":"https://gitee.com/shimmer612/tags/AntDesign-React/"},{"name":"UmiJs","slug":"UmiJs","permalink":"https://gitee.com/shimmer612/tags/UmiJs/"},{"name":"Davjs","slug":"Davjs","permalink":"https://gitee.com/shimmer612/tags/Davjs/"},{"name":"React","slug":"React","permalink":"https://gitee.com/shimmer612/tags/React/"},{"name":"Aboutme","slug":"Aboutme","permalink":"https://gitee.com/shimmer612/tags/Aboutme/"}]}