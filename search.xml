<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>对Ant-Design Table组件进行封装</title>
    <url>/myBlog/2021/02/26/2021-02-26-%E5%AF%B9Ant-Design-Table%E7%BB%84%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p><strong>Table组件封装页面,</strong></p>
<p><strong>dataSource通过Modal中的获取的数据传过来，主要对columns进行封装。把一些常用的属性给暴露出来。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Spin, Table, Space, Popconfirm, Tooltip &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> CommonPagination <span class="keyword">from</span> <span class="string">&quot;@/components/CommonPagination&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; formatNum &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/utils&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchForm = <span class="function">(<span class="params">&#123; tableConfig, tableData &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tableItem = tableData.find(<span class="function">(<span class="params">item</span>) =&gt;</span> item.tableKey === tableConfig.tableKey) || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123; loading &#125; = tableItem; <span class="comment">// 根据tablekey取到对应请求的loading状态</span></span><br><span class="line">  <span class="keyword">const</span> dataSource = tableItem.data || [];</span><br><span class="line">  <span class="keyword">const</span> columns = tableConfig.columns.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.actionMap) &#123;</span><br><span class="line">      item = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          <span class="comment">// 生成action列表</span></span><br><span class="line">          <span class="keyword">const</span> actionList = (item.actionMap || []).map(<span class="function">(<span class="params">action, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;href&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> (action.render) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                    if (action.onClick) &#123;</span></span><br><span class="line"><span class="xml">                      action.onClick(res)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                  &#125;&#125;&gt;&#123;action.render(res)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                  if (action.onClick) &#123;</span></span><br><span class="line"><span class="xml">                    action.onClick(res)</span></span><br><span class="line"><span class="xml">                  &#125;</span></span><br><span class="line"><span class="xml">                &#125;&#125;&gt;&#123;action.text&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;confirm&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="xml">&lt;Popconfirm</span></span><br><span class="line"><span class="xml">                  key=&#123;index&#125;</span></span><br><span class="line"><span class="xml">                  title=&#123;<span class="tag">&lt;<span class="name">div</span>&gt;</span>确认要执行&#123;action.text ? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;action.text&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> : action.render(res)&#125;操作吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">                  onConfirm=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="xml">                    if (action.onConfirm) &#123;</span></span><br><span class="line"><span class="xml">                      action.onConfirm(res)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                  &#125;&#125;</span></span><br><span class="line"><span class="xml">                  onCancel=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="xml">                    if (action.onCancel) &#123;</span></span><br><span class="line"><span class="xml">                      action.onCancel(res)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                  &#125;&#125;</span></span><br><span class="line"><span class="xml">                  okText=&quot;确认&quot;</span></span><br><span class="line"><span class="xml">                  cancelText=&quot;取消&quot;</span></span><br><span class="line"><span class="xml">                &gt;</span></span><br><span class="line"><span class="xml">                  &#123;action.text ? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;action.text&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> : action.render(res)&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Popconfirm</span>&gt;</span></span></span><br><span class="line">              <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>未知类型，请检查<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Space</span> <span class="attr">size</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">              actionList.map(action =&gt; action)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.numFormat) &#123;</span><br><span class="line">      item = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> formatNum(res, ...item.numFormat);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.timeFormat) &#123;</span><br><span class="line">      item = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> res ? moment(res).format(item.timeFormat) : <span class="string">&quot;--&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.tipCol) &#123;</span><br><span class="line">      <span class="keyword">const</span> render = item.render;</span><br><span class="line">      item = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        ellipsis: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.tipCol === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (item.tipCol === <span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;Tooltip  placement=<span class="string">&quot;topLeft&quot;</span> title=&#123;render ? render(res) : res&#125;&gt;</span><br><span class="line">                &lt;span&gt;&#123;render ? render(res) : res&#125;&lt;/span&gt;</span><br><span class="line">              &lt;/Tooltip&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;loading === <span class="literal">true</span>&#125;&gt;</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">marginTop</span>: <span class="number">24</span>, <span class="attr">padding</span>: <span class="number">24</span>, <span class="attr">background</span>: <span class="string">&quot;#fff&quot;</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;Table</span><br><span class="line">          pagination=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          columns=&#123;columns&#125;</span><br><span class="line">          dataSource=&#123;dataSource || []&#125;</span><br><span class="line">          scroll=&#123;&#123; <span class="attr">x</span>: <span class="string">&quot;max-content&quot;</span> &#125;&#125;</span><br><span class="line">          bordered</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;CommonPagination tableKey=&#123;tableConfig.tableKey&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Spin&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">&#123; <span class="built_in">global</span> &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  tableData: <span class="built_in">global</span>.tableData || [],</span><br><span class="line">&#125;))(SearchForm);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<p><strong>分页封装页面</strong></p>
<p><strong>根据modal传过来的数据进行前台分页。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Pagination &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  display: <span class="string">&quot;flex&quot;</span>,</span><br><span class="line">  justifyContent: <span class="string">&quot;flex-end&quot;</span>,</span><br><span class="line">  alignItems: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">  backgroundColor: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">  height: <span class="string">&quot;60px&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> CommonPagination = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch, tableData, tableKey &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">page</span>: pageData, params &#125; = tableData.find(<span class="function"><span class="params">item</span> =&gt;</span> item.tableKey === tableKey) || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 分页变化</span></span><br><span class="line">  <span class="keyword">const</span> pageChange = <span class="function">(<span class="params">page</span>) =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">&quot;global/getTableData&quot;</span>,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        tableKey,</span><br><span class="line">        params: &#123;</span><br><span class="line">          page,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div style=&#123;styles&#125;&gt;</span><br><span class="line">      &#123;pageData &amp;&amp; (</span><br><span class="line">        &lt;Pagination</span><br><span class="line">          total=&#123;pageData.total&#125;</span><br><span class="line">          showTotal=&#123;<span class="function">() =&gt;</span> <span class="string">`共计 <span class="subst">$&#123;pageData.total&#125;</span> 个`</span>&#125;</span><br><span class="line">          defaultCurrent=&#123;<span class="number">1</span>&#125;</span><br><span class="line">          showSizeChanger=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          onChange=&#123;pageChange&#125;</span><br><span class="line">          current=&#123;params.page&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">&#123;<span class="built_in">global</span> &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  tableData: <span class="built_in">global</span>.tableData || [],</span><br><span class="line">&#125;))(CommonPagination);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>使用</strong></p>
<p><strong>### CommonTable（通用表格）</strong></p>
<p><strong>必传参数tableConfig</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">tableConfig=&#123;</span><br><span class="line"></span><br><span class="line">  tableKey:<span class="string">&#x27;tableKey&#x27;</span>, <span class="comment">// 必传</span></span><br><span class="line"></span><br><span class="line">  columns:[ <span class="comment">// 必传</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&quot;Age&quot;</span>,</span><br><span class="line"></span><br><span class="line">      key: <span class="string">&quot;age&quot;</span>,</span><br><span class="line"></span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line">      numFormat:[<span class="number">1</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      title: <span class="string">&quot;Time&quot;</span>,</span><br><span class="line"></span><br><span class="line">      width: <span class="number">150</span>,</span><br><span class="line"></span><br><span class="line">      key: <span class="string">&quot;time&quot;</span>,</span><br><span class="line"></span><br><span class="line">     timeFormat: <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span></span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      title: <span class="string">&quot;Action&quot;</span>,</span><br><span class="line"></span><br><span class="line">      width: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">      actionMap:[</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">          type: <span class="string">&quot;href&quot;</span>,</span><br><span class="line"></span><br><span class="line">          text: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">          <span class="function"><span class="title">onClick</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;123&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;res.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">          type: <span class="string">&quot;confirm&quot;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">onConfirm</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;onOk&quot;</span>);</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">onCancel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;onCancel&quot;</span>);</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          text: <span class="string">&quot;删除&quot;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;res.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  ], </span><br><span class="line"></span><br><span class="line">  config:&#123;&#125; <span class="comment">// table的配置，与官方文档一致</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;CommonTable tableConfig=&#123;tableConfig&#125; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>其中<code>columns</code>与官方文档配置一致，当有如下参数时会进行特殊处理：</p>
<ul>
<li><p><strong>tipCol (文字过长省略,Tooltip上方提示)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">columns: [</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">   title: &quot;Address&quot;,</span><br><span class="line"></span><br><span class="line">   dataIndex: &quot;address&quot;,</span><br><span class="line"></span><br><span class="line">   width: 150,</span><br><span class="line"></span><br><span class="line">   key: &quot;address&quot;,</span><br><span class="line"></span><br><span class="line">   tipCol: true,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>true</code>时开启<code>false</code>关闭</p>
</li>
</ul>
<ul>
<li><p><strong>numFormat（时间格式化）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">columns: [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    title: <span class="string">&quot;Age&quot;</span>,</span><br><span class="line"></span><br><span class="line">    key: <span class="string">&quot;age&quot;</span>,</span><br><span class="line"></span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line">    numFormat:[<span class="number">1</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p> <code>numFormat[保留几位小数，是否进行千分位格式化]</code>，<code>numFormat[2,true]</code>效果<code>1234.567=&gt;1,234.57</code></p>
<ul>
<li><p><strong>timeFormat（日期格式化）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">columns: [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    title: <span class="string">&quot;Time&quot;</span>,</span><br><span class="line"></span><br><span class="line">    width: <span class="number">150</span>,</span><br><span class="line"></span><br><span class="line">    key: <span class="string">&quot;time&quot;</span>,</span><br><span class="line"></span><br><span class="line">    timeFormat: <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>timeFormat:时间戳格式</code>，格式化为指定格式</p>
</li>
<li><p>actionMap（操作栏）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   title: <span class="string">&quot;Action&quot;</span>,</span><br><span class="line"></span><br><span class="line">   width: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">    actionMap:[</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        type: <span class="string">&quot;href&quot;</span>,</span><br><span class="line"></span><br><span class="line">        text: <span class="string">&quot;123&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">onClick</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;123&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;res.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        type: <span class="string">&quot;confirm&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">onConfirm</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;onOk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">onCancel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;onCancel&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        text: <span class="string">&quot;删除&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;res.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p> <code>actionMap的type</code>用于决定操作类型，具体如下：</p>
<ul>
<li><p><code>href</code>，text和render至少有一个，render优先级高于text。当只有text参数时，生成结果为<code>&lt;a&gt;&#123;text&#125;&lt;/a&gt;</code>。当有render时，生成结果为render的返回值。</p>
</li>
<li><p><code>confirm</code>，用于操作前的确认。render与text的关系与<code>href</code>一致。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>AntDesign</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React项目(UmiJS)中使用高德地图</title>
    <url>/myBlog/2021/03/02/2021-03-02-React%E9%A1%B9%E7%9B%AE(UmiJS)%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<h5 id="React-AMap"><a href="#React-AMap" class="headerlink" title="React AMap"></a>React AMap</h5><p>这是一个基于 React 封装的高德地图组件.</p>
<p><strong>文档地址</strong></p>
<p><code>https://uiw.gitee.io/react-amap/#/</code></p>
<h6 id="01、安装"><a href="#01、安装" class="headerlink" title="01、安装"></a>01、安装</h6><p><code>npm install @uiw/react-amap --save</code></p>
<h6 id="02、使用"><a href="#02、使用" class="headerlink" title="02、使用"></a>02、使用</h6><p>在文档左侧找到需要使用的例子。在右侧直接复制对应代码。按需进行修改。</p>
<h6 id="03、例子（贝塞尔曲线的使用）"><a href="#03、例子（贝塞尔曲线的使用）" class="headerlink" title="03、例子（贝塞尔曲线的使用）"></a>03、例子（贝塞尔曲线的使用）</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, APILoader, BezierCurve &#125; <span class="keyword">from</span> <span class="string">&quot;@uiw/react-amap&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CarLine = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [show] = useState(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> path = [<span class="comment">// 每个弧线段有两种描述方式</span></span><br><span class="line">        [<span class="number">116.39</span>, <span class="number">39.91</span>, <span class="number">116.37</span>, <span class="number">39.91</span>],<span class="comment">// 起点</span></span><br><span class="line">        <span class="comment">// 第一段弧线</span></span><br><span class="line">        [<span class="number">116.380298</span>, <span class="number">39.907771</span>, <span class="number">116.38</span>, <span class="number">39.90</span>],<span class="comment">// 控制点，途经点</span></span><br><span class="line">        <span class="comment">// 第二段弧线</span></span><br><span class="line">        [<span class="number">116.385298</span>, <span class="number">39.907771</span>, <span class="number">116.40</span>, <span class="number">39.90</span>],<span class="comment">// 控制点，途经点// 弧线段有两种描述方式1</span></span><br><span class="line">        <span class="comment">// 第三段弧线</span></span><br><span class="line">        [<span class="comment">// 弧线段有两种描述方式2</span></span><br><span class="line">            [<span class="number">116.392872</span>, <span class="number">39.887391</span>],<span class="comment">// 控制点</span></span><br><span class="line">            [<span class="number">116.40772</span>, <span class="number">39.909252</span>],<span class="comment">// 控制点</span></span><br><span class="line">            [<span class="number">116.41</span>, <span class="number">39.89</span>]<span class="comment">// 途经点</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 第四段弧线</span></span><br><span class="line">        [<span class="number">116.423857</span>, <span class="number">39.889498</span>, <span class="number">116.422312</span>, <span class="number">39.899639</span>, <span class="number">116.425273</span>, <span class="number">39.902273</span>]</span><br><span class="line">        <span class="comment">// 控制点，控制点，途经点，每段最多两个控制点</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleParams = <span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> values</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;APILoader akay=<span class="string">&quot;a7a90e05a37d3f6bf76d4a9032fc9129&quot;</span>&gt;</span><br><span class="line">                &lt;div style=&#123;&#123; <span class="attr">width</span>: <span class="string">&quot;100%&quot;</span>, <span class="attr">height</span>: <span class="string">&quot;600px&quot;</span> &#125;&#125; &gt;</span><br><span class="line">                    &lt;<span class="built_in">Map</span> zoom=&#123;<span class="number">14</span>&#125; center=&#123;[<span class="number">116.397637</span>, <span class="number">39.900001</span>]&#125;&gt;</span><br><span class="line">                        &lt;BezierCurve</span><br><span class="line">                            visiable=&#123;show&#125;</span><br><span class="line">                            path=&#123;path&#125;</span><br><span class="line">                            isOutline=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                            outlineColor=<span class="string">&quot;&quot;</span></span><br><span class="line">                            borderWeight=&#123;<span class="number">3</span>&#125;</span><br><span class="line">                            strokeColor=<span class="string">&quot;red&quot;</span></span><br><span class="line">                            strokeOpacity=&#123;<span class="number">1</span>&#125;</span><br><span class="line">                            strokeWeight=&#123;<span class="number">6</span>&#125;</span><br><span class="line">                            <span class="comment">// 线样式还支持 &#x27;dashed&#x27;</span></span><br><span class="line">                            strokeStyle=<span class="string">&quot;solid&quot;</span></span><br><span class="line">                            <span class="comment">// strokeStyle是dashed时有效</span></span><br><span class="line">                            strokeDasharray=&#123;[<span class="number">10</span>, <span class="number">10</span>]&#125;</span><br><span class="line">                            lineJoin=<span class="string">&quot;round&quot;</span></span><br><span class="line">                            lineCap=<span class="string">&quot;round&quot;</span></span><br><span class="line">                            zIndex=&#123;<span class="number">50</span>&#125;</span><br><span class="line">                        /&gt;</span><br><span class="line">                    &lt;/<span class="built_in">Map</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/APILoader&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CarLine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://gitee.com/shimmer612/mypicturehouse/raw/master/myPicture/Snipaste_2021-03-02_09-02-09.png" alt="image"></p>
]]></content>
      <tags>
        <tag>React UmiJS</tag>
      </tags>
  </entry>
  <entry>
    <title>react 中使用Swiper轮播图插件</title>
    <url>/myBlog/2021/03/08/2021-03-08-react-%E4%B8%AD%E4%BD%BF%E7%94%A8Swiper%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h5 id="第一步、安装"><a href="#第一步、安装" class="headerlink" title="第一步、安装"></a>第一步、安装</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i swiper</span><br></pre></td></tr></table></figure>
<h5 id="第二步、使用"><a href="#第二步、使用" class="headerlink" title="第二步、使用"></a>第二步、使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Swiper, SwiperSlide &#125; <span class="keyword">from</span> <span class="string">&#x27;swiper/react&#x27;</span>;</span><br><span class="line"><span class="comment">//根据自己的需要引用样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/swiper.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Swiper</span><br><span class="line">      spaceBetween=&#123;<span class="number">50</span>&#125;</span><br><span class="line">      slidesPerView=&#123;<span class="number">3</span>&#125;</span><br><span class="line">      onSlideChange=&#123;<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;slide change&#x27;</span>)&#125;</span><br><span class="line">      onSwiper=&#123;<span class="function">(<span class="params">swiper</span>) =&gt;</span> <span class="built_in">console</span>.log(swiper)&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;SwiperSlide&gt;Slide <span class="number">1</span>&lt;/SwiperSlide&gt;</span><br><span class="line">      &lt;SwiperSlide&gt;Slide <span class="number">2</span>&lt;/SwiperSlide&gt;</span><br><span class="line">      &lt;SwiperSlide&gt;Slide <span class="number">3</span>&lt;/SwiperSlide&gt;</span><br><span class="line">      &lt;SwiperSlide&gt;Slide <span class="number">4</span>&lt;/SwiperSlide&gt;</span><br><span class="line">    &lt;/Swiper&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>到这一个轮播图就已经实现了，但是只是轮播图没有别的东西，比如左右的按钮。这些需要我们手动添加。</strong></p>
<h5 id="第三步、添加功能（例：navigation按钮）"><a href="#第三步、添加功能（例：navigation按钮）" class="headerlink" title="第三步、添加功能（例：navigation按钮）"></a>第三步、添加功能（例：navigation按钮）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入所需功能和样式文件</span></span><br><span class="line"><span class="keyword">import</span> SwiperCore, &#123; Navigation &#125; <span class="keyword">from</span> <span class="string">&quot;swiper&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;swiper/components/navigation/navigation.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">SwiperCore.use([Navigation]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件上添加属性</span></span><br><span class="line">  &lt;Swiper</span><br><span class="line">    spaceBetween=&#123;<span class="number">50</span>&#125;</span><br><span class="line">    slidesPerView=&#123;<span class="number">1</span>&#125;</span><br><span class="line">    navigation</span><br><span class="line">    style=&#123;&#123; <span class="attr">padding</span>: <span class="string">&quot;24px&quot;</span> &#125;&#125;</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure>


<p><strong>以上就是在react中使用swiper插件。</strong></p>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript常用数组方法的复习</title>
    <url>/myBlog/2021/03/04/2021-03-04-javascript%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>分析项目代码经常会看到一些数组方法，some,slice等等。概念都模糊不清，感觉知道又感觉不知道。还是要到W3C上去查一下用法。</strong></p>
<p><strong>所以这次把一些常用的数组方法整理一下，用来巩固复习</strong></p>
<h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><code>forEach()</code></h5><p><strong><code>forEach() </code>对数组的每一项进行操作</strong></p>
<p><strong><code>callback</code> 函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong></p>
<p><strong>返回值<code>undefined</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = []</span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    arr1.push(item*<span class="number">2</span>) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 2, 4, 6, 8, 10, 12 ]</span></span><br></pre></td></tr></table></figure>


<h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a><code>filter()</code></h5><p><strong><code>filter() </code>返回一个新数组，包含复合要求的所有元素</strong></p>
<p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong></p>
<p><strong>返回值：复合要求的新数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.filter(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>


<h5 id="map"><a href="#map" class="headerlink" title="map()"></a><code>map()</code></h5><p><strong><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值</strong></p>
<p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong></p>
<p><strong>返回值：原数组每个元素执行回调函数的结果组成的新数组。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[ 2, 4, 6, 8, 10, 12 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ false, false, false, true, true, true ]</span></span><br></pre></td></tr></table></figure>


<h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a><code>slice()</code></h5><p><strong><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</strong></p>
<p><code>**begin</code> 可选**</p>
<p><strong>提取起始处的索引（从 <code>0</code> 开始），从该索引开始提取原数组元素。</strong></p>
<p><strong>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，<code>slice(-2)</code> 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。</strong></p>
<p><strong>如果省略 <code>begin</code>，则 <code>slice</code> 从索引 <code>0</code> 开始。</strong></p>
<p><strong>如果 <code>begin</code> 超出原数组的索引范围，则会返回空数组。</strong></p>
<p><strong><code>end</code> 可选</strong></p>
<p><strong>提取终止处的索引（从 <code>0</code> 开始），在该索引处结束提取原数组元素。<code>slice</code> 会提取原数组中索引从 <code>begin</code> 到 <code>end</code> 的所有元素（包含 <code>begin</code>，但不包含 <code>end</code>）</strong></p>
<p><strong>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 <code>slice(-2,-1)</code> 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。</strong></p>
<p><strong>如果 <code>end</code> 被省略，则 <code>slice</code> 会一直提取到原数组末尾。</strong></p>
<p><strong>如果 <code>end</code> 大于数组的长度，<code>slice</code> 也会一直提取到原数组末尾。</strong></p>
<p><strong>返回值：一个含有被提取元素的新数组。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr1  = arr.slice(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.slice()</span><br><span class="line"><span class="built_in">console</span>.log(arr1);<span class="comment">//[ 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>


<h5 id="find"><a href="#find" class="headerlink" title="find()"></a><code>find()</code></h5><p><strong><code>find()</code>方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 [<code>undefined</code>]</strong></p>
<p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong></p>
<p><strong>数组中第一个满足所提供测试函数的元素的值，否则返回 [<code>undefined</code>]</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let</span> arr =<span class="meta"> [1,2,3,4,5,6]</span></span><br><span class="line"><span class="attribute">let</span> arr<span class="number">1</span> = arr.find(item=&gt;item&gt;<span class="number">4</span>)</span><br><span class="line"><span class="attribute">console</span>.log(arr<span class="number">1</span>); //<span class="number">5</span></span><br></pre></td></tr></table></figure>


<h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a><code>sort()</code></h5><p><strong><code>sort()</code>对数组的元素进行排序，并返回数组</strong></p>
<p><strong>如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.sort()</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 1, 2, 3, 4, 5, 6, 7, 8 ]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr3.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b-a</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[ 8, 7, 6, 5, 4, 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure>


<h5 id="some"><a href="#some" class="headerlink" title="some()"></a><code>some()</code></h5><p><strong><code>some()</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</strong></p>
<p><strong>注意：如果用一个空数组进行测试，在任何情况下它返回的都是<code>false</code>。</strong></p>
<p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong>    </p>
<p><strong>返回值： 数组中有至少一个元素通过回调函数的测试就会返回<code>true</code>；所有元素都没有通过回调函数的测试返回值才会为<code>false</code>。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aa = arr.some(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> bb = arr.some(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">7</span>)</span><br><span class="line"><span class="built_in">console</span>.log(aa);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>


<h5 id="every"><a href="#every" class="headerlink" title="every()"></a><code>every()</code></h5><p><strong><code>every()</code>方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</strong></p>
<p><strong>注意：若收到一个空数组，此方法在一切情况下都会返回 <code>true</code>。</strong></p>
<p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong>    </p>
<p><strong>返回值：如果回调函数的每一次返回都为true，返回 <code>true</code> ，否则返回 <code>false</code>。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aa = arr.every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> bb = arr.every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//fasle</span></span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>


<p><strong>差不多就是这些常用的。</strong></p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展运算符(...)的复习</title>
    <url>/myBlog/2021/03/04/2021-03-04-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6(...)%E7%9A%84%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>最近看项目代码，经常看到函数里运用扩展运算符。总是模模糊糊的，看明白又好像没有明白的感觉。</strong></p>
<p><strong>像下面这样</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> setCacheComponents([</span><br><span class="line">        ...cacheComponentsClone,</span><br><span class="line">        &#123;</span><br><span class="line">          ...currentPane,</span><br><span class="line">          name: name || obj.item.props.children[<span class="number">1</span>] <span class="comment">// 如果调用addtab时传入了name则使用此name</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]);</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------</span></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          tableData: [</span><br><span class="line">            ...state.tableData,</span><br><span class="line">            &#123;</span><br><span class="line">              params: &#123;</span><br><span class="line">                ...payload.params,</span><br><span class="line">                page: payload.page || <span class="number">1</span>,</span><br><span class="line">                pageSize: payload.pageSize || <span class="number">10</span></span><br><span class="line">              &#125;,</span><br><span class="line">              tableKey: payload.tableKey,</span><br><span class="line">              loading: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><strong>就整理了一下扩展运算符的用法。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    sex: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    hobby:&#123;</span><br><span class="line">        play: <span class="string">&quot;ball&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newObj);<span class="comment">//&#123; name: &#x27;张三&#x27;, age: &#x27;20&#x27;, sex: &#x27;男&#x27;, hobby: &#123; play: &#x27;ball&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = [...arr,...arr1]</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转换成数组</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abcdefg&#x27;</span> </span><br><span class="line"><span class="keyword">const</span> newStr = [...str]</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;,&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值   数组对象都可以</span></span><br><span class="line"><span class="keyword">const</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> bb = [...aa,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>


<p><strong>项目里常用的就是在函数里，用来解构赋值的比较多</strong></p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS margin折叠</title>
    <url>/myBlog/2021/03/09/2021-03-09-CSS-margin%E6%8A%98%E5%8F%A0/</url>
    <content><![CDATA[<h5 id="margin折叠"><a href="#margin折叠" class="headerlink" title="margin折叠"></a>margin折叠</h5><p><strong>今天在写页面的时候发现，子元素设置了<code>margin-top:101px</code>不生效，父元素却向下移动了。</strong></p>
<p><strong>这就是margin折叠</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> //这里给子元素设置margin-top</span><br><span class="line">//父元素却向下移动了101px</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;car-message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>             </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .main &#123;</span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">1440px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">810px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">~@/assets/bg.png</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">19px</span> <span class="number">0</span> <span class="number">17px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.car-message &#123;</span><br><span class="line"><span class="css">  <span class="attribute">margin-top</span>: <span class="number">101px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">~@/assets/one.png</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">1404px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">51px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>百度了下</strong></p>
<p><strong>外边距叠加存在两种情况：一是父子外边距叠加；二是兄弟外边距叠加。</strong></p>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p><strong>兄弟间重叠时</strong></p>
<ol>
<li><strong>底部元素变为行内盒子(<code>display: inline-block</code>);</strong></li>
<li><strong>底部元素的position的值为absolute/fixed</strong></li>
</ol>
<p><strong>父元素与子元素重叠</strong></p>
<ol>
<li><strong>父元素加入(<code>overflow: hidden</code>);</strong></li>
<li><strong>父元素添加透明边框(<code>border:1px solid transparent</code>);</strong></li>
<li><strong>子元素变为行内盒子(<code>display: inline-block</code>);</strong></li>
<li><strong>子元素加入浮动属性或定位</strong></li>
</ol>
<p><strong>这里我给父元素设置了<code>overflow:hidden</code>就解决了。</strong></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js+express+mongodb来开发后端</title>
    <url>/myBlog/2021/03/11/2021-03-10-node.js+express+mongodb%E6%9D%A5%E5%BC%80%E5%8F%91%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<h3 id="node-js-express-mongodb来开发后端"><a href="#node-js-express-mongodb来开发后端" class="headerlink" title="node.js+express+mongodb来开发后端"></a>node.js+express+mongodb来开发后端</h3><p>大四临近毕业，要开始写毕业设计，但是作为前端的我，对后端一窍不通。然后想到nodejs也可以写后端。用的就是javascript。应该学习成本不是很高。</p>
<p>如今已经写好了毕设。但是对当时怎么用nodejs+express+mongodb写接口有点遗忘了。</p>
<p>今天来记录一下。以便后面来复习和查找。</p>
<h5 id="1、安装express"><a href="#1、安装express" class="headerlink" title="1、安装express"></a>1、安装express</h5><p><code>npm install express --save</code></p>
<h5 id="2、新建一个js文件"><a href="#2、新建一个js文件" class="headerlink" title="2、新建一个js文件"></a>2、新建一个js文件</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入express并绑定到app上</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源路径</span></span><br><span class="line">app.use(<span class="string">&#x27;/public&#x27;</span>, express.static(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// express 处理json</span></span><br><span class="line">app.use(express.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的开发</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/user&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/address&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/admin&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/banner&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/cat&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/goods&#x27;</span>))</span><br><span class="line"><span class="comment">// app.use(&#x27;/&#x27;,require(&#x27;./router/hotGoods&#x27;))</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/order&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/shopcart&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/star&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/upload&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/goodsBuyCount&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行端口，服务跑在本地的3002端口上</span></span><br><span class="line">app.listen(<span class="number">3002</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success in port 3002，服务已经跑起来啦&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3、mongoose的使用"><a href="#3、mongoose的使用" class="headerlink" title="3、mongoose的使用"></a>3、mongoose的使用</h5><p>安装mongoose</p>
<p><code>npm i mongoose --save</code></p>
<p>新建一个<code>js</code>文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/storedb&#x27;</span>, &#123;</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">    useCreateIndex: <span class="literal">true</span>,</span><br><span class="line">    useUnifiedTopology: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据模型，类似于表</span></span><br><span class="line"><span class="keyword">const</span> CateSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    <span class="comment">//字段名称与字段类型 还可以加一些判断。required:true代表必传，unique 代表唯一的</span></span><br><span class="line">    cat_id: &#123; <span class="attr">type</span>:<span class="built_in">Number</span> &#125;,</span><br><span class="line">    cat_name: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//绑定到模型</span></span><br><span class="line"><span class="keyword">const</span> Category = mongoose.model(<span class="string">&#x27;category&#x27;</span>, CateSchema, <span class="string">&#x27;category&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="4、接口的实现"><a href="#4、接口的实现" class="headerlink" title="4、接口的实现"></a>4、接口的实现</h5><p>这里直接使用express router  不直接用<code>app.get()或者app.post()</code>这样去使用了。</p>
<p>新建一个<code>js</code>文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入mongoose数据模型</span></span><br><span class="line"><span class="keyword">const</span> &#123; Address &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../storedb&#x27;</span>)</span><br><span class="line"><span class="comment">//绑定router</span></span><br><span class="line"><span class="keyword">let</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户地址</span></span><br><span class="line">router.get(<span class="string">&#x27;/getAddress&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> address = <span class="keyword">await</span> Address.find(&#123; <span class="attr">user_id</span>: req.query.user_id &#125;)</span><br><span class="line">    res.send(address)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除地址</span></span><br><span class="line">router.delete(<span class="string">&#x27;/deleteAddress&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> address = req.query</span><br><span class="line">    <span class="keyword">const</span> userId = req.query.user_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Address.deleteOne(&#123; <span class="attr">user_id</span>: userId, <span class="attr">add_id</span>: address.add_id &#125;)</span><br><span class="line"></span><br><span class="line">    res.send(&#123;</span><br><span class="line">        message: <span class="string">&quot;删除地址成功！&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改地址</span></span><br><span class="line">router.post(<span class="string">&#x27;/changeAddress&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> address = req.body</span><br><span class="line">    <span class="keyword">const</span> addId = req.body.add_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Address.updateOne(&#123; <span class="attr">add_id</span>: addId &#125;, &#123;</span><br><span class="line">        user_name: address.user_name,</span><br><span class="line">        user_phone: address.user_phone,</span><br><span class="line">        user_address: address.user_address</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    res.send(&#123;</span><br><span class="line">        message: <span class="string">&quot;修改地址成功！&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>一般查询用get</p>
<p>增加修改用post</p>
<p>删除用delete</p>
<p><strong>说一下mongoose的增删改查</strong></p>
<p><strong>增加</strong></p>
<p>Address代表表名</p>
<p>里面是增加的一个地址，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Address.create(&#123; <span class="attr">user_id</span>: <span class="number">1234</span>,</span><br><span class="line">        add_id: <span class="number">123</span>,</span><br><span class="line">        user_name: <span class="string">&quot;zz&quot;</span>,</span><br><span class="line">        user_phone: <span class="number">123456789</span>,</span><br><span class="line">        user_address: <span class="string">&quot;大道&quot;</span></span><br><span class="line">               &#125;)</span><br></pre></td></tr></table></figure>
<p><strong>删除</strong></p>
<p>删除user_id中add_id为123的那个地址</p>
<p><code>Address.deleteOne(&#123; user_id: 1234, add_id: 123 &#125;)</code></p>
<p><strong>修改</strong></p>
<p>修改第一个参数是修改哪一个，查找条件。add_id为多少的哪一个。</p>
<p>第二个参数为修改后的数据</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Address<span class="selector-class">.updateOne</span>(&#123; add_id: addId &#125;, &#123;</span><br><span class="line">        user_name: <span class="selector-tag">address</span><span class="selector-class">.user_name</span>,</span><br><span class="line">        user_phone: <span class="selector-tag">address</span><span class="selector-class">.user_phone</span>,</span><br><span class="line">        user_address: <span class="selector-tag">address</span>.user_address</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p><strong>查询</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有的</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Address</span>.</span></span>find<span class="literal">()</span></span><br><span class="line"><span class="comment">//查询user_id为123的所有地址</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Address</span>.</span></span>find(&#123;user_id:<span class="number">123</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>mongoose的一些常用查询参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//skip查询的时候跳过多少个</span></span><br><span class="line"><span class="comment">//limit限制一次查询几个</span></span><br><span class="line"><span class="comment">//sort是排序 1是正序-1是倒序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skip(), limit(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> goods = <span class="keyword">await</span> Goods.find().limit(pageSize).skip((pageNum - <span class="number">1</span>) * pageSize).sort(&#123; <span class="attr">goods_id</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$in 查询goods_id为$in后面的数组</span></span><br><span class="line"><span class="keyword">const</span> aa = <span class="keyword">await</span> Goods.find(&#123; <span class="attr">goods_id</span>: &#123; <span class="attr">$in</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>] &#125; &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$or  满足其中一个条件就可以</span></span><br><span class="line"><span class="comment">//$regex 匹配查询</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> Goods.find(&#123;</span><br><span class="line">        $or: [</span><br><span class="line">            &#123; <span class="attr">goods_name</span>: &#123; <span class="attr">$regex</span>: reg &#125; &#125;,</span><br><span class="line">            &#123; <span class="attr">goods_title</span>: &#123; <span class="attr">$regex</span>: reg &#125; &#125;,</span><br><span class="line">            &#123; <span class="attr">goods_subtitle</span>: &#123; <span class="attr">$regex</span>: reg &#125; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//aggregate聚合查询</span></span><br><span class="line"><span class="comment">//$lookup  两个表关联查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的意思是根据cat_id在goods表中查询，查询到的数据放到goods这个字段下。</span></span><br><span class="line"><span class="keyword">const</span> index = req.params.categoryId - <span class="number">1</span></span><br><span class="line">    <span class="keyword">await</span> Category.aggregate([</span><br><span class="line">        &#123;</span><br><span class="line">            $lookup: &#123;</span><br><span class="line">                <span class="keyword">from</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">                localField: <span class="string">&quot;cat_id&quot;</span>,</span><br><span class="line">                foreignField: <span class="string">&quot;cat_id&quot;</span>,</span><br><span class="line">                <span class="keyword">as</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&#123;<span class="attr">$sort</span>:&#123;<span class="string">&quot;cat_id&quot;</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">        , <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            res.send(data[index])</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h5 id="5、上传文件"><a href="#5、上传文件" class="headerlink" title="5、上传文件"></a>5、上传文件</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line">fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Goods &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../storedb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/uploadImg&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> goods = req.query</span><br><span class="line">    <span class="keyword">let</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">    form.encoding = <span class="string">&#x27;utf-8&#x27;</span>; <span class="comment">// 编码</span></span><br><span class="line">    <span class="comment">// 保留扩展名</span></span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//文件存储路径 最后要注意加 &#x27;/&#x27; 否则会被存在public下</span></span><br><span class="line">    form.uploadDir = path.join(__dirname, <span class="string">&#x27;../public/imgs/accessory/&#x27;</span>)</span><br><span class="line">    form.parse(req,  <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="keyword">let</span> oldFilename = files.file.name</span><br><span class="line">        fs.rename(files.file.path, form.uploadDir + generateFilename(oldFilename), <span class="keyword">async</span> err =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;重命名失败&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">await</span> Goods.updateOne(&#123; <span class="attr">goods_id</span>: goods.goods_id &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        goods_pic: <span class="string">`public/imgs/accessory/<span class="subst">$&#123;generateFilename(oldFilename)&#125;</span>`</span>,</span><br><span class="line">                    &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">                 res.send(&#123;</span><br><span class="line">                     message: <span class="string">&quot;保存成功！&quot;</span></span><br><span class="line">                 &#125;)   </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateFilename</span>(<span class="params">oldFilename</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//将老的文件名拼上时间戳，这样既不会命名冲突又可以看出文件的上传事件</span></span><br><span class="line">        <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">let</span> names = oldFilename.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;names[<span class="number">0</span>]&#125;</span>_<span class="subst">$&#123;<span class="string">&quot;&quot;</span> + d.getFullYear() + (d.getMonth() + <span class="number">1</span>) + d.getDate() + <span class="string">&#x27;_&#x27;</span> + d.getHours() + d.getMinutes() + d.getSeconds()&#125;</span>.<span class="subst">$&#123;names[<span class="number">1</span>]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="6、启动"><a href="#6、启动" class="headerlink" title="6、启动"></a>6、启动</h5><p>在项目根目录打开终端运行<code>node app.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出现   success in port 3002，服务已经跑起来啦 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为上面是这样写的</span></span><br><span class="line"><span class="comment">// 运行端口，服务跑在本地的3002端口上</span></span><br><span class="line">app.listen(<span class="number">3002</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success in port 3002，服务已经跑起来啦&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明运行成功。</p>
<h5 id="7、调用接口"><a href="#7、调用接口" class="headerlink" title="7、调用接口"></a>7、调用接口</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 获取用户地址</span></span><br><span class="line">    <span class="keyword">async</span> getAddress () &#123;</span><br><span class="line">      <span class="keyword">const</span> userId = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$http.get(<span class="string">&#x27;getAddress&#x27;</span>, &#123;</span><br><span class="line">        params: &#123;</span><br><span class="line">          user_id: userId</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.address = res.data</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求地址</span></span><br><span class="line">Request URL: http:<span class="comment">//localhost:3002/getAddress?user_id=1255</span></span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: <span class="number">200</span> OK</span><br><span class="line">Remote Address: [::<span class="number">1</span>]:<span class="number">3002</span></span><br><span class="line">Referrer Policy: strict-origin-when-cross-origin</span><br><span class="line"><span class="comment">//返回相应的数据</span></span><br><span class="line">[&#123;</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>:<span class="string">&quot;602e26a4a8185949dc9ea23e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_id&quot;</span>:<span class="string">&quot;1255&quot;</span>,</span><br><span class="line">    <span class="string">&quot;add_id&quot;</span>:<span class="string">&quot;157&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_name&quot;</span>:<span class="string">&quot;wky&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_phone&quot;</span>:<span class="string">&quot;18888888888&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_address&quot;</span>:<span class="string">&quot;无锡市滨湖区太湖学院北区&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>:<span class="number">0</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>


<p>到这里基本上就完成了大部分的功能。</p>
<p>当然还有登录注册。jwt签名生成token，密码的加密等等。</p>
<p>这个我也忘记的差不多了。</p>
<p>去整理一下，再记录下来。</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>express</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>从数组中取出随机几个数组成新数组（不重复取）</title>
    <url>/myBlog/2021/03/10/2021-03-10-%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%96%E5%87%BA%E9%9A%8F%E6%9C%BA%E5%87%A0%E4%B8%AA%E6%95%B0%E7%BB%84%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%EF%BC%88%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%8F%96%EF%BC%89/</url>
    <content><![CDATA[<p>​     要给自己的商城，加一个推荐商品的功能。想让他随机从商品表中取出4个数据。</p>
<p>​     一开始我用<code>Math.random()*arr.length</code>但是会取出相同的。这样就不太对，哪有推荐两个相同的商品呢。</p>
<p>​    然后想到获取当前选择的下标，把选择的那个删除。下一次随机，就随机不到那个数了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前台传来的当前商品的id</span></span><br><span class="line"><span class="keyword">const</span> nowGoodsIndex = req.query.goods_id-<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> goods = <span class="keyword">await</span> Goods.find()</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存入数组的id,因为id就是从1开始往上加。</span></span><br><span class="line">    goods.forEach(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">        arr.push(index+<span class="number">1</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//用splice把当前商品的id删除避免重复</span></span><br><span class="line">    arr.splice(nowGoodsIndex, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newArr = []</span><br><span class="line">    <span class="comment">//随机取出4个，取出来一个就把那个数在数组中删掉。避免重复。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length);</span><br><span class="line">        newArr.push(arr[index]);</span><br><span class="line">        <span class="comment">//获取后，在数组中删除已经加入的随机数</span></span><br><span class="line">        arr.splice(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的一些知识点</title>
    <url>/myBlog/2021/03/12/2021-03-12-CSS%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>今天是三月十二日植树节，记录一些自己写样式的时候，以前不知道的东西。</p>
<h5 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h5><p><strong>设置<code>padding</code>的时候为了不改变盒子的大小要设置<code>box-sizing:border-box</code></strong></p>
<h5 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h5><p><strong>盒子内部阴影在末尾加一个<code>inset</code>比如<code>box-shadow: 0 0 5px 0 red inset</code></strong></p>
<h5 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h5><p><strong>设置透明度的时候<code>opacity:0.8</code>这样会让父元素子元素也改变透明度。可以改成<code>rgba(255,255,255,0.8)</code>的这种方式</strong></p>
<h5 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h5><p><strong>网页字体最小就是<code>12px</code></strong></p>
<h5 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h5><p><strong>设置背景图时使用路径时<code> background-image: url(~@/assets/carMonitor/warn-info.png);</code>写成这种样式。还有加上<code> background-size: cover;</code></strong></p>
<p>不想写了，今天很难受，心情很不好。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个vue3.0+element-plus项目</title>
    <url>/myBlog/2021/03/20/2021-03-20-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAvue3.0+element-plus%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h5 id="创建一个vue3-0-element-plus项目"><a href="#创建一个vue3-0-element-plus项目" class="headerlink" title="创建一个vue3.0+element-plus项目"></a>创建一个vue3.0+element-plus项目</h5><p><strong>首先要确认自己电脑中的@vue/cli&gt;4.5</strong></p>
<p><strong>可以用<code>vue -V</code>查看</strong></p>
<p><strong>没有的话可以用<code>npm i -g @vue/cli</code>升级</strong></p>
<p><strong>升级成功后</strong></p>
<p>**<code>vue create my-pro</code>**这里选择Vue 3的项目。</p>
<p><img src="https://s4.ax1x.com/2021/03/20/6h81Dx.png"></p>
<p>创建成功后。</p>
<p>执行下面的命令。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> my-<span class="keyword">pro</span></span><br><span class="line">vue <span class="built_in">add</span> element-plus</span><br></pre></td></tr></table></figure>
<p>全局加载和按需加载自己选择。</p>
<p>安装成功后。</p>
<p><code>npm run serve</code></p>
<p>发现项目跑起来了。</p>
<p><img src="https://s4.ax1x.com/2021/03/20/6h8hMn.png"></p>
<p>按需加载的话，需要在src/plugins/element.js文件里，引入自己所需要的组件就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ElButton,ElTimeline &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app) =&gt; &#123;</span><br><span class="line">  app.use(ElButton)</span><br><span class="line">  app.use(ElTimeline)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>杂记02</title>
    <url>/myBlog/2021/03/22/2021-03-22-%E6%9D%82%E8%AE%B002/</url>
    <content><![CDATA[<p>今天也没学什么新东西，但是博客总要点新的东西吧。就随便写一点吧。</p>
<p>今天想给自己的在线购物商城加一个客服聊天功能。百度了下用<code>socket.io</code>可以实现，但是自己折腾了半天也没有成功，就放弃了。</p>
<p>不过给订单页面加了一个快递查询的功能，用的假数据，点击直接返回一串快递信息，是我自己淘宝买东西的物流信息。用<code>element-ui</code>的<code>TimeLine</code>实现的。</p>
<p>其实想了很多功能，却不知道怎么实现，比如点击付款按钮，跳出来一个二维码，扫描二维码，跳转到订单页面，没有找到什么插件可以监听二维码的扫描事件。用的<code>qrimage</code>只能生成二维码，扫描跳转到设置特定的页面。</p>
<p>痛点很多，要学习的东西也很多。</p>
<p>总感觉自己不是一个合格的前端。</p>
<p>不务正业去学了后台。写了几个接口学了<code>mongo</code>,也满足自己平时写写小项目自己写后台了。也挺不错的。express真的挺香的。</p>
<p>昨天去滆湖公园放了风筝，很开心。和高中同学聊聊天散散步真的很愉快。</p>
<p>还是没事多出去走一走，呼吸呼吸新鲜的空气。</p>
<p>整个人的精神会好很多。</p>
<p>看着漫天的飞翔的风筝，抽芽的柳树，盛开的油菜花和家乡的Sakura。</p>
<p>那时候之前所有的烦闷与苦痛全部抛在脑后。</p>
<p>真好！</p>
<p><img src="https://z3.ax1x.com/2021/03/22/6ouenP.jpg" alt="6ouenP.jpg"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Dav结构的分析</title>
    <url>/myBlog/2021/02/23/davjs%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>下面是davjs   models的一个基本结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="comment">//dav model的名字</span></span><br><span class="line">namespace: <span class="string">&#x27;example&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据</span></span><br><span class="line">state: &#123;<span class="attr">num</span>:<span class="number">1</span>&#125;, <span class="comment">//表示当前的example中的state状态，这里可以给初始值，这里num初始为1</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//这里是做异步处理的相当于VueX的action</span></span><br><span class="line">effects: &#123; </span><br><span class="line"> <span class="comment">//payload是参数   put触发action ，select获取数据， call异步操作   </span></span><br><span class="line">*<span class="function"><span class="title">addByONe</span>(<span class="params">&#123; payload&#125;, &#123; call, put,select &#125;</span>)</span> &#123; </span><br><span class="line">    </span><br><span class="line"> <span class="comment">//这里使用select</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.num) <span class="comment">//这里就获取到了当前state中的数据num</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> param1;</span><br><span class="line"> </span><br><span class="line">param1 = num + payload; 这里就可以使用num进行操作了</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> put(&#123;</span><br><span class="line">type: <span class="string">&#x27;save&#x27;</span>,</span><br><span class="line">num:param1</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">   </span><br><span class="line"><span class="comment">//用来保存更新state值 上面的put方法调用这里的方法,</span></span><br><span class="line">reducers: &#123;</span><br><span class="line"><span class="function"><span class="title">save</span>(<span class="params">state, action</span>)</span> &#123; <span class="comment">//这里的state是当前总的state，这里的action包含了上面传递的参数和type</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> &#123; ...state, ...action.num &#125;; <span class="comment">//这里用ES6语法来更新当前state中num的值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>Davjs</tag>
      </tags>
  </entry>
  <entry>
    <title>新年快乐</title>
    <url>/myBlog/2021/02/11/hello-world/</url>
    <content><![CDATA[<p><strong>大家新年快乐</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Vue3中路由的相关配置</title>
    <url>/myBlog/2021/03/16/Vue3%E4%B8%AD%E8%B7%AF%E7%94%B1%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h5 id="Vue3中路由的相关配置"><a href="#Vue3中路由的相关配置" class="headerlink" title="Vue3中路由的相关配置"></a>Vue3中路由的相关配置</h5><h6 id="1、路由的配置"><a href="#1、路由的配置" class="headerlink" title="1、路由的配置"></a>1、路由的配置</h6><p><strong>在src路径下新建router文件夹，然后在该文件夹新建index.js文件</strong></p>
<p><strong>安装vue-router</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm i vue-router@next --save</span><br></pre></td></tr></table></figure>
<p><strong>index.js文件配置如下。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/addCount.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Father = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/father.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        redirect: <span class="string">&#x27;/add&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/father&quot;</span>,</span><br><span class="line">        component: Father,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/add&quot;</span>,</span><br><span class="line">        component: addCount</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(),</span><br><span class="line">    routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>然后配置main.js     引入router</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"><span class="comment">//使用router</span></span><br><span class="line"><span class="comment">//引入elementPlus</span></span><br><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="comment">//引入router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="comment">//使用ElementPlus</span></span><br><span class="line">app.use(ElementPlus)</span><br><span class="line"><span class="comment">//使用router</span></span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h6 id="2、路由的跳转"><a href="#2、路由的跳转" class="headerlink" title="2、路由的跳转"></a>2、路由的跳转</h6><p><strong>方式一</strong></p>
<p><strong>引入useRouter</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;changeRouter&quot;</span>&gt; 跳转路由 &lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> router = useRouter()</span><br><span class="line">    <span class="keyword">const</span> changeRouter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      router.push(<span class="string">&#x27;/father&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; changeRouter &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style  scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>


<p><strong>方式二router-link</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/child&quot;</span>&gt;子页面&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p><strong>方式三</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;el-button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;toAdd&quot;</span>&gt;下一页&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router/index.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">toAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      router.push(<span class="string">&#x27;/add&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h6 id="3、路由的传参"><a href="#3、路由的传参" class="headerlink" title="3、路由的传参"></a>3、路由的传参</h6><p><strong>引入useRoute</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;changeRouter&quot;</span>&gt; 跳转路由 &lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter, useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> router = useRouter()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> route = useRoute()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> changeRouter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">  router.push(&#123;</span><br><span class="line">        path: <span class="string">&#x27;/father&#x27;</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          name: <span class="string">&#x27;zz&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; changeRouter &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style  scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><strong>如下图：在father页面就可以通过route.query.name获取到”zz”</strong></p>
<p><a href=""><img src="https://s3.ax1x.com/2021/03/16/6saqCn.png" alt="6saqCn.png"></a></p>
<h6 id="4、路由的嵌套"><a href="#4、路由的嵌套" class="headerlink" title="4、路由的嵌套"></a>4、路由的嵌套</h6><p><strong>通过router-view和子路由的方式嵌套</strong></p>
<p><strong>router/index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Father = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/father.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> children = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/child.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        redirect: <span class="string">&#x27;/father&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/father&quot;</span>,</span><br><span class="line">        component: Father,</span><br><span class="line">        children:</span><br><span class="line">            [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">&#x27;/child&#x27;</span>,</span><br><span class="line">                    component: children</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(),</span><br><span class="line">    routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>father.vue</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;h&quot;</span>&gt;我是爷爷&lt;/h1&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/child&quot;</span>&gt;下一页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><strong>child.vue</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      &lt;h1&gt;我是儿子&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;Sunzi /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Sunzi <span class="keyword">from</span> <span class="string">&#x27;./sunzi.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Sunzi,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行如下图所示：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/2021031614574953.gif#pic_center"></p>
]]></content>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>davJs学习02</title>
    <url>/myBlog/2021/02/24/umi%E4%B8%AD%EF%BC%8Cdavjs%E5%AD%A6%E4%B9%A002/</url>
    <content><![CDATA[<p><strong>最近公司新项目用的UmiJs3.x，整个项目的数据，通过内置的Davjs来控制。</strong></p>
<p><strong>昨天自己分析了一下Davjs。但是脑海中的概念还是很模糊。今天再梳理一下。</strong></p>
<h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p><strong>首先是在Models文件夹下创建一个JS文件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> GlobalModel = &#123;</span><br><span class="line">    <span class="comment">//model的名称</span></span><br><span class="line">  namespace: <span class="string">&quot;global&quot;</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">      <span class="comment">//放数据的地方</span></span><br><span class="line">      user:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    <span class="comment">// 异步获取数据，不能直接修改数据，需要通过put调用reducers的方法。</span></span><br><span class="line">     <span class="string">`其中call和普通是dva 提供的effect 函数内部的处理函数</span></span><br><span class="line"><span class="string">      call：执行异步函数， put：发出一个 Action，类似于 dispatch  select获取数据，`</span></span><br><span class="line">      *<span class="function"><span class="title">getTableData</span>(<span class="params">&#123; payload &#125;, &#123; put, select, call &#125;</span>)</span> &#123;</span><br><span class="line">          </span><br><span class="line"> <span class="keyword">const</span> tableList = <span class="keyword">yield</span> select(<span class="function">(<span class="params">state</span>) =&gt;</span> state.global.tableData);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123;</span><br><span class="line">        type: <span class="string">&quot;setTableParams&quot;</span>,</span><br><span class="line">        payload,</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">   <span class="comment">//同步获取数据</span></span><br><span class="line">      <span class="function"><span class="title">setTableParams</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">              ...state</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> GlobalModel;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p><strong>对应页面中</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TableDemo = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//能直接获取到users</span></span><br><span class="line">    <span class="keyword">const</span> &#123;dispatch, users&#125; = props</span><br><span class="line">    </span><br><span class="line">    dispatch(&#123;</span><br><span class="line">        <span class="comment">//global这个model中，getTableData这个异步操作函数</span></span><br><span class="line">      type: <span class="string">&quot;global/getTableData&quot;</span>,</span><br><span class="line">      payload: &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;users.name&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把global中state中的数据绑定到页面的props上</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">&#123; <span class="built_in">global</span> &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  users: <span class="built_in">global</span>.users</span><br><span class="line">&#125;))(TableDemo);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>还可以调用Service文件夹里的接口，获取数据</strong></p>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>Davjs</tag>
        <tag>UmiJs</tag>
      </tags>
  </entry>
  <entry>
    <title>react hooks学习</title>
    <url>/myBlog/2021/03/05/react%20hooks%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="react-hooks学习"><a href="#react-hooks学习" class="headerlink" title="react hooks学习"></a>react hooks学习</h2><h5 id="01、什么是react-hooks"><a href="#01、什么是react-hooks" class="headerlink" title="01、什么是react hooks"></a>01、什么是react hooks</h5><p>react hooks就是react提供的内置函数，这些函数可以让，函数式组件和类组件一样拥有组件状态和副作用。</p>
<p><strong>什么是状态？</strong></p>
<p>React中的放数据的地方。</p>
<p><strong>什么是副作用？</strong></p>
<p>在 React 组件中执行数据获取、订阅或者手动修改 DOM，我们统一把这些操作称为“副作用”</p>
<h5 id="02、useState"><a href="#02、useState" class="headerlink" title="02、useState"></a>02、<code>useState</code></h5><p><code>useState</code> 就类似于类组件中的<code>this.state</code></p>
<p><code>useState</code>的用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useState , useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Main =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 onClick=&#123;<span class="function">()=&gt;</span>&#123;setCount(count+<span class="number">2</span>)&#125;&#125;&gt;当前的数为：&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Main /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getEementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h5 id="03、useEffect"><a href="#03、useEffect" class="headerlink" title="03、useEffect"></a>03、<code>useEffect</code></h5><p><code>useEffect</code>就相当于生命周期的<code>componentDidMoun</code>t和<code>componentDidUPdate</code></p>
<p>使用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useState , useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Main =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相当于componentDidMount和componentDidUpdate</span></span><br><span class="line">    <span class="comment">//要加第二个参数空数组，不然会一直调用</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 打印点击的次数</span></span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">`You clicked <span class="subst">$&#123;count/<span class="number">2</span>&#125;</span> times`</span>)</span><br><span class="line">  &#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 onClick=&#123;<span class="function">()=&gt;</span>&#123;setCount(count+<span class="number">2</span>)&#125;&#125;&gt;当前的数为：&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Main /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/myBlog/2021/02/12/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[<p><strong>一个正在慢慢成长的前端程序员。</strong></p>
<hr>
<p><img src="https://s3.ax1x.com/2021/03/15/6BvLAU.jpg"></p>
]]></content>
      <tags>
        <tag>Aboutme</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在vue的css中使用data中的变量</title>
    <url>/myBlog/2021/03/15/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E7%9A%84css%E4%B8%AD%E4%BD%BF%E7%94%A8data%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p> 如何在vue的css中使用data中的变量。</p>
<p>很简单用v-bind</p>
<p><strong>一个简单的例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;h1&quot;</span> &gt;我是&#123;&#123; color &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.h1 &#123;</span><br><span class="line">  color: v-bind(color);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>运行如下图所示：成功设置了文字的颜色。</p>
<p><img src="https://s3.ax1x.com/2021/03/15/6BXT8s.png"></p>
<p><strong>这样就可以做一个文字颜色不断变化的demo</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;h1&quot;</span> @click=<span class="string">&quot;changeColor&quot;</span>&gt;我是&#123;&#123; color &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;changeColor&quot;</span>&gt;变色&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.changeColor()</span><br><span class="line">    &#125;,<span class="number">500</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = [</span><br><span class="line">        <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hotpink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lime&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;skyblue&#x27;</span>,</span><br><span class="line">      ]</span><br><span class="line">      <span class="built_in">this</span>.color = arr[<span class="built_in">this</span>.count]</span><br><span class="line">      <span class="built_in">this</span>.count++</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.count === <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.h1 &#123;</span><br><span class="line">  color: v-bind(color);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下图：</p>
<p><a href="https://imgtu.com/i/6Bv861"><img src="https://s3.ax1x.com/2021/03/15/6Bv861.gif" alt="6Bv861.gif"></a></p>
<p>是不是感觉要方便许多。</p>
]]></content>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>一些小记录</title>
    <url>/myBlog/2021/03/03/%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>开发中写样式less中，最外层取一个不易重的类名，其余子元素类名写在里面</strong></p>
<p><strong>尽量不要写到margin负值</strong></p>
<p><strong>样式遵循设计图</strong></p>
<p><strong>图片名称起相关英文名</strong></p>
<p><strong>flex布局多使用space-around做分割，除非必须用space-between</strong></p>
<p><strong>类名过长用xx-xx这样写</strong></p>
<p><strong>页面起名大驼峰比如<code>ChargeManage</code></strong></p>
<hr>
]]></content>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.0初探</title>
    <url>/myBlog/2021/02/26/vue3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="✨-官网地址"><a href="#✨-官网地址" class="headerlink" title="✨ 官网地址"></a>✨ 官网地址</h2><p>官网文档：<a href="https://v3.cn.vuejs.org/">https://v3.cn.vuejs.org/</a></p>
<h2 id="一、vue3安装与项目创建【掌握】"><a href="#一、vue3安装与项目创建【掌握】" class="headerlink" title="一、vue3安装与项目创建【掌握】"></a>一、vue3安装与项目创建【掌握】</h2><p>参考地址：<a href="https://www.vue3js.cn/docs/zh/guide/installation.html">https://www.vue3js.cn/docs/zh/guide/installation.html</a></p>
<h3 id="准备工作：升级脚手架"><a href="#准备工作：升级脚手架" class="headerlink" title="准备工作：升级脚手架"></a>准备工作：升级脚手架</h3><p>对于 Vue 3，你应该使用 <code>npm</code> 上可用的 Vue CLI v4.5 作为 <code>@vue/cli@next</code>。要升级，你应该需要全局重新安装最新版本的 <code>@vue/cli</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn global add @vue/cli@next</span><br><span class="line"><span class="meta">#</span><span class="bash"> OR</span></span><br><span class="line">npm install -g @vue/cli@next</span><br></pre></td></tr></table></figure>
<p>然后在 Vue 项目运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue upgrade --next</span><br></pre></td></tr></table></figure>
<h3 id="方式1：以原有vueCli脚手架创建"><a href="#方式1：以原有vueCli脚手架创建" class="headerlink" title="方式1：以原有vueCli脚手架创建"></a>方式1：以原有vueCli脚手架创建</h3><p>创建项目：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure>
<p>直接选择 <code>Vue 3 Preview</code> ，并回车，不考虑eslint问题。</p>
<img src="https://i.loli.net/2021/02/03/cxOksAVuJhP1eLN.png" style="border: 2px solid darkred" />

<p>然后执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line"><span class="comment"># 用vscode打开当前目录</span></span><br><span class="line">code .</span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure>
<h3 id="方式2：vite创建"><a href="#方式2：vite创建" class="headerlink" title="方式2：vite创建"></a>方式2：vite创建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init vite-app demo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于</span></span><br><span class="line">npx create-vite-app demo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后执行</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行项目</span></span><br><span class="line">npm run dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure>
<p>创建项目并运行，会发现我们 <code>npm run dev</code> 后是秒开项目的，运行速度极快。</p>
<h2 id="二、Composition-API（组合式API）【掌握】"><a href="#二、Composition-API（组合式API）【掌握】" class="headerlink" title="二、Composition API（组合式API）【掌握】"></a>二、Composition API（组合式API）【掌握】</h2><blockquote>
<p>相当于 React Hooks</p>
</blockquote>
<p>我们先使用以前vue2的方式实现一个累加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        btnClick()&#123;</span><br><span class="line">            this.count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>这套代码可以实现一个累加的效果，但如果以后我们想把这个组件中的 <code>count</code> 字段与 <code>btnClick</code> 单独拎出来管理，那就比较麻烦了，因为 <code>count</code> 和 <code>btnClick</code> 不在同一个方法内，很难抽离。</p>
<h3 id="1、setup"><a href="#1、setup" class="headerlink" title="1、setup"></a>1、setup</h3><p>setup有以下特性：</p>
<blockquote>
<p>1、setup函数是处于 生命周期函数 beforeCreate 和 Created 两个钩子函数之间的函数 也就说在 setup函数中是无法 使用 data 和 methods 中的数据和方法的</p>
<p>2、setup函数是 Composition API（组合API）的入口</p>
<p>3、在setup函数中定义的变量和方法最后都是需要 return 出去的 不然无法再模板中使用</p>
<p>4、由于我们不能在 setup函数中使用 data 和 methods，所以Vue 为了避免我们错误的使用，直接将 setup函数中的this修改成了 undefined</p>
<p>5、setup函数只能是同步的不能是异步的</p>
</blockquote>
<h3 id="2、API-ref"><a href="#2、API-ref" class="headerlink" title="2、API - ref"></a>2、API - ref</h3><p>我们先来体验一下vue3怎么处理这个累加效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        const count &#x3D; ref(1);	&#x2F;&#x2F; 此时我们使用ref指定count的默认值为1，因此上面data中的count会失效</span><br><span class="line">        let btnClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            count.value++;		&#x2F;&#x2F; 修改ref中的值要用xxx.value</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;count, btnClick&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时如果我想单独管理这个累加效果，我就可以这么操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=<span class="string">&quot;btnClick&quot;</span>&gt;累加&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// count: 0		// 一旦把setup中的代码抽离，return中对应的值要去掉，否则ref无效</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      	<span class="comment">// 函数调用后就会返回一个对象，因此我们直接return</span></span><br><span class="line">        <span class="keyword">return</span> clickCountFn()</span><br><span class="line">      	<span class="comment">// 如果后期还想同时返回其他数据，可以将clickCountFn()的返回结果展开</span></span><br><span class="line">      	<span class="comment">// return &#123;...clickCountFn(), 其他数据&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个函数，这样这块功能我们就能单独管理了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCountFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> btnClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        count.value++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;count, btnClick&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3、API-reactive"><a href="#3、API-reactive" class="headerlink" title="3、API - reactive"></a>3、API - reactive</h3><p>再来了解另一个API ：</p>
<blockquote>
<p>reactive函数和ref作用非常接近，但是它的参数是一个对象，我们可以在对象中定义其方法，而通过这个形式，就不需要再对其进行进行 <code>.value</code> 调用了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;obj.username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick1&quot;&gt;修改姓名&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref, reactive&#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">      	&#x2F;&#x2F; 使用reactive</span><br><span class="line">        let obj &#x3D; reactive(&#123;</span><br><span class="line">            username: &quot;Jack&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">        let btnClick1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            obj.username &#x3D; &quot;Mary&quot;</span><br><span class="line">        &#125;</span><br><span class="line">				return &#123;...clickCountFn(), obj, btnClick1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function clickCountFn()&#123;</span><br><span class="line">    const count &#x3D; ref(1);</span><br><span class="line">    let btnClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        count.value++;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;count, btnClick&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>使用 <code>reactive</code> 生成的对象与 <code>ref</code> 生成的值都是响应式的。</p>
<p>这里可以看到我们在 html 中调用数据时，使用的是 <code>obj.username</code> ，那我们是否可以直接写 <code>username</code> 呢？答案是可以的，但这里需要注意：</p>
<blockquote>
<p>由于reactive返回的对象本质上已经是一个Proxy对象，所以通过…扩展符号展开的属性，是无法进行响应式的</p>
</blockquote>
<p>也就是说，如果这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;...clickCountFn(), ...obj, btnClick1&#125;</span><br></pre></td></tr></table></figure>
<p>那么是无法实现的。</p>
<h3 id="4、API-toRefs"><a href="#4、API-toRefs" class="headerlink" title="4、API - toRefs"></a>4、API - toRefs</h3><p>正确的写法应该是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">	&lt;!-- 无需obj.username，直接username即可 --&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick1&quot;&gt;修改姓名&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 新增toRefs方法</span><br><span class="line">import &#123;ref, reactive, toRefs&#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let obj &#x3D; reactive(&#123;</span><br><span class="line">            username: &quot;Jack&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">        let btnClick1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            obj.username &#x3D; &quot;Mary&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 通过toRefs方法</span><br><span class="line">        let refObj &#x3D; toRefs(obj);</span><br><span class="line">      	&#x2F;&#x2F; 通过...refObj将数据扩展</span><br><span class="line">        return &#123;...clickCountFn(), ...refObj, btnClick1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 其他代码...</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>


<h2 id="三、Provide与Inject（提供-注入）【掌握】"><a href="#三、Provide与Inject（提供-注入）【掌握】" class="headerlink" title="三、Provide与Inject（提供/注入）【掌握】"></a>三、Provide与Inject（提供/注入）【掌握】</h2><h3 id="1、Vue2写法"><a href="#1、Vue2写法" class="headerlink" title="1、Vue2写法"></a>1、Vue2写法</h3><p>以往我们的父传子是通过props传的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child :num&#x3D;&quot;num&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            num: 123</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child.vue子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;父组件传过来的值：&#123;&#123;num&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#39;num&#39;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>这个时候限制死了数据必须来自父组件，我们其实还有 <code>Provide</code> 和 <code>Inject</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    provide: &#123;</span><br><span class="line">        num: 456</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child.vue子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;父组件传过来的值：&#123;&#123;num&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    inject: [&#39;num&#39;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p><code>Provide/Inject</code> 相比于 <code>props</code> 的好处在于：</p>
<p>如果组件嵌套较多，那么 <code>props</code> 需要一级一级往下传递，后期很难维护。<code>Provide+Inject</code> 相当于是跨级组件传值，比如孙子组件也想用上面这个 <code>num</code> 的值，就不用一级一级往下传，直接在孙子组件使用即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Sun.vue孙子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h4&gt;孙子组件：&#123;&#123;num&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">	  &#x2F;&#x2F; 将Sun组件在Child组件中引入，即可实现跨级组件传值</span><br><span class="line">    inject: [&#39;num&#39;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2、Vue3写法"><a href="#2、Vue3写法" class="headerlink" title="2、Vue3写法"></a>2、Vue3写法</h3><p>vue3中的 <code>provide/inject</code>。两者都只能在当前活动实例的 <code>setup()</code> 期间调用。</p>
<p>格式为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// provide</span></span><br><span class="line"><span class="keyword">import</span> &#123;provide&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 显式导入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 此处name必须是String类型，value则不限制</span></span><br><span class="line">    provide(name, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inject</span></span><br><span class="line"><span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 显式导入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      	<span class="comment">// name即为传过来的字段，第二个参数可选，可填写默认值</span></span><br><span class="line">        <span class="keyword">const</span> val = inject(name, defaultValue);</span><br><span class="line">      	<span class="keyword">return</span> &#123;val&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们修改以上案例的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;provide&#125; from &#39;vue&#39; &#x2F;&#x2F; 显式导入</span><br><span class="line">import Child from &#39;.&#x2F;Child.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        provide(&#39;num&#39;, 789)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Sun.vue孙子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h4&gt;孙子组件：&#123;&#123;mynum&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;inject&#125; from &#39;vue&#39; &#x2F;&#x2F; 显式导入</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">        const mynum &#x3D; inject(&#39;num&#39;);</span><br><span class="line">        return &#123;mynum&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3、响应性"><a href="#3、响应性" class="headerlink" title="3、响应性"></a>3、响应性</h3><p>所谓的 <code>Provide/Inject</code> 响应性，其实就是把传递的值结合上文提及的 <code>ref</code> 或 <code>reactive</code> 一起使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child &#x2F;&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;changeNumFn&quot;&gt;修改num&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;provide, ref&#125; from &#39;vue&#39; &#x2F;&#x2F; 显式导入</span><br><span class="line">import Child from &#39;.&#x2F;Child.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      	&#x2F;&#x2F; 使用ref来定义num的值</span><br><span class="line">        const num &#x3D; ref(123);</span><br><span class="line"></span><br><span class="line">      	&#x2F;&#x2F; 声明一个函数，专门用于修改num</span><br><span class="line">        let changeNumFn &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            num.value &#x3D; 456;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        provide(&#39;num&#39;, num)</span><br><span class="line"></span><br><span class="line">      	&#x2F;&#x2F; 返回这个函数</span><br><span class="line">        return &#123;changeNumFn&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>此时，当你点击按钮时，孙子组件接收到的 <code>num</code> 就会被修改了。</p>
<h2 id="四、Teleport（传送门）【掌握】"><a href="#四、Teleport（传送门）【掌握】" class="headerlink" title="四、Teleport（传送门）【掌握】"></a>四、Teleport（传送门）【掌握】</h2><p>在vue2中，想要将子节点渲染到存在于父组件以外的 <code>DOM</code> 节点时，需要通过第三方库 <a href="https://links.jianshu.com/go?to=https://github.com/LinusBorg/portal-vue">portal-vue</a> 去实现。而vue3中，<code>Teleport</code> 是一种能够将我们的模板移动到 <code>DOM</code> 中 <code>Vue app</code> 之外的其他位置的技术。</p>
<blockquote>
<p>官方文档：<a href="https://vue3js.cn/docs/zh/guide/teleport.html">《teleport》</a></p>
</blockquote>
<p>举个最简单的例子：</p>
<p>我们在 <code>index.html</code> 中 <code>#app</code> 同级的地方新增一个 <code>#test</code> 元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于vue的 <code>main.js</code> 中规定了打包出来的代码都放入 <code>#app</code> 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>因此，你现在没有办法将代码放入 <code>#test</code> 中。此时，我们可以使用传送门：</p>
<p><code>App.vue</code> 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Home &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#39;.&#x2F;components&#x2F;Home.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p><code>Home.vue</code> 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;这段话是渲染在#app中的&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;teleport to&#x3D;&quot;#test&quot;&gt;</span><br><span class="line">      &lt;p&gt;这段话是渲染在#test中的--1&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;teleport&gt;</span><br><span class="line">	&lt;teleport to&#x3D;&quot;#test&quot;&gt;</span><br><span class="line">      &lt;p&gt;这段话是渲染在#test中的--2&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;teleport&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>此时，你打开浏览器控制台，就可以看到第2、3个p标签已经被渲染到 <code>#test</code> 中。</p>
<blockquote>
<p>备注：</p>
<p>1、<teleport>标签身上都to属性，填写的是css选择器。</p>
<p>2、多个传送门书写时，会按照自上而下的顺序传送至另一个DOM元素。</p>
</blockquote>
<h2 id="五、Suspense（等待）【掌握】"><a href="#五、Suspense（等待）【掌握】" class="headerlink" title="五、Suspense（等待）【掌握】"></a>五、Suspense（等待）【掌握】</h2><p>Suspense组件用于在等待某个异步组件解析时显示后备内容。</p>
<p>那我们什么时候需要使用异步组件呢？多了去了，比如：</p>
<ul>
<li>在页面加载之前显示加载动画</li>
<li>显示占位符内容</li>
<li>处理延迟加载的图像</li>
</ul>
<p>那么，让我们看看 <code>Suspense</code> 怎么使用，我们先来提一个需求：</p>
<blockquote>
<p>在等待组件获取数据并解析时显示“玩命加载中…”之类的内容</p>
</blockquote>
<p>OK，我们来写一个 <code>Article.vue</code> 组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default&#123;</span><br><span class="line">  async setup() &#123;</span><br><span class="line">    let content &#x3D; ref(&#39;内容&#39;)</span><br><span class="line">    content.value &#x3D; await new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; 3秒后修改content</span><br><span class="line">            resolve(&quot;你好世界&quot;);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123;content&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>用个 <code>Home.vue</code> 组件来调用它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">      &lt;template #default&gt;</span><br><span class="line">          &lt;Article&gt;&lt;&#x2F;Article&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;template #fallback&gt;</span><br><span class="line">          &lt;p&gt;玩命加载中...&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;Suspense&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Article from &#39;.&#x2F;Article.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        Article</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>可以看出，<code>&lt;Suspense&gt;</code> 中，包含了两个template标签，<code>#default</code> 定义了我们要写入的内容， <code>#fallback</code> 定义了我们要预显示的内容。</p>
<blockquote>
<p>⚠️ 注意：</p>
<p>作为template中的内容（即插槽），必须要有根元素。</p>
</blockquote>
<h2 id="六、Fragment（碎片）【了解】"><a href="#六、Fragment（碎片）【了解】" class="headerlink" title="六、Fragment（碎片）【了解】"></a>六、Fragment（碎片）【了解】</h2><p>vue2中，如果你创建一个Vue组件，那么它只能有一个根节点。这意味着不能创建这样的组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;你好&lt;&#x2F;div&gt;</span><br><span class="line">	&lt;div&gt;世界&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>原因是代表任何Vue组件的Vue实例需要绑定到一个单一的DOM元素中。唯一可以创建一个具有多个DOM节点的组件的方法就是创建一个没有底层Vue实例的功能组件。</p>
<p>这情况同样存在于react，但react可以使用空标签 <code>&lt;&gt;&lt;/&gt;</code> 来包裹，或者是使用一个名为Fragment的虚拟元素：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Columns</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;React.Fragment&gt;</span><br><span class="line">      	&lt;td&gt;你好&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;世界&lt;/td&gt;</span><br><span class="line">      &lt;/React.Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尽管Fragment看起来像一个普通的DOM元素，但它是虚拟的，根本不会在DOM树中呈现。目前你可以在Vue 2中使用vue-fragments库来使用Fragments，而在Vue 3中，你直接使用就行了，无需引入任何库。</p>
<h2 id="七、TreeShaking（消除未使用代码）【了解】"><a href="#七、TreeShaking（消除未使用代码）【了解】" class="headerlink" title="七、TreeShaking（消除未使用代码）【了解】"></a>七、TreeShaking（消除未使用代码）【了解】</h2><p>TreeShaking 是一个术语，指的是在打包构建过程中移除没有被引用到的代码，这些代码可以成为 <strong>dead code</strong>。这个概念最早在基于 ES6 的打包工具 Rollup 中提出，后来被引入到 webpack 中。TreeShaking 比较依赖于 ES6 模块系统的静态结构特性，比如 <code>import</code> 和 <code>export</code>。</p>
<p>文档参考：<a href="https://vue3js.cn/docs/zh/guide/migration/global-api-treeshaking.html#_2-x-%E8%AF%AD%E6%B3%95">https://vue3js.cn/docs/zh/guide/migration/global-api-treeshaking.html#_2-x-%E8%AF%AD%E6%B3%95</a></p>
<p>举个例子：</p>
<p>vue2中我们常使用 <code>Vue.nextTick(()=&gt;&#123;&#125;)</code> 来预操作DOM，但有时候我们不用这个 <code>nextTick</code> ，比如改用别的方式来代替（如setTimeout），那么项目打包时，vue 全局的 <code>nextTick</code> 就成为一个多余的代码，从而使你的项目打包体积变大。</p>
<p>在vue3中，官方团队重构了所有全局 API 的组织方式，让所有的 API 都支持了 TreeShaking。所以vue3中如果还想使用全局的 <code>nextTick</code> ，就需要引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 和 DOM 有关的一些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果你在 Vue 3 中不引入而直接调用 <code>Vue.nextTick()</code> ，就会得到一个报错：<code>undefined is not a function</code>。</p>
<p>官方也给出了Vue 2.x 中的受此更改影响的全局 API：</p>
<ul>
<li><code>Vue.nextTick</code></li>
<li><code>Vue.observable</code> (用 <code>Vue.reactive</code> 替换)</li>
<li><code>Vue.version</code></li>
<li><code>Vue.compile</code> (仅全构建)</li>
<li><code>Vue.set</code> (仅兼容构建)</li>
<li><code>Vue.delete</code> (仅兼容构建)</li>
</ul>
<h2 id="八、Performance（性能）【了解】"><a href="#八、Performance（性能）【了解】" class="headerlink" title="八、Performance（性能）【了解】"></a>八、Performance（性能）【了解】</h2><p>vue3.0相对于vue2.0来说性能快1.2到1.5倍，主要原因如下：</p>
<h3 id="1、diff方法优化"><a href="#1、diff方法优化" class="headerlink" title="1、diff方法优化"></a>1、diff方法优化</h3><ul>
<li>Vue2 中的虚拟dom是进行全量的对比</li>
<li>Vue3 新增了静态标记（PatchFlag），只比对带有 PF 的节点，并且通过 Flag 的信息得知 当前节点要比对的具体内容。</li>
</ul>
<h3 id="2、静态提升"><a href="#2、静态提升" class="headerlink" title="2、静态提升"></a>2、静态提升</h3><ul>
<li>Vue2中无论元素是否参与更新, 每次都会重新创建, 然后再渲染</li>
<li>Vue3中对于不参与更新的元素, 会做静态提升, 只会被创建一次, 在渲染时直接复用即可</li>
</ul>
<h3 id="3、cacheHandlers-事件侦听器缓存"><a href="#3、cacheHandlers-事件侦听器缓存" class="headerlink" title="3、cacheHandlers 事件侦听器缓存"></a>3、cacheHandlers 事件侦听器缓存</h3><ul>
<li>默认情况下onClick会被视为动态绑定, 所以每次都会去追踪它的变化</li>
<li>但是因为是同一个函数，所以没有追踪变化, 直接缓存起来复用即可</li>
</ul>
<h3 id="4、ssr渲染"><a href="#4、ssr渲染" class="headerlink" title="4、ssr渲染"></a>4、ssr渲染</h3><ul>
<li>当有大量静态的内容时候，这些内容会被当做纯字符串推进一个buffer里面，  即使存在动态的绑定，会通过模板插值嵌入进去。这样会比通过虚拟dmo来渲染的快上很多很多。</li>
<li>当静态内容大到一定量级时候，会用_createStaticVNode方法在客户端去生成一个static node，  这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染。</li>
</ul>
<h2 id="九、Setup的生命周期【了解】"><a href="#九、Setup的生命周期【了解】" class="headerlink" title="九、Setup的生命周期【了解】"></a>九、Setup的生命周期【了解】</h2><p>组合式API需要在setup中使用，setup中含有的生命钩子与vue的大体一致：</p>
<p>具体参考：<a href="https://vue3js.cn/docs/zh/guide/composition-api-lifecycle-hooks.html">《setup生命周期钩子》</a></p>
<h2 id="十、TypeScript支持【了解】"><a href="#十、TypeScript支持【了解】" class="headerlink" title="十、TypeScript支持【了解】"></a>十、TypeScript支持【了解】</h2><p>vue3新增了对TS语法的支持。    </p>
]]></content>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>react hooks useEffect的使用</title>
    <url>/myBlog/2021/03/24/2021-03-24-react-hooks-useEffect%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h5 id="useEffect的tips"><a href="#useEffect的tips" class="headerlink" title="useEffect的tips"></a>useEffect的tips</h5><p>useEffect的语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//逻辑</span></span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>
<p>如果没有第二个空数组参数，useEffect就会在页面状态改变的时候执行，加了空数组参数，只会在页面mount的时候更新一次。</p>
<p><strong>传第二个参数：</strong>可以用作页面数据初始化</p>
<p><strong>不传第二个参数</strong></p>
<p>按照useEffect的这个在页面状态变化的时候调用的特性，可以做很多东西。</p>
<p>可以每次数据变化的时候，把数据传给后台，相当于监听。</p>
<p>分数变化的时候打印当前得了多少分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Main = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相当于componentDidMount和componentDidUpdate</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 打印点击的次数</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">`当前得分为<span class="subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 onClick=&#123;<span class="function">() =&gt;</span> &#123; setCount(count + <span class="number">1</span>) &#125;&#125;&gt;当前得分为：&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Main /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>




<h5 id="useEffect-不应该返回任何内容"><a href="#useEffect-不应该返回任何内容" class="headerlink" title="useEffect 不应该返回任何内容"></a>useEffect 不应该返回任何内容</h5><p>但是使用async await  会返回一个隐式的promise</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这样写是错误的</span></span><br><span class="line">useEffect(<span class="keyword">async</span>()=&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span>  ......	</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>应该把async await  写在useEffect里面，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//应该这样写</span></span><br><span class="line">useEffect(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">     <span class="keyword">await</span>.....</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>


<p>今天就记录到这，马上我把react-redux在复习一下。好久不用都忘的差不多了。</p>
]]></content>
      <tags>
        <tag>react hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>react hooks理解</title>
    <url>/myBlog/2021/03/25/2021-03-25-react-hooks%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>在函数式组件中发现了这样的一个问题，代码如下。<br>按理说<strong>1处</strong>打印出来的<code>isShow</code>应该为<code>true</code>可是却是<code>false</code></p>
<p><strong>2处</strong>打印出来的是true</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = <span class="function">()=&gt;</span> &#123;    </span><br><span class="line"><span class="keyword">const</span> [isShow, setIsShow] = useState(<span class="literal">false</span>)</span><br><span class="line"> <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(isShow)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;button onClick=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        setIsShow(<span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1</span></span><br><span class="line">        <span class="built_in">console</span>.log(isShow)</span><br><span class="line">    &#125;&#125;&gt;新增&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>去百度了一些资料。</p>
<p>原来函数式组件每次更新的时候都会重新执行一次函数，此时 <strong>1处</strong>打印的<code>isShow</code>其实是初始的状态的旧值。形成了闭包。</p>
<p><strong>2处</strong>外层能打印出来，是因为函数每次更新都要执行。</p>
<p>只有用<code>useEffect</code>才能获取到,绑定<code>isShow</code>为依赖。可以这样写:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = <span class="function">()=&gt;</span> &#123;   </span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> [isShow, setIsShow] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(isShow)</span><br><span class="line">&#125;,[isShow])</span><br><span class="line"> <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(isShow)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;button onClick=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        setIsShow(<span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1</span></span><br><span class="line">        <span class="built_in">console</span>.log(isShow)</span><br><span class="line">    &#125;&#125;&gt;新增&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<ul>
<li><strong>hooks是有序的，会被react从上到下依次读取，所以不能在条件中使用，这样会导致解析的时候前后声明顺序不一致。hooks必须放在函数内部顶层。</strong></li>
</ul>
]]></content>
      <tags>
        <tag>react hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>react类组件的数据顺序</title>
    <url>/myBlog/2021/04/02/2021-04-02-react%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h5 id="昨日"><a href="#昨日" class="headerlink" title="昨日"></a>昨日</h5><p>昨天写代码的时候，父组件通过props传值给子组件。我在子组件中在<code>ComponentDidMount</code>中用<code>setState</code>赋值<code>render</code>中拿不到。</p>
<p>代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">useDetail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.props = props</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            useInfo: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            useInfo:<span class="built_in">this</span>.props.UseInfo</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拿不到值</span></span><br><span class="line">        <span class="keyword">const</span> useInfo = <span class="built_in">this</span>.state.useInfo</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> strategy = useInfo &amp;&amp; useInfo.strategy ?                  <span class="built_in">JSON</span>.parse(useInfo.strategy.discountStrategy) : []</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<p>这样就能获取到值，<code>render</code>在<code>componentDidMount</code>之前,所以值为<code>undefined</code>,传入的值可以直接放在<code>state</code>中赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">useDetail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.props = props</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            useInfo: <span class="built_in">this</span>.props.UseInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> useInfo = <span class="built_in">this</span>.state.useInfo</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> strategy = useInfo &amp;&amp; useInfo.strategy ? <span class="built_in">JSON</span>.parse(useInfo.strategy.discountStrategy) : []&#125;</span><br></pre></td></tr></table></figure>
<h5 id="over"><a href="#over" class="headerlink" title="over~"></a>over~</h5>]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>最近遇到的一些知识点</title>
    <url>/myBlog/2021/04/07/2021-04-07-%E6%9C%80%E8%BF%91%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h5 id="判断一个数组是否为空"><a href="#判断一个数组是否为空" class="headerlink" title="判断一个数组是否为空"></a>判断一个数组是否为空</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr.length===<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;改数组是空数组&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="判断一个数组里是否有重复值"><a href="#判断一个数组里是否有重复值" class="headerlink" title="判断一个数组里是否有重复值"></a>判断一个数组里是否有重复值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环添加到一个对象里，判断对象里是否有这个值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRepeat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[arr[i]]) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(arr[i] + <span class="string">&quot;重复了&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        hash[arr[i]] = <span class="string">&quot;have&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(hash);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">isRepeat(arr)</span><br></pre></td></tr></table></figure>
<h5 id="两个对应的数组，删除对应值"><a href="#两个对应的数组，删除对应值" class="headerlink" title="两个对应的数组，删除对应值"></a>两个对应的数组，删除对应值</h5><p>比如一个数组是<code>[1,0,0,1,0,1,0,1,0,0]</code>另外一个数组是<code>[a,b,c,d,e,f,g,h,i,j]</code>,要删除后一个数组中对应前一个数组为1的元素。</p>
<p>我一开始想的是用找出第一个数组中元素1相对于的<code>index</code>然后用<code>splice</code>删除后一个数组中对应的项。</p>
<p>但是删除一次后，数组的长度就发生了改变，因为splice方法会改变原数组第二个<code>splice</code>删除的就不是正确的了。正确做法应该是删除的时候，往删除的地方添加一个空值，删除完后，删除这个空值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>]</span><br><span class="line"></span><br><span class="line">a.map(<span class="function">(<span class="params">k,i</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k===<span class="number">1</span>) &#123;</span><br><span class="line">        b.splice(i,<span class="number">1</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = []</span><br><span class="line">b.map(<span class="function">(<span class="params">k,i</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k !== <span class="string">&quot; &quot;</span>)&#123;</span><br><span class="line">        c.push(k)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">//[ &#x27;b&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;g&#x27;, &#x27;i&#x27;, &#x27;j&#x27; ]</span></span><br><span class="line"><span class="comment">//c数组就是最后的数组</span></span><br></pre></td></tr></table></figure>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>express-ws实现webSocket通信</title>
    <url>/myBlog/2021/04/10/2021-04-10-express-ws%E5%AE%9E%E7%8E%B0webSocket%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>最近要给自己写的项目中加一个客服聊天的功能。就是前端商城和后台管理系统通信。但是是两个不同的端口。</p>
<p>百度了一下就找到了webSocket。</p>
<h5 id="什么是webSocket？"><a href="#什么是webSocket？" class="headerlink" title="什么是webSocket？"></a>什么是webSocket？</h5><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>
<p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>
<p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。(来自菜鸟教程：<a href="https://www.runoob.com/html/html5-websocket.html">https://www.runoob.com/html/html5-websocket.html</a>)</p>
<h5 id="express-ws实现"><a href="#express-ws实现" class="headerlink" title="express-ws实现"></a>express-ws实现</h5><p>1、首先在express项目中安装express-ws</p>
<p><code>npm i express-ws --save</code></p>
<p>2、然后引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 引入WebSocket</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">&quot;express-ws&quot;</span>)</span><br><span class="line"><span class="comment">// 将webSocket服务混入app，相当于为app添加.ws方法</span></span><br><span class="line">ws(app)</span><br></pre></td></tr></table></figure>
<p>3、启动服务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为了获取到所以的客户端</span></span><br><span class="line"><span class="keyword">const</span> wss = ws(app).getWss(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment">// 建立webSocket服务</span></span><br><span class="line">app.ws(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">ws, req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;连接成功！&quot;</span>);</span><br><span class="line">    <span class="comment">// send给客户端发消息</span></span><br><span class="line">    <span class="comment">// on是监听事件</span></span><br><span class="line">    <span class="comment">// message表示服务端传来的数据</span></span><br><span class="line">    ws.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 给所有的客户端广播消息</span></span><br><span class="line">        wss.clients.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            e.send(msg)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// close 事件表示客户端断开连接时执行的回调函数</span></span><br><span class="line">  ws.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;close connection&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3002</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success in port 3002，服务已经跑起来啦&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此时服务已经在3002端口跑起来了</p>
<h5 id="前端接收消息"><a href="#前端接收消息" class="headerlink" title="前端接收消息"></a>前端接收消息</h5><p>1、vue中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//连接webSocket</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3002&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      msgList: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">//   绑定webSocket事件</span></span><br><span class="line">      <span class="comment">//连接成功的回调</span></span><br><span class="line">    ws.addEventListener(<span class="string">&#x27;open&#x27;</span>, <span class="built_in">this</span>.handleWsOpen.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">      <span class="comment">//关闭的回调</span></span><br><span class="line">    ws.addEventListener(<span class="string">&#x27;close&#x27;</span>, <span class="built_in">this</span>.handleWsClose.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">      <span class="comment">//连接错误的回调</span></span><br><span class="line">    ws.addEventListener(<span class="string">&#x27;error&#x27;</span>, <span class="built_in">this</span>.handleWsError.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">      <span class="comment">//接收发送消息的回调</span></span><br><span class="line">    ws.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="built_in">this</span>.handleWsMessage.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendMessage () &#123;</span><br><span class="line">      <span class="keyword">const</span> currentY = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear()</span><br><span class="line">      <span class="keyword">let</span> currentM = <span class="keyword">new</span> <span class="built_in">Date</span>().getMonth() + <span class="number">1</span></span><br><span class="line">      <span class="keyword">let</span> currentD = <span class="keyword">new</span> <span class="built_in">Date</span>().getDate()</span><br><span class="line">      <span class="keyword">let</span> currentH = <span class="keyword">new</span> <span class="built_in">Date</span>().getHours()</span><br><span class="line">      <span class="keyword">let</span> currentMin = <span class="keyword">new</span> <span class="built_in">Date</span>().getMinutes()</span><br><span class="line">      <span class="keyword">let</span> currentS = <span class="keyword">new</span> <span class="built_in">Date</span>().getSeconds()</span><br><span class="line">      <span class="keyword">if</span> (currentM &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentM = <span class="string">`0<span class="subst">$&#123;currentM&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentD &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentD = <span class="string">`0<span class="subst">$&#123;currentD&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentH &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentH = <span class="string">`0<span class="subst">$&#123;currentH&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentMin &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentMin = <span class="string">`0<span class="subst">$&#123;currentMin&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentS &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentS = <span class="string">`0<span class="subst">$&#123;currentS&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> date = <span class="string">`<span class="subst">$&#123;currentY&#125;</span>-<span class="subst">$&#123;currentM&#125;</span>-<span class="subst">$&#123;currentD&#125;</span> <span class="subst">$&#123;currentH&#125;</span>:<span class="subst">$&#123;currentMin&#125;</span>:<span class="subst">$&#123;currentS&#125;</span>`</span></span><br><span class="line">      <span class="keyword">const</span> name = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;nickname&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        msg: <span class="built_in">this</span>.msg,</span><br><span class="line">        name: name,</span><br><span class="line">        date: date,</span><br><span class="line">        left: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      ws.send(msg)</span><br><span class="line">      <span class="comment">// 发送完清空聊天框</span></span><br><span class="line">      <span class="built_in">this</span>.msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleWsOpen () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;聊天已经启动！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleWsClose () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;聊天已经关闭！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleWsError () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;聊天出错！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 收发消息</span></span><br><span class="line">    handleWsMessage (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e)</span><br><span class="line">      <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.parse(e.data)</span><br><span class="line">      <span class="built_in">this</span>.msgList.push(msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>2、react中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3002&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chat</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            msg: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            msgList:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">        ws.addEventListener(<span class="string">&#x27;open&#x27;</span>, <span class="built_in">this</span>.handleWsOpen.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">        ws.addEventListener(<span class="string">&#x27;close&#x27;</span>, <span class="built_in">this</span>.handleWsClose.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">        ws.addEventListener(<span class="string">&#x27;error&#x27;</span>, <span class="built_in">this</span>.handleWsError.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">        ws.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="built_in">this</span>.handleWsMessage.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sendMessage  = <span class="function">()=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> currentY = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear()</span><br><span class="line">        <span class="keyword">let</span> currentM = <span class="keyword">new</span> <span class="built_in">Date</span>().getMonth() + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> currentD = <span class="keyword">new</span> <span class="built_in">Date</span>().getDate()</span><br><span class="line">        <span class="keyword">let</span> currentH = <span class="keyword">new</span> <span class="built_in">Date</span>().getHours()</span><br><span class="line">        <span class="keyword">let</span> currentMin = <span class="keyword">new</span> <span class="built_in">Date</span>().getMinutes()</span><br><span class="line">        <span class="keyword">let</span> currentS = <span class="keyword">new</span> <span class="built_in">Date</span>().getSeconds()</span><br><span class="line">        <span class="keyword">if</span> (currentM &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          currentM = <span class="string">`0<span class="subst">$&#123;currentM&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentD &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          currentD = <span class="string">`0<span class="subst">$&#123;currentD&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentH &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          currentH = <span class="string">`0<span class="subst">$&#123;currentH&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentMin &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          currentMin = <span class="string">`0<span class="subst">$&#123;currentMin&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentS &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          currentS = <span class="string">`0<span class="subst">$&#123;currentS&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> date = <span class="string">`<span class="subst">$&#123;currentY&#125;</span>-<span class="subst">$&#123;currentM&#125;</span>-<span class="subst">$&#123;currentD&#125;</span> <span class="subst">$&#123;currentH&#125;</span>:<span class="subst">$&#123;currentMin&#125;</span>:<span class="subst">$&#123;currentS&#125;</span>`</span></span><br><span class="line">        <span class="keyword">const</span> name = <span class="string">&quot;客服&quot;</span></span><br><span class="line">        <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          msg: <span class="built_in">this</span>.state.msg,</span><br><span class="line">          name: name,</span><br><span class="line">            date: date,</span><br><span class="line">            left: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        ws.send(msg)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送完清空聊天框</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                msg:<span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      handleWsOpen () &#123;</span><br><span class="line">        message.success(<span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      handleWsClose () &#123;</span><br><span class="line">          message.info(<span class="string">&quot;聊天结束&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      handleWsError () &#123;</span><br><span class="line">       message.error(<span class="string">&quot;连接失败&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 收发消息</span></span><br><span class="line">    handleWsMessage (e) &#123;</span><br><span class="line">        <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.parse(e.data)</span><br><span class="line">        <span class="keyword">let</span> arr = <span class="built_in">this</span>.state.msgList</span><br><span class="line">        arr.push(msg)</span><br><span class="line">          <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">           msgList:arr</span><br><span class="line">       &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">const</span> msgList = <span class="built_in">this</span>.state.msgList</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Content</span><br><span class="line">                className=<span class="string">&quot;site-layout-background&quot;</span></span><br><span class="line">            &gt;</span><br><span class="line">                &lt;div className=<span class="string">&quot;chatBox&quot;</span>&gt;</span><br><span class="line">                    &lt;div className=<span class="string">&quot;chat&quot;</span>&gt;</span><br><span class="line">                        &#123;<span class="comment">/* 展示消息 */</span>&#125;</span><br><span class="line">                        &lt;div className=<span class="string">&quot;chat-info&quot;</span>&gt;</span><br><span class="line">                            &#123;msgList.map(<span class="function">(<span class="params">item, k</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span>   <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;info-detail&quot;</span>&gt;</span></span></span><br><span class="line">                                &lt;div className=&#123;item.left?&#x27;head-a&#x27;:&#x27;head&#x27;&#125;&gt;</span><br><span class="line">                                &lt;span className=&#123;item.left?&#x27;name-a&#x27;:&#x27;name&#x27;&#125;&gt;&#123;item.name&#125;&lt;/span&gt;</span><br><span class="line">                                &lt;span&gt;&#123;item.date&#125;&lt;/span&gt;</span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                                &lt;div className=&#123;item.left?&#x27;info-main-a&#x27;:&#x27;info-main&#x27;&#125;&gt;</span><br><span class="line">                                  &lt;span&gt;&#123;item.msg&#125;&lt;/span&gt;</span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                            &#125;)</span><br><span class="line">                                </span><br><span class="line">                       &#125;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &#123;<span class="comment">/* 发送消息 */</span>&#125;</span><br><span class="line">                        &lt;div className=<span class="string">&quot;send-msg&quot;</span>&gt;</span><br><span class="line">                            &lt;Input value=&#123;<span class="built_in">this</span>.state.msg&#125; onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line">                                <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                                    msg:e.target.value</span><br><span class="line">                                &#125;)</span><br><span class="line">                            &#125;&#125; placeholder=<span class="string">&quot;请输入...&quot;</span></span><br><span class="line">                                style=&#123;&#123; <span class="attr">width</span>: <span class="string">&quot;350px&quot;</span>, <span class="attr">marginRight</span>: <span class="string">&quot;10px&quot;</span> &#125;&#125;</span><br><span class="line">                                onPressEnter=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                                    <span class="built_in">this</span>.sendMessage()</span><br><span class="line">                                &#125;&#125;</span><br><span class="line">                            &gt;</span><br><span class="line">                            &lt;/Input&gt;</span><br><span class="line">                            &lt;Button type=<span class="string">&quot;primary&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                                <span class="built_in">this</span>.sendMessage()</span><br><span class="line">                            &#125;&#125;&gt;</span><br><span class="line">                                发送</span><br><span class="line">                            &lt;/Button&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/Content &gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20210411103231936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg5MjA4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210411103231935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg5MjA4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>vue全部代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;chat&quot;</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;chat-box&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;chat-info&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;info-detail&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;(item,k) in msgList&quot;</span> :key=<span class="string">&quot;k&quot;</span>&gt;</span><br><span class="line">          &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item.left?&#x27;head&#x27;:&#x27;head-a&#x27;&quot;</span>&gt;</span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;name&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123;item.date&#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item.left?&#x27;info-main&#x27;:&#x27;info-main-a&#x27;&quot;</span>&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;item.msg&#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;chat-message&quot;</span>&gt;</span><br><span class="line">          &lt;el-input v-model=<span class="string">&quot;msg&quot;</span> placeholder=<span class="string">&quot;请输入内容&quot;</span> @keyup.enter.native=<span class="string">&quot;sendMessage&quot;</span> &gt;</span><br><span class="line">          &lt;el-button slot=<span class="string">&quot;append&quot;</span> type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;sendMessage&quot;</span> &gt;发送&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-input&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3002&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      msgList: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">//   绑定webSocket事件</span></span><br><span class="line">    ws.addEventListener(<span class="string">&#x27;open&#x27;</span>, <span class="built_in">this</span>.handleWsOpen.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">    ws.addEventListener(<span class="string">&#x27;close&#x27;</span>, <span class="built_in">this</span>.handleWsClose.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">    ws.addEventListener(<span class="string">&#x27;error&#x27;</span>, <span class="built_in">this</span>.handleWsError.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">    ws.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="built_in">this</span>.handleWsMessage.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendMessage () &#123;</span><br><span class="line">      <span class="keyword">const</span> currentY = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear()</span><br><span class="line">      <span class="keyword">let</span> currentM = <span class="keyword">new</span> <span class="built_in">Date</span>().getMonth() + <span class="number">1</span></span><br><span class="line">      <span class="keyword">let</span> currentD = <span class="keyword">new</span> <span class="built_in">Date</span>().getDate()</span><br><span class="line">      <span class="keyword">let</span> currentH = <span class="keyword">new</span> <span class="built_in">Date</span>().getHours()</span><br><span class="line">      <span class="keyword">let</span> currentMin = <span class="keyword">new</span> <span class="built_in">Date</span>().getMinutes()</span><br><span class="line">      <span class="keyword">let</span> currentS = <span class="keyword">new</span> <span class="built_in">Date</span>().getSeconds()</span><br><span class="line">      <span class="keyword">if</span> (currentM &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentM = <span class="string">`0<span class="subst">$&#123;currentM&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentD &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentD = <span class="string">`0<span class="subst">$&#123;currentD&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentH &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentH = <span class="string">`0<span class="subst">$&#123;currentH&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentMin &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentMin = <span class="string">`0<span class="subst">$&#123;currentMin&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentS &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        currentS = <span class="string">`0<span class="subst">$&#123;currentS&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> date = <span class="string">`<span class="subst">$&#123;currentY&#125;</span>-<span class="subst">$&#123;currentM&#125;</span>-<span class="subst">$&#123;currentD&#125;</span> <span class="subst">$&#123;currentH&#125;</span>:<span class="subst">$&#123;currentMin&#125;</span>:<span class="subst">$&#123;currentS&#125;</span>`</span></span><br><span class="line">      <span class="keyword">const</span> name = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;nickname&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        msg: <span class="built_in">this</span>.msg,</span><br><span class="line">        name: name,</span><br><span class="line">        date: date,</span><br><span class="line">        left: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      ws.send(msg)</span><br><span class="line">      <span class="comment">// 发送完清空聊天框</span></span><br><span class="line">      <span class="built_in">this</span>.msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleWsOpen () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;聊天已经启动！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleWsClose () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;聊天已经关闭！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleWsError () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;聊天出错！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 收发消息</span></span><br><span class="line">    handleWsMessage (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e)</span><br><span class="line">      <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.parse(e.data)</span><br><span class="line">      <span class="built_in">this</span>.msgList.push(msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;less&quot;</span> scoped&gt;</span><br><span class="line">.chat &#123;</span><br><span class="line">padding: 100px 300px <span class="number">0</span> 300px;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">.chat-box&#123;</span><br><span class="line">margin-top: 20px;</span><br><span class="line">padding: 10px 10px 10px 10px;</span><br><span class="line">width: 400px;</span><br><span class="line">height: 600px;</span><br><span class="line">background-color: #fff;</span><br><span class="line">border-radius: 10px 10px <span class="number">0</span> <span class="number">0</span> ;</span><br><span class="line">.chat-info&#123;</span><br><span class="line">  height: 550px;</span><br><span class="line">  overflow: auto;</span><br><span class="line">  .info-detail&#123;</span><br><span class="line">  margin-bottom: 5px;</span><br><span class="line">  .head&#123;</span><br><span class="line">   width: <span class="number">100</span>%;</span><br><span class="line">   margin-bottom: 5px;</span><br><span class="line">   display:flex;</span><br><span class="line">   flex-direction: row-reverse;</span><br><span class="line">    .name&#123;</span><br><span class="line">      margin-left: 5px;</span><br><span class="line">      color: rgb(<span class="number">240</span>, <span class="number">74</span>, <span class="number">74</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .head-a&#123;</span><br><span class="line">   width: <span class="number">100</span>%;</span><br><span class="line">   margin-bottom: 5px;</span><br><span class="line">    .name&#123;</span><br><span class="line">      margin-right: 5px;</span><br><span class="line">      color: rgb(<span class="number">22</span>, <span class="number">189</span>, <span class="number">240</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .info-main-a&#123;</span><br><span class="line">     font-size: 18px;</span><br><span class="line">    font-family: 楷体;</span><br><span class="line">  &#125;</span><br><span class="line">  .info-main&#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-family: 楷体;</span><br><span class="line">    display:flex;</span><br><span class="line">    flex-direction: row-reverse;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.chat-message&#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>express</tag>
        <tag>webSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>聊天框自动定位到最底部</title>
    <url>/myBlog/2021/04/12/2021-04-12-%E8%81%8A%E5%A4%A9%E6%A1%86%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%BD%8D%E5%88%B0%E6%9C%80%E5%BA%95%E9%83%A8/</url>
    <content><![CDATA[<h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>最近通过webSocket实现了客服聊天的功能，但是当消息超出聊天框的时候，消息框并不会自动滚到到最新消息的地方。要手动滚动，很蠢。</p>
<p>而且一开始的滚动条很丑，顺便美化了一下滚动条。</p>
<p><strong>vue中写在updated的生命周期里/react写在componentDidUpdate生命周期里</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">updated () &#123;</span><br><span class="line">    <span class="comment">// 聊天定位到底部</span></span><br><span class="line">    <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> msg = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;chat-info&#x27;</span>) <span class="comment">// 获取对象</span></span><br><span class="line">      msg[<span class="number">0</span>].scrollTop = msg[<span class="number">0</span>].scrollHeight <span class="comment">// 滚动高度</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  // display: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">239</span>, <span class="number">239</span>, <span class="number">239</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  background: <span class="number">#bfbfbf</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript排序算法01</title>
    <url>/myBlog/2021/04/15/2021-04-15-javascript%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9501/</url>
    <content><![CDATA[<h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>两两对比，如果n项大于n+1项，就交换位置。</p>
<p><strong>基本的</strong></p>
<p><code>forEach</code>执行就是所有循环结束，不能<code>break</code>。<code>map</code>同理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">90</span>, <span class="number">33</span>, <span class="number">23</span>, <span class="number">43</span>, <span class="number">54</span>, <span class="number">123</span>, <span class="number">78</span>, <span class="number">56</span>, <span class="number">76</span>, <span class="number">112</span>]</span><br><span class="line"><span class="comment">// const arr = [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line"><span class="comment">//基本</span></span><br><span class="line"> arr.forEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     arr.forEach(<span class="function">(<span class="params">k, i</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> count = arr[i + <span class="number">1</span>]</span><br><span class="line">         <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">             arr[i + <span class="number">1</span>] = arr[i]</span><br><span class="line">             arr[i] = count</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 23, 33, 43,  54,  56, 76, 78, 90, 112, 123 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>优化版</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优化</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">90</span>, <span class="number">33</span>, <span class="number">23</span>, <span class="number">43</span>, <span class="number">54</span>, <span class="number">123</span>, <span class="number">78</span>, <span class="number">56</span>, <span class="number">76</span>, <span class="number">112</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        a++</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 23, 33, 43,  54,  56, 76, 78, 90, 112, 123 ]</span></span><br></pre></td></tr></table></figure>
<h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><p>每次排序把最大的或者最小的放到开头或者末尾</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">90</span>, <span class="number">33</span>, <span class="number">23</span>, <span class="number">43</span>, <span class="number">54</span>, <span class="number">123</span>, <span class="number">78</span>, <span class="number">56</span>, <span class="number">76</span>, <span class="number">112</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex, temp</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 保存当前下标</span></span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="comment">// 找到最小的数的下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每次找出的最小数和当前的数交换位置</span></span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">selectSort(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 23, 33, 43,  54,  56, 76, 78, 90, 112, 123 ]</span></span><br></pre></td></tr></table></figure>
<h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><p>从第二个数开始，如果当前数大于或者小于前一个数，就交换位置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">90</span>, <span class="number">33</span>, <span class="number">23</span>, <span class="number">43</span>, <span class="number">54</span>, <span class="number">123</span>, <span class="number">78</span>, <span class="number">56</span>, <span class="number">76</span>, <span class="number">112</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//key为当前数</span></span><br><span class="line">        <span class="keyword">var</span> key = arr[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// j为前一个数的下标</span></span><br><span class="line">        <span class="keyword">var</span> j = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果前一个数大于当前数</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">            <span class="comment">//当前数等于前一个数</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//j减一</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//满足条件的最前面的数等于当前数</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insertSort(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 23, 33, 43,  54,  56, 76, 78, 90, 112, 123 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>递归实现多层评论</title>
    <url>/myBlog/2021/04/19/2021-04-19-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%B1%82%E8%AF%84%E8%AE%BA/</url>
    <content><![CDATA[<h5 id="多层评论递归嵌套"><a href="#多层评论递归嵌套" class="headerlink" title="多层评论递归嵌套"></a>多层评论递归嵌套</h5><p>递归函数两部曲 1：找规律 2：找出口</p>
<p> <strong>数据格式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = [</span><br><span class="line">    &#123;</span><br><span class="line">        commentId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">        commentIdList: <span class="literal">null</span>,</span><br><span class="line">        commentReplyId: <span class="string">&quot;c800325e-e123-4ac3-81cf-a24c8ba54d5f&quot;</span>,</span><br><span class="line">        replyId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">        replyImg: <span class="literal">null</span>,</span><br><span class="line">        replyMsg: <span class="string">&quot;哦看看&quot;</span>,</span><br><span class="line">        replyTargetUserId: <span class="literal">null</span>,</span><br><span class="line">        replyTargetUserName: <span class="literal">null</span>,</span><br><span class="line">        replyTime: <span class="string">&quot;2021.04.15 17:02:26&quot;</span>,</span><br><span class="line">        replyUserAvatar: <span class="string">&quot;https://app-cdn.starcharge.com/32360E48-6011-47CA-99BE-171AD0B555AC-iOS.jpg&quot;</span>,</span><br><span class="line">        replyUserId: <span class="string">&quot;6266ff37-29fb-46fe-b8a3-76e1b5da75dc&quot;</span>,</span><br><span class="line">        replyUserName: <span class="string">&quot;03591的昵称真的很长哦看❤️这里&quot;</span>,</span><br><span class="line">        replyUserType: <span class="literal">null</span>,</span><br><span class="line">        childCommentReplyBo: [</span><br><span class="line">            &#123;</span><br><span class="line">                commentId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">                commentIdList: <span class="literal">null</span>,</span><br><span class="line">                commentReplyId: <span class="string">&quot;c800325e-e123-4ac3-81cf-a24c8ba54d5f&quot;</span>,</span><br><span class="line">                replyId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">                replyImg: <span class="literal">null</span>,</span><br><span class="line">                replyMsg: <span class="string">&quot;哦看看&quot;</span>,</span><br><span class="line">                replyTargetUserId: <span class="literal">null</span>,</span><br><span class="line">                replyTargetUserName: <span class="literal">null</span>,</span><br><span class="line">                replyTime: <span class="string">&quot;2021.04.15 17:02:26&quot;</span>,</span><br><span class="line">                replyUserAvatar: <span class="string">&quot;https://app-cdn.starcharge.com/32360E48-6011-47CA-99BE-171AD0B555AC-iOS.jpg&quot;</span>,</span><br><span class="line">                replyUserId: <span class="string">&quot;6266ff37-29fb-46fe-b8a3-76e1b5da75dc&quot;</span>,</span><br><span class="line">                replyUserName: <span class="string">&quot;03591的昵称真的很长哦看❤️这里&quot;</span>,</span><br><span class="line">                replyUserType: <span class="literal">null</span>,</span><br><span class="line">                childCommentReplyBo: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        commentId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">                        commentIdList: <span class="literal">null</span>,</span><br><span class="line">                        commentReplyId: <span class="string">&quot;c800325e-e123-4ac3-81cf-a24c8ba54d5f&quot;</span>,</span><br><span class="line">                        replyId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">                        replyImg: <span class="literal">null</span>,</span><br><span class="line">                        replyMsg: <span class="string">&quot;哦看看&quot;</span>,</span><br><span class="line">                        replyTargetUserId: <span class="literal">null</span>,</span><br><span class="line">                        replyTargetUserName: <span class="literal">null</span>,</span><br><span class="line">                        replyTime: <span class="string">&quot;2021.04.15 17:02:26&quot;</span>,</span><br><span class="line">                        replyUserAvatar: <span class="string">&quot;https://app-cdn.starcharge.com/32360E48-6011-47CA-99BE-171AD0B555AC-iOS.jpg&quot;</span>,</span><br><span class="line">                        replyUserId: <span class="string">&quot;6266ff37-29fb-46fe-b8a3-76e1b5da75dc&quot;</span>,</span><br><span class="line">                        replyUserName: <span class="string">&quot;03591的昵称真的很长哦看❤️这里&quot;</span>,</span><br><span class="line">                        replyUserType: <span class="literal">null</span>,</span><br><span class="line">                        childCommentReplyBo: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        commentId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">                        commentIdList: <span class="literal">null</span>,</span><br><span class="line">                        commentReplyId: <span class="string">&quot;c800325e-e123-4ac3-81cf-a24c8ba54d5f&quot;</span>,</span><br><span class="line">                        replyId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">                        replyImg: <span class="literal">null</span>,</span><br><span class="line">                        replyMsg: <span class="string">&quot;哦看看&quot;</span>,</span><br><span class="line">                        replyTargetUserId: <span class="literal">null</span>,</span><br><span class="line">                        replyTargetUserName: <span class="literal">null</span>,</span><br><span class="line">                        replyTime: <span class="string">&quot;2021.04.15 17:02:26&quot;</span>,</span><br><span class="line">                        replyUserAvatar: <span class="string">&quot;https://app-cdn.starcharge.com/32360E48-6011-47CA-99BE-171AD0B555AC-iOS.jpg&quot;</span>,</span><br><span class="line">                        replyUserId: <span class="string">&quot;6266ff37-29fb-46fe-b8a3-76e1b5da75dc&quot;</span>,</span><br><span class="line">                        replyUserName: <span class="string">&quot;03591的昵称真的很长哦看❤️这里&quot;</span>,</span><br><span class="line">                        replyUserType: <span class="literal">null</span>,</span><br><span class="line">                        childCommentReplyBo: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                commentId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">                                commentIdList: <span class="literal">null</span>,</span><br><span class="line">                                commentReplyId: <span class="string">&quot;c800325e-e123-4ac3-81cf-a24c8ba54d5f&quot;</span>,</span><br><span class="line">                                replyId: <span class="string">&quot;6cfc5ff4-2af1-4621-bc52-b3d6ff22973c&quot;</span>,</span><br><span class="line">                                replyImg: <span class="literal">null</span>,</span><br><span class="line">                                replyMsg: <span class="string">&quot;哦看看&quot;</span>,</span><br><span class="line">                                replyTargetUserId: <span class="literal">null</span>,</span><br><span class="line">                                replyTargetUserName: <span class="literal">null</span>,</span><br><span class="line">                                replyTime: <span class="string">&quot;2021.04.15 17:02:26&quot;</span>,</span><br><span class="line">                                replyUserAvatar: <span class="string">&quot;https://app-cdn.starcharge.com/32360E48-6011-47CA-99BE-171AD0B555AC-iOS.jpg&quot;</span>,</span><br><span class="line">                                replyUserId: <span class="string">&quot;6266ff37-29fb-46fe-b8a3-76e1b5da75dc&quot;</span>,</span><br><span class="line">                                replyUserName: <span class="string">&quot;03591的昵称真的很长哦看❤️这里&quot;</span>,</span><br><span class="line">                                replyUserType: <span class="literal">null</span>,</span><br><span class="line">                                childCommentReplyBo: []</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   评论递归</span></span><br><span class="line">  repleyRecursion = <span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; replyArr &#125; = <span class="built_in">this</span>.state</span><br><span class="line">      <span class="keyword">if</span> (k.length !== <span class="number">0</span>) &#123;</span><br><span class="line">          k.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">              replyArr.push(<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &quot;<span class="attr">700px</span>&quot;, <span class="attr">display:</span> &quot;<span class="attr">flex</span>&quot;, <span class="attr">justifyContent:</span> &quot;<span class="attr">space-between</span>&quot;, <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot;, <span class="attr">marginBottom:</span> &quot;<span class="attr">10px</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户账号：&#123;item.replyUserName&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>回复时间: &#123;item.replyTime&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>回复内容：&#123;item.replyMsg&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">                  &lt;div&gt;</span><br><span class="line">                      &lt;Button type=&quot;primary&quot; onClick=&#123;() =&gt; &#123;</span><br><span class="line">                          this.setState(&#123;</span><br><span class="line">                              replyVisible: true,</span><br><span class="line">                              commentId: item.commentReplyId,</span><br><span class="line">                              userId: item.replyUserId</span><br><span class="line">                          &#125;)</span><br><span class="line">                      &#125;&#125;&gt;回复&lt;/Button&gt;</span><br><span class="line">                      &lt;Popconfirm</span><br><span class="line">                          title=&quot;确认删除评论吗？&quot;</span><br><span class="line">                          onConfirm=&#123;() =&gt; &#123;</span><br><span class="line">                              this.deleteReply(item.commentId)</span><br><span class="line">                          &#125;&#125;</span><br><span class="line">                          onCancel=&#123;&quot;&quot;&#125;</span><br><span class="line">                          okText=&quot;确定&quot;</span><br><span class="line">                          cancelText=&quot;取消&quot;</span><br><span class="line">                      &gt;</span><br><span class="line">                          &lt;Button type=&quot;primary&quot;&gt;删除&lt;/Button&gt;</span><br><span class="line">                      &lt;/Popconfirm&gt;</span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">              <span class="built_in">this</span>.repleyRecursion(item.childCommentReplyBo)</span><br><span class="line"></span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> replyArr.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> item</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>-javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>把多层嵌套的一层数据结构转换成原本的多层</title>
    <url>/myBlog/2021/04/20/2021-04-20-%E6%8A%8A%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E7%9A%84%E4%B8%80%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8E%9F%E6%9C%AC%E7%9A%84%E5%A4%9A%E5%B1%82/</url>
    <content><![CDATA[<h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>一个多层嵌套评论回复的场景，但是孤儿后端，把所有的回复数据，放到一个数组里返回给我，只有一层，我要给数据转换成原先的多层嵌套的模式。</p>
<p>数据结构如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//commitId是最外层的评论ID</span></span><br><span class="line"><span class="comment">//id是每条回复自己的ID</span></span><br><span class="line"><span class="comment">//replyId是回复父级的Id</span></span><br><span class="line"><span class="comment">//现在要把每个子级回复放到父级回复的child里面</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">        commentId: <span class="string">&quot;5786ea2a-7921-4d2e-bb1e-fc8ddb69d2b4&quot;</span>,</span><br><span class="line">        id: <span class="string">&quot;da642ba6-52b2-4965-bf39-c21f8f2ceaf0&quot;</span>,</span><br><span class="line">        replyId: <span class="string">&quot;fb0a7604-68cb-45c7-b149-99dceb5a6004&quot;</span>,</span><br><span class="line">        replyMsg: <span class="string">&quot;1-1-1&quot;</span>,</span><br><span class="line">        child: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        commentId: <span class="string">&quot;5786ea2a-7921-4d2e-bb1e-fc8ddb69d2b4&quot;</span>,</span><br><span class="line">        id: <span class="string">&quot;e5def846-c747-496b-9ab8-270655bc269b&quot;</span>,</span><br><span class="line">        replyId: <span class="string">&quot;a583dd34-ff71-44dd-9eaa-5b753501b9a6&quot;</span>,</span><br><span class="line">        replyMsg: <span class="string">&quot;2-1&quot;</span>,</span><br><span class="line">        child: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        commentId: <span class="string">&quot;5786ea2a-7921-4d2e-bb1e-fc8ddb69d2b4&quot;</span>,</span><br><span class="line">        id: <span class="string">&quot;a583dd34-ff71-44dd-9eaa-5b753501b9a6&quot;</span>,</span><br><span class="line">        replyId: <span class="string">&quot;5786ea2a-7921-4d2e-bb1e-fc8ddb69d2b4&quot;</span>,</span><br><span class="line">        replyMsg: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        child: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        commentId: <span class="string">&quot;5786ea2a-7921-4d2e-bb1e-fc8ddb69d2b4&quot;</span>,</span><br><span class="line">        id: <span class="string">&quot;9de4bb96-16e5-4570-b03f-60ac2beb8965&quot;</span>,</span><br><span class="line">        replyId: <span class="string">&quot;f7788b92-66cf-4463-ac44-5da0fcd95aa0&quot;</span>,</span><br><span class="line">        replyMsg: <span class="string">&quot;1-2&quot;</span>,</span><br><span class="line">        child: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        commentId: <span class="string">&quot;5786ea2a-7921-4d2e-bb1e-fc8ddb69d2b4&quot;</span>,</span><br><span class="line">        id: <span class="string">&quot;fb0a7604-68cb-45c7-b149-99dceb5a6004&quot;</span>,</span><br><span class="line">        replyId: <span class="string">&quot;f7788b92-66cf-4463-ac44-5da0fcd95aa0&quot;</span>,</span><br><span class="line">        replyMsg: <span class="string">&quot;1-1&quot;</span>,</span><br><span class="line">        child: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        commentId: <span class="string">&quot;5786ea2a-7921-4d2e-bb1e-fc8ddb69d2b4&quot;</span>,</span><br><span class="line">        id: <span class="string">&quot;f7788b92-66cf-4463-ac44-5da0fcd95aa0&quot;</span>,</span><br><span class="line">        replyId: <span class="string">&quot;5786ea2a-7921-4d2e-bb1e-fc8ddb69d2b4&quot;</span>,</span><br><span class="line">        replyMsg: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        child: []</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>看到这个场景，第一时间想到的就是递归。</p>
<p>但是逻辑想了很久才想出来。</p>
<p>其实很简单，想不通，想死了都想不出来。</p>
<p>想通了就很简单。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dg</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;data.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(data[i].replyId === id)&#123;</span><br><span class="line">            arr.push(data[i])</span><br><span class="line">            data[i].child = dg(data[i].id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>如下</strong></p>
<p><img src="https://z3.ax1x.com/2021/04/20/cH8eZq.png" alt="cH8eZq.png"></p>
<p><strong>tips:今天是她的生日，我什么都没干，太棒了！</strong></p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>杂记07(再见我的学生时代)</title>
    <url>/myBlog/2021/06/10/2021-06-10-%E6%9D%82%E8%AE%B007(%E5%86%8D%E8%A7%81%E6%88%91%E7%9A%84%E5%AD%A6%E7%94%9F%E6%97%B6%E4%BB%A3)/</url>
    <content><![CDATA[<h5 id="和学生的身份说再见"><a href="#和学生的身份说再见" class="headerlink" title="和学生的身份说再见"></a>和学生的身份说再见</h5><p>时间真的过的很快</p>
<p>曾经遥遥无期的毕业</p>
<p>也来到了眼前</p>
<p>这次的毕业也真正的要与学生的身份说再见了</p>
<p>以前总是想尽快的告别学生的身份</p>
<p>走进社会干一番大事业</p>
<p>当这个时间点真实的到达眼前</p>
<p>却想着时间你能不能再慢一点</p>
<p>小学、初中、高中以往的毕业总是离别中带着一丝轻松愉快的</p>
<p>考完试，就是漫长的假期，不紧不慢</p>
<p>有大把的时间能让我们去迎接下一阶段的生活</p>
<p>大学毕业却是紧迫的</p>
<p>实习的我，半只脚已经踏入社会</p>
<p>请假答辩交材料</p>
<p>聚会、离别</p>
<p>租房、搬家</p>
<p>在一天天的忙碌中</p>
<p>我离开了校园</p>
<p>自由却又束缚</p>
<p>不像我想的那样美好</p>
<p>租房确实给了自己一方天地</p>
<p>我养了猫</p>
<p>名字叫   拾月</p>
<p>是个橘猫妹妹</p>
<p>这个小家伙</p>
<p>给我的生活带来了很多的惊喜</p>
<p>同时也很闹心</p>
<p>就和养一个孩子一样</p>
<p>我不是一个很乐观的人</p>
<p>但总是会在悲观的情绪中给自己一点暗示</p>
<p>会好起来的</p>
<p>最后</p>
<p>再见我的学生时代</p>
<p>（睡觉的拾月）</p>
<p><img src="https://z3.ax1x.com/2021/06/10/2g75SH.jpg" alt="2g75SH.jpg"></p>
]]></content>
      <tags>
        <tag>随感</tag>
      </tags>
  </entry>
  <entry>
    <title>菊次郎的夏天观后感</title>
    <url>/myBlog/2021/06/12/2021-06-12-%E8%8F%8A%E6%AC%A1%E9%83%8E%E7%9A%84%E5%A4%8F%E5%A4%A9%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<h5 id="《菊次郎的夏天》观后感"><a href="#《菊次郎的夏天》观后感" class="headerlink" title="《菊次郎的夏天》观后感"></a>《菊次郎的夏天》观后感</h5><h6 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h6><p>《菊次郎的夏天》这部电影评分很高</p>
<p>久石让给电影配乐</p>
<p>就算你不知道这部电影</p>
<p>也应该听过</p>
<p>让人很舒服的曲子</p>
<p>剧中大叔菊次郎帮正太找妈妈</p>
<p>结果正太的妈妈有了新的家庭</p>
<p>”地方对了，人不对“</p>
<p>欢笑中见温情</p>
<p>剧中他们遇到的人都很温柔</p>
<p>小情侣、摩托二人组、吟游诗人</p>
<p>其实这个电影就是说大叔菊次郎小时候的故事</p>
<p>熟悉的音乐开始</p>
<p>熟悉的音乐结束</p>
<p>只是片尾的音乐多了一丝轻快与愉悦</p>
<p>温馨的音乐，</p>
<p>像夏天傍晚微凉的风迎面吹来，看着大海</p>
<p>这样的音乐</p>
<p>却不经意就让人湿了眼眶</p>
<h6 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h6><p>其实很怀念剧中的夏天</p>
<p>谁的童年不曾有过那样的一个类似的暑假呢</p>
<p>只是现在就算回到了童年的场景</p>
<p>也不有当时的人了</p>
<p>那时的景那时的人</p>
<p>停留在那时空了</p>
<h6 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h6><p>最近很闲</p>
<p>有个十天左右的时间</p>
<p>不用上班</p>
<p>很闲</p>
<p>九十点就睡觉，五六点就起床</p>
<p>睡得早、起的早</p>
<p>像个老年人</p>
<p>想想人生的前几个阶段</p>
<p>我好像不是一个善于维护关系的人</p>
<p>每一个阶段看起来都和身边的人玩的很好</p>
<p>当那个阶段结束</p>
<p>就从来不联系了</p>
<p>仿佛这个人没有在我的生命中出现过一样</p>
<p>我总以为</p>
<p>该在的人，总会一直在那的</p>
<p>无需联系</p>
<p>需要联系我也不知道联系什么</p>
<p>我本是一个无趣的人</p>
<p>生活中见不起什么波澜</p>
<p>也没有什么分享欲</p>
<p>按理说我应该很合适一个人的</p>
<p>但是我有希望时不时能有个人陪我一起去干点什么</p>
<p>其实每个人身边都应该有一两个好朋友的</p>
<p>可我没有</p>
<p>按理说我其实也不差</p>
<p>做事情从来不会想太多</p>
<p>直言直语</p>
<p>可为什么有人背后说我有心机太重</p>
<p>很莫名其妙</p>
]]></content>
      <tags>
        <tag>观后感</tag>
      </tags>
  </entry>
  <entry>
    <title>星球空间站项目总结</title>
    <url>/myBlog/2021/06/30/2021-06-30-%E6%98%9F%E7%90%83%E7%A9%BA%E9%97%B4%E7%AB%99%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h5 id="“星球空间站”项目总结"><a href="#“星球空间站”项目总结" class="headerlink" title="“星球空间站”项目总结"></a>“星球空间站”项目总结</h5><p>星球空间站是OMS项目的3.0版本，入职以来，都是在老项目中写页面，上一个项目组中的新项目《重卡换电》场站管理系统，做到80%,就被调走了，不过也只是写写页面，项目都是健哥搭的<code>umijs</code></p>
<p>星球空间站算是第一个全部由我开发的项目。虽然只算是OMS的一个导航页面。不过对于我来说，也是很好的锻炼了。</p>
<p>今天把遇到的一些知识点记录一下。</p>
<p>最终图差不多如下。</p>
<p><img src="https://z3.ax1x.com/2021/06/30/RDFBzd.png" alt="RDFBzd.png"></p>
<p><strong>如下</strong></p>
<p><strong>1、</strong>首页有三个echarts图表，一个曲线折线图。两个环形图。</p>
<p>​     这个比较简单一些，因为之前有recat引用echarts的经验，所以官网找到相关的示例。</p>
<p>只是改样式比较麻烦。只能慢慢找配置项。</p>
<p>这里记录一下用到的配置项，里面详细的配置就不记录了。</p>
<p><strong>配置项的地址如下</strong></p>
<p><code>https://echarts.apache.org/zh/option.html</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">legend 图例。</span><br><span class="line">dataZoom 用于区域缩放，就是图表可以放大缩小，左右滑动</span><br><span class="line">tooltip提示框。 鼠标移到表格上可以提示数据</span><br><span class="line">series系列列表。每个系列通过 type 决定自己的图表类型，放数据以及数据怎么展示的地方</span><br><span class="line">xAxis 直角坐标轴  x轴</span><br><span class="line">yAxis 直角坐标轴  y轴  </span><br><span class="line">等等</span><br></pre></td></tr></table></figure>


<p>然后还有的就是。echarts的加载、数据动态绑定等，大小随窗口变化等要注意的地方</p>
<hr>
<p><strong>2、</strong>下面导航按钮图标使用iconfont</p>
<p>之前使用iconfont都是下载的png图片，这里要用代码引入</p>
<p>一开始使用的css引入发现图标没有颜色都是黑的，问了一下，要用symbol 方式引入，就是js方式：</p>
<p>1：我是先新建了一个iconfont的js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">import</span> &#123; Icon &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> IconFont = Icon.createFromIconfontCN(&#123;</span><br><span class="line"> </span><br><span class="line">  scriptUrl: <span class="string">&#x27;symbol方式在线地址&#x27;</span></span><br><span class="line"> </span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> IconFont;</span><br></pre></td></tr></table></figure>
<p>2：使用，type就是图标的名</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">IconFont</span> <span class="attr">type</span>=<span class="string">&quot;icon-ali-pay&quot;</span> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123; <span class="name">fontSize:</span> <span class="string">&#x27;16px&#x27;</span>, color: <span class="string">&#x27;lightblue&#x27;</span> &#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>3、</strong>日历组件</p>
<p>最烦的就是这个花了我大量的时间，本来想使用ant的现成组件，可是不会复写样式，而且也麻烦，心一横手写吧。</p>
<p>因为之前在小程序中写过，获取到当月的天数，然后通过第一天是星期几，来判断上月显示几天，下月显示几天。我这里第一天是兴趣一，要是上个月最后一天是星期天就不用显示了。是星期一的话就显示最后一天，星期二最后2天以此类推。下个月就是下个月第一天是星期一就不用显示。星期天就显示下个月第一天。星期二就显示下个月一二两天，依次类推。</p>
<p>然后三个数组拼成一个数组用<code>arr.concat()</code>连接数组。</p>
<p>又因为日期要可以点击，样式产生变化，而且可以获取到当前日期，</p>
<p>日期数组中，每一项的结构如下,</p>
<p>flag是判断当前哪个日期被选中了，初始化当天的flag为true</p>
<p>isActivity是判断当前日前有没有活动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">year:<span class="number">2021</span>,</span><br><span class="line">month：<span class="number">6</span>,</span><br><span class="line">day:<span class="number">30</span>,</span><br><span class="line">flag:<span class="literal">true</span>,</span><br><span class="line">isActivity:<span class="literal">true</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<p>然后就是点击上月日期和下月日期切换月份。</p>
<p>判断当前点击的日期月份。</p>
<p>select框也是和数据绑定，</p>
<p>需要考虑的就是<code>setState()</code>是异步的，需要在<code>setState()</code>的回调中，或者<code>setTimeout()</code>调用相关的方法,以及方法的传参等等。</p>
<p><strong>4、</strong>主要的就是这些，还有的就是路由传值、跳转，因为oms没有路由通过tabs页签切换页面的，吧tab的</p>
<p>key传过去等</p>
<p>父组件中跳转传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.history.push(&#123;</span><br><span class="line">    pathname:<span class="string">&quot;/index&quot;</span>,</span><br><span class="line">    name:<span class="string">&quot;xxx&quot;</span>,<span class="comment">//参数</span></span><br><span class="line">    age:<span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>子组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件通过props传给子组件</span></span><br><span class="line">&lt;Child history=&#123;<span class="built_in">this</span>.props.history&#125;/&gt;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">this</span>.props.history.push(&#123;</span><br><span class="line">    pathname:<span class="string">&quot;/index&quot;</span>,</span><br><span class="line">    name:<span class="string">&quot;xxx&quot;</span>,<span class="comment">//参数</span></span><br><span class="line">    age:<span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>接收在location：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.history.location.name</span><br><span class="line"><span class="built_in">this</span>.props.history.location.age</span><br></pre></td></tr></table></figure>
<p>还有就是moment.js计算两天某天相差多少天,倒计时</p>
<p><code>moment(endTime).diff(moment(startTime),&#39;day&#39;)</code> 天</p>
<p><code>moment(endTime).diff(moment(startTime),&#39;month&#39;)</code>月</p>
<p><code>moment(endTime).diff(moment(startTime),&#39;year&#39;)</code> 年</p>
<p>还有就是一些布局方面注意的东西。</p>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>表单添加多组规则</title>
    <url>/myBlog/2021/07/30/2021-07-30-%E8%A1%A8%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%A4%9A%E7%BB%84%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<p><strong>起因</strong></p>
<p>框架 react+ant3（老项目重构很难）</p>
<p>新版本一个需求原型如下：[<img src="https://z3.ax1x.com/2021/07/30/WX1q58.png" alt="WX1q58.png"></p>
<p>可以有多个规则，且规则之间时间需要连续。上一个结束时间的第二天要是下一个规则的开始时间。</p>
<p>如果第一个结束时间是 7 月 30 号,下个月的开始时间要是 7.31 号。依次类推。</p>
<p>还要可以批量设置。就是一次性设置多个。</p>
<p>首先肯定想到的是用数组 map,用的 form 表单。就新建一个数组<code>arr=[0]</code>,点击添加按钮的时候就再<code>push</code>一个 0，删除按钮就<code>arr.splice(index,1)</code>,index 是当前元素下标。但是<code>form.item</code>的依赖字段会重复。</p>
<p>然后只能自己用<code>datePicker、Input</code>还有框架封装好的获取企业 Id 的模糊查询的组件。</p>
<p>且有规则后再修改可以回显数据。</p>
<p>如下：</p>
<p>这是外层的 Modal:</p>
<p>因为批量多个参数逗号分隔。</p>
<p>初始化<code>indexOf</code>判断有没有逗号，是单个还是批量，单个的话就获取数据，且把获取到的数据通过 props 传到子组件当中。因为 render 是先 render。所以这里用个 flag。保证获取到的数据可以传到子组件。</p>
<p>再把需要的一些方法传到子组件当中。</p>
<p>子组件中，通过<code>onChange</code>获取到值放到一个对象中添加到数组里。</p>
<p>添加的时候获取到当前的结束时间。通过<code>moment().add(1,&#39;day&#39;)</code>当然这里要判断是不是数组中的第一个</p>
<p>还有就是对时间的判断。</p>
<p>因为时间的连续的删除只能删除最后一个。</p>
<p>基本完成了功能，但是感觉很冗余，还要修改，一些细节还要完善。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React,&#123;Component&#125; from &#39;react&#39;</span><br><span class="line">import &#123;  Form, Button, Input, message &#125; from &quot;antd&quot;</span><br><span class="line">import fetchHandler from &#39;@&#x2F;fetch&#x2F;fetchHandler&#39;</span><br><span class="line">import TrusteeshipForm from &#39;.&#x2F;TrusteeshipForm&#39;;</span><br><span class="line">import moment from &#39;moment&#39;;</span><br><span class="line">import &#123;settlementSetting,getSettlementSetting&#125; from &#39;@&#x2F;fetch&#x2F;fetchApi&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Trusteeship extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">      super(props)</span><br><span class="line">      this.props &#x3D; props</span><br><span class="line">      this.state &#x3D; &#123;</span><br><span class="line">          domArr : [],</span><br><span class="line">          stubId:this.props.stubId,</span><br><span class="line">          info:[],</span><br><span class="line">          flag:true</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">      this.getInfo()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> async getInfo () &#123;</span><br><span class="line">    if(this.props.stubId.indexOf(&#39;,&#39;)&gt;0) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        flag:false</span><br><span class="line">    &#125;)</span><br><span class="line">    await fetchHandler(getSettlementSetting,&#123;</span><br><span class="line">        stubId:this.props.stubId</span><br><span class="line">    &#125;).then( (res)&#x3D;&gt;&#123;</span><br><span class="line">        if(res&amp;&amp;res.code&#x3D;&#x3D;&#x3D;&#39;success&#39;) &#123;</span><br><span class="line">           const domArr &#x3D; []</span><br><span class="line">            res.data.map((item,index)&#x3D;&gt;&#123;</span><br><span class="line">                     let obj &#x3D; &#123;&#125;</span><br><span class="line">                     obj.unitPrice &#x3D; item.unitPrice</span><br><span class="line">                     obj.paymentCompanyId&#x3D;item.paymentCompanyId</span><br><span class="line">                     obj.startDate &#x3D; moment(item.startDate).format(&quot;YYYY-MM-DD&quot;)</span><br><span class="line">                     obj.endDate &#x3D; moment(item.endDate).format(&quot;YYYY-MM-DD&quot;)</span><br><span class="line">                     obj.companyName &#x3D; item.companyName</span><br><span class="line">                     domArr.push(obj)</span><br><span class="line">           &#125;)</span><br><span class="line">             this.setState(&#123;</span><br><span class="line">                 domArr,</span><br><span class="line">                 info:res.data,</span><br><span class="line">                 flag:true</span><br><span class="line">             &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onAdd &#x3D; (newArr)&#x3D;&gt;&#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            domArr:newArr</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  onDel &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">    const domArr &#x3D; this.state.domArr</span><br><span class="line">    domArr.splice(domArr.length-1,1)</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        domArr</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    判断对象是否存在空值</span><br><span class="line">   getDetaios(arr) &#123;</span><br><span class="line">    for (var i in arr) &#123;</span><br><span class="line">      if (arr[i] &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   onChange &#x3D; (obj)&#x3D;&gt;&#123;</span><br><span class="line">    this.props.form.setFieldsValue(&#123;</span><br><span class="line">        stubPeriodSetting: obj</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">onFinish &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class="line">    const domArr &#x3D; this.state.domArr</span><br><span class="line">    const isNull &#x3D; this.getDetaios(domArr[domArr.length-1])</span><br><span class="line">    console.log(domArr);</span><br><span class="line">    if(isNull) &#123;</span><br><span class="line">        message.warning(&quot;存在未填项或开始时间在结束时间之前，请检查&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    this.props.form.validateFields((err, values) &#x3D;&gt; &#123;</span><br><span class="line">        if (!err) &#123;</span><br><span class="line">            values.stubIds &#x3D; this.state.stubId</span><br><span class="line">            fetchHandler(settlementSetting,values ).then((res) &#x3D;&gt; &#123;</span><br><span class="line">                console.log(res);</span><br><span class="line">                if (res.code &#x3D;&#x3D;&#x3D; &quot;success&quot;) &#123;</span><br><span class="line">                    message.success(&quot;保存成功！&quot;)</span><br><span class="line">                    this.props.fresh()</span><br><span class="line">                    this.props.onCancel()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">setFlag  () &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        flag:true</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render () &#123;</span><br><span class="line">    const &#123;getFieldDecorator&#125; &#x3D; this.props.form</span><br><span class="line">    const &#123;domArr,flag,info&#125;  &#x3D; this.state</span><br><span class="line">    console.log(domArr);</span><br><span class="line">    console.log(info);</span><br><span class="line">    return (</span><br><span class="line">        &lt;Form</span><br><span class="line">        name&#x3D;&quot;basic&quot;</span><br><span class="line">        onSubmit&#x3D;&#123;this.onFinish&#125;</span><br><span class="line">    &gt;</span><br><span class="line">           &lt;h5&gt;收费规则&lt;&#x2F;h5&gt;</span><br><span class="line">        &#123;flag? &lt;div&gt;&lt;Form.Item label&#x3D;&quot;合同编号&quot;  style&#x3D;&#123;&#123; display:&quot;flex&quot; &#125;&#125; &gt;</span><br><span class="line">            &#123;getFieldDecorator(&#39;concatNo&#39;, &#123;</span><br><span class="line">                rules: [&#123; required: true, message: &#39;该项是必填项&#39; &#125;],</span><br><span class="line">                initialValue: (info.length!&#x3D;&#x3D;0)?info[0].concatNo:&quot;&quot;</span><br><span class="line">            &#125;)(</span><br><span class="line">                &lt;Input style&#x3D;&#123;&#123; &#39;width&#39;: &#39;300px&#39; &#125;&#125; placeholder&#x3D;&quot;请输入合同编号&quot; &#x2F;&gt;,</span><br><span class="line">            )&#125;</span><br><span class="line">        &lt;&#x2F;Form.Item&gt;</span><br><span class="line"></span><br><span class="line">         &lt;Form.Item&gt;</span><br><span class="line">         &#123;getFieldDecorator(&#39;stubPeriodSetting&#39;, &#123;</span><br><span class="line">                rules: [&#123; required: true, message: &#39;该项是必填项&#39;,type: &#39;array&#39; &#125;],</span><br><span class="line">                initialValue:  &quot;&quot;</span><br><span class="line">            &#125;)(</span><br><span class="line">                &lt;TrusteeshipForm</span><br><span class="line">                    setFlag&#x3D;&#123;()&#x3D;&gt;&#123;this.setFlag&#125;&#125;</span><br><span class="line">                    domArr&#x3D;&#123;domArr&#125;</span><br><span class="line">                    onAdd &#x3D; &#123;this.onAdd&#125;</span><br><span class="line">                    onDel&#x3D;&#123;this.onDel&#125;</span><br><span class="line">                    onChange&#x3D;&#123;this.onChange&#125; &#x2F;&gt;,</span><br><span class="line">            )&#125;</span><br><span class="line">        &lt;&#x2F;Form.Item&gt;&lt;&#x2F;div&gt;:&quot;&quot;&#125;</span><br><span class="line">            &lt;Form.Item style&#x3D;&#123;&#123;display: &quot;flex&quot;,justifyContent:&quot;center&quot;&#125;&#125;&gt;</span><br><span class="line">            &lt;Button type&#x3D;&quot;dashed&quot; htmlType&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">                保存</span><br><span class="line">            &lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;&#x2F;Form.Item&gt;</span><br><span class="line">    &lt;&#x2F;Form&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Trusteeship &#x3D; Form.create(&#123;&#125;)(Trusteeship)</span><br><span class="line"></span><br><span class="line">export default Trusteeship</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入react</span><br><span class="line">import React, &#123;</span><br><span class="line">    PureComponent</span><br><span class="line">&#125; from &#39;react&#39;;</span><br><span class="line">import &#123; Form, Button, Input, message,DatePicker &#125; from &quot;antd&quot;</span><br><span class="line">import fetchHandler from &#39;@&#x2F;fetch&#x2F;fetchHandler&#39;</span><br><span class="line">import &#123;companyList &#125; from &#39;@&#x2F;fetch&#x2F;fetchApi&#39;</span><br><span class="line">import AutoSearch from &#39;@&#x2F;components&#x2F;display&#x2F;input&#x2F;AutoSearch&#39;;</span><br><span class="line">import moment from &#39;moment&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TrusteeshipForm extends PureComponent &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.props &#x3D; props</span><br><span class="line">        this.state &#x3D; &#123;</span><br><span class="line">            domArr :this.props.domArr</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   style &#x3D; &#123;</span><br><span class="line">    display: &#39;flex&#39;,</span><br><span class="line">    alignItems:&quot;center&quot;,</span><br><span class="line">    marginBottom:&quot;20px&quot;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    判断对象是否存在空值</span><br><span class="line">   getDetaios(arr) &#123;</span><br><span class="line">    for (var i in arr) &#123;</span><br><span class="line">      if (arr[i] &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">componentDidMount () &#123;</span><br><span class="line">    this.props.onChange(this.state.domArr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   onAdd &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">       const &#123;domArr&#125; &#x3D; this.state</span><br><span class="line">       this.props.setFlag()</span><br><span class="line">       if(domArr.length&gt;&#x3D;10) &#123;</span><br><span class="line">        message.warning(&quot;最多添加10条！&quot;)</span><br><span class="line">        return</span><br><span class="line">       &#125;</span><br><span class="line">       if(this.getDetaios(domArr[domArr.length-1])) &#123;</span><br><span class="line">           message.warning(&quot;存在未填项或数据不正确，请检查！&quot;)</span><br><span class="line">           return</span><br><span class="line">       &#125;</span><br><span class="line">       let nextStartDate &#x3D; moment(new Date()).format(&quot;YYYY-MM-DD&quot;)</span><br><span class="line">       let nextEndDate &#x3D; moment(new Date()).add(7,&#39;day&#39;).format(&quot;YYYY-MM-DD&quot;)</span><br><span class="line">       if(domArr.length&gt;0) &#123;</span><br><span class="line">         nextStartDate &#x3D; moment(domArr[domArr.length-1].endDate).add(1,&#39;day&#39;).format(&quot;YYYY-MM-DD&quot;)</span><br><span class="line">         nextEndDate &#x3D; moment(nextStartDate).add(7,&#39;day&#39;).format(&quot;YYYY-MM-DD&quot;)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       const  obj &#x3D;&#123;</span><br><span class="line">        unitPrice:null,</span><br><span class="line">        paymentCompanyId:null,</span><br><span class="line">        startDate:nextStartDate,</span><br><span class="line">        endDate: nextEndDate,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       domArr.push(obj)</span><br><span class="line">           this.setState(&#123;</span><br><span class="line">               domArr,</span><br><span class="line">           &#125;,()&#x3D;&gt;&#123;</span><br><span class="line">               this.props.onAdd(domArr)</span><br><span class="line">           &#125;</span><br><span class="line">           )</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   startChange (startDate,index) &#123;</span><br><span class="line">    const domArr &#x3D; this.state.domArr</span><br><span class="line">    const time &#x3D; moment(startDate).diff(moment(domArr[index].endDate))</span><br><span class="line">    if(time&gt;0) &#123;</span><br><span class="line">        message.warning(&quot;开始时间必须在结束时间之前！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    domArr[index].startDate &#x3D; startDate</span><br><span class="line">       this.setState(&#123;</span><br><span class="line">        domArr</span><br><span class="line">       &#125;,()&#x3D;&gt;&#123;</span><br><span class="line">        const domArr &#x3D; this.state.domArr</span><br><span class="line">           this.props.onChange(domArr)</span><br><span class="line">           this.props.onAdd(domArr)</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   endChange (endDate,index) &#123;</span><br><span class="line">    const domArr &#x3D; this.state.domArr</span><br><span class="line">    let time</span><br><span class="line">    if( domArr[index+1]) &#123;</span><br><span class="line">        time &#x3D; moment(endDate).diff(moment(domArr[index+1].endDate))</span><br><span class="line">    &#125;</span><br><span class="line">    if(time&gt;0||time&#x3D;&#x3D;&#x3D;0) &#123;</span><br><span class="line">       domArr.forEach((item,i)&#x3D;&gt;&#123;</span><br><span class="line">           if(i&gt;index) &#123;</span><br><span class="line">               item.endDate &#x3D; null</span><br><span class="line">               item.startDate &#x3D; null</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    if(domArr[index+1]) &#123;</span><br><span class="line">        domArr[index+1].startDate &#x3D; moment(endDate).add(1,&#39;day&#39;).format(&quot;YYYY-MM-DD&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     domArr[index].endDate &#x3D; endDate</span><br><span class="line">       this.setState(&#123;</span><br><span class="line">        domArr</span><br><span class="line">       &#125;,()&#x3D;&gt;&#123;</span><br><span class="line">        const domArr &#x3D; this.state.domArr</span><br><span class="line">           this.props.onChange(domArr)</span><br><span class="line">           this.props.onAdd(domArr)</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   feeChange (fee,index) &#123;</span><br><span class="line">    const domArr &#x3D; this.state.domArr</span><br><span class="line">    domArr[index].unitPrice &#x3D; fee</span><br><span class="line">       this.setState(&#123;</span><br><span class="line">        domArr</span><br><span class="line">       &#125;,()&#x3D;&gt;&#123;</span><br><span class="line">        const domArr &#x3D; this.state.domArr</span><br><span class="line">           this.props.onChange(domArr)</span><br><span class="line">           this.props.onAdd(domArr)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   companyChange  (e,index) &#123;</span><br><span class="line">    const domArr &#x3D; this.state.domArr</span><br><span class="line">    domArr[index].paymentCompanyId &#x3D; e</span><br><span class="line">       this.setState(&#123;</span><br><span class="line">        domArr</span><br><span class="line">       &#125;,()&#x3D;&gt;&#123;</span><br><span class="line">        const domArr &#x3D; this.state.domArr</span><br><span class="line">           this.props.onChange(domArr)</span><br><span class="line">           this.props.onAdd(domArr)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123;domArr&#125; &#x3D; this.state</span><br><span class="line">        return &lt;div style&#x3D;&#123;&#123;width:&quot;552px&quot;&#125;&#125;&gt;</span><br><span class="line">           &#123;domArr&amp;&amp;domArr.map((item,index)&#x3D;&gt;&#123;</span><br><span class="line">               return &lt;div key&#x3D;&#123;index&#125;&gt;</span><br><span class="line">               &lt;div style&#x3D;&#123;this.style&#125;&gt;</span><br><span class="line">                    &lt;label&gt;&lt;span style&#x3D;&#123;&#123;color:&quot;red&quot;&#125;&#125;&gt;*&lt;&#x2F;span&gt; 时间周期：&lt;&#x2F;label&gt;</span><br><span class="line">                     &lt;DatePicker</span><br><span class="line">                        placeholder&#x3D;&quot;开始时间&quot;</span><br><span class="line">                        disabled&#x3D;&#123;index!&#x3D;&#x3D;0&#125;</span><br><span class="line">                        value &#x3D; &#123;moment(item.startDate,&quot;YYYY-MM-DD&quot;)&#125;</span><br><span class="line">                        onChange&#x3D;&#123;(e,date)&#x3D;&gt;&#123;</span><br><span class="line">                        this.startChange(date,index)</span><br><span class="line">                    &#125;&#125;&#x2F;&gt;</span><br><span class="line">                     &lt;span&gt;—&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;DatePicker</span><br><span class="line">                    placeholder&#x3D;&quot;结束时间&quot;</span><br><span class="line">                    defaultValue&#x3D;&#123;moment(item.endDate,&quot;YYYY-MM-DD&quot;)&#125;</span><br><span class="line">                    disabledDate&#x3D;&#123;(current)&#x3D;&gt; &#123;</span><br><span class="line">                         return current &amp;&amp; current &lt;moment(item.startDate)</span><br><span class="line">                       &#125;&#125;</span><br><span class="line">                    onChange&#x3D;&#123;(e,date)&#x3D;&gt;&#123;</span><br><span class="line">                        this.endChange(date,index)</span><br><span class="line">                    &#125;&#125; &#x2F;&gt;</span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line">               &lt;div style&#x3D;&#123;this.style&#125;&gt;</span><br><span class="line">                      &lt;label&gt;&lt;span style&#x3D;&#123;&#123;color:&quot;red&quot;&#125;&#125;&gt;*&lt;&#x2F;span&gt; 托管费用：&lt;&#x2F;label&gt;</span><br><span class="line">                      &lt;Input</span><br><span class="line">                       defaultValue&#x3D;&#123;item.unitPrice&#125;</span><br><span class="line">                       type&#x3D;&quot;number&quot;</span><br><span class="line">                       style&#x3D;&#123;&#123; &#39;width&#39;: &#39;300px&#39; &#125;&#125;</span><br><span class="line">                       onChange&#x3D;&#123;(e)&#x3D;&gt;&#123;</span><br><span class="line">                        this.feeChange(e.target.value,index)</span><br><span class="line">                       &#125;&#125;</span><br><span class="line">                       placeholder&#x3D;&quot;请输入托管费用&quot; addonAfter&#x3D;&quot;元&#x2F;年&quot; &#x2F;&gt;</span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line">               &lt;div style&#x3D;&#123;this.style&#125;&gt;</span><br><span class="line">                  &lt;label&gt;&lt;span style&#x3D;&#123;&#123;color:&quot;red&quot;&#125;&#125;&gt;*&lt;&#x2F;span&gt; 承担企业：&lt;&#x2F;label&gt;</span><br><span class="line">               &lt;AutoSearch</span><br><span class="line">                  key&#x3D;&#123;item.companyName||&#39;add&#39;&#125;</span><br><span class="line">                  placeholder&#x3D;&#39;请输入商户名称模糊搜索&#39;</span><br><span class="line">                  config&#x3D;&#123;&#123;</span><br><span class="line">                    allowClear: true,&#x2F;&#x2F;是否允许清除,</span><br><span class="line">                    showParam: &#39;companyName&#39;, &#x2F;&#x2F; 展示的条目参数</span><br><span class="line">                    choseParam: &#39;companyId&#39;, &#x2F;&#x2F; 选中的参数</span><br><span class="line">                    sourceApi: companyList, &#x2F;&#x2F; 选项接口</span><br><span class="line">                    initialValue: item.companyName,</span><br><span class="line">                    fetchParams:&#123;</span><br><span class="line">                      status:1</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;&#125;</span><br><span class="line">                  module&#x3D;&#39;company&#39;</span><br><span class="line">                  setValue&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">                    this.companyChange(e,index)</span><br><span class="line">                  &#125;&#125;</span><br><span class="line">                &#x2F;&gt;</span><br><span class="line">                 &lt;&#x2F;div&gt;</span><br><span class="line">                 &lt;hr&#x2F;&gt;</span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line">               &#125;) &#125;</span><br><span class="line">                  &lt;div style&#x3D;&#123;&#123;display: &quot;flex&quot;,justifyContent:&quot;center&quot;&#125;&#125;&gt;</span><br><span class="line">                  &lt;Button  type&#x3D;&quot;primary&quot;  onClick&#x3D;&#123;()&#x3D;&gt;&#123;</span><br><span class="line">                       this.onAdd()</span><br><span class="line">                   &#125;&#125;&gt; 添加规则&lt;&#x2F;Button&gt;</span><br><span class="line">                   &#123;domArr&amp;&amp;domArr.length!&#x3D;&#x3D;0? &lt;Button style&#x3D;&#123;&#123;marginLeft:&quot;20px&quot;&#125;&#125; type&#x3D;&quot;primary&quot; onClick&#x3D;&#123;()&#x3D;&gt;&#123;</span><br><span class="line">                       this.props.onDel()</span><br><span class="line">                  &#125;&#125;&gt;删除&lt;&#x2F;Button&gt;:&quot;&quot;&#125;</span><br><span class="line">                 &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TrusteeshipForm &#x3D; Form.create(&#123;&#125;)(TrusteeshipForm)</span><br><span class="line"></span><br><span class="line">export default TrusteeshipForm;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年来啦</title>
    <url>/myBlog/2022/01/01/2022/</url>
    <content><![CDATA[<h5 id="2022年元旦"><a href="#2022年元旦" class="headerlink" title="2022年元旦"></a>2022年元旦</h5><p><strong>新的一年又到来了</strong></p>
<p>工作的时间过的飞快，转眼间已经当了一年的打工人了。</p>
<p>这一年经历了很多，实习、毕业、工作、旅游、隔离、加班。</p>
<p>毕业后一个人留在了常州，开始没什么朋友，过的很烦闷和痛苦。</p>
<p>虽然工作中遇到了几个同事与好友，但是人的喜好并不相同。</p>
<p>但也是很开心的。至少工作中又很多欢乐。</p>
<p>经历了很多也收获了很多，从一开始的写一些小需求，到现在开发整个版本，调研新的技术。</p>
<p>现在应该算一个真正的前端程序员了吧。</p>
<p>就是自己技术的广度没多大提升。</p>
<p>每天从早写到晚，下班或者放假的时候学习新技术是可以屈指可数的。</p>
<p>今年慢慢加油吧。</p>
<p>今天元旦，华姐邀请我去她家吃饭，但是还要我自己烧饭，还是很快乐的，只是没有发挥好，最后出锅忘记了放盐，没有华姐做的好吃。饭后打打牌，做做小游戏，美中不足是没有打到羽毛球。</p>
<p>周末能和好朋友们一起玩一玩真的挺棒的，不会那么烦闷。</p>
<p>新的一年继续加油。</p>
<p>希望今年父母健康，一切都好。</p>
<p>自己一切都好，我爱的人和爱我的人一切都好。</p>
<p>新年快乐！</p>
<p><a href="%E4%B8%AD%E5%8D%88%E7%9A%84%E8%8F%9C"><img src="https://s4.ax1x.com/2022/01/01/TIXkW9.jpg" alt="TIXkW9.jpg"></a></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>react中使用谷歌地图</title>
    <url>/myBlog/2021/12/02/react%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8C%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<h4 id="react中使用谷歌地图"><a href="#react中使用谷歌地图" class="headerlink" title="react中使用谷歌地图"></a>react中使用谷歌地图</h4><h5 id="1、引入"><a href="#1、引入" class="headerlink" title="1、引入"></a>1、引入</h5><p><strong>index.html文件中引入谷歌地图</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000000&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>OMS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://maps.googleapis.com/maps/api/js?key=AIzaSyDVTk78W-PvhqUC08l6MBqUHTjJXSGcP4g&amp;libraries=places&amp;language=&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; Button, Input &#125; from &quot;antd&quot;;</span><br><span class="line">import &#123; FormattedMessage &#125; from &quot;react-intl&quot;;</span><br><span class="line"></span><br><span class="line">const googleMap &#x3D; window.google &amp;&amp; window.google.maps;</span><br><span class="line"></span><br><span class="line">class Map extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      map: null,</span><br><span class="line">      lat: null,</span><br><span class="line">      lng: null,</span><br><span class="line">      marker: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 初始化谷歌地图</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    if (&quot;geolocation&quot; in navigator) &#123;</span><br><span class="line">      &#x2F;&#x2F;检测当前设备是否支持H5Geolocation API</span><br><span class="line">      navigator.geolocation.getCurrentPosition((position) &#x3D;&gt; &#123;</span><br><span class="line">        let mapProp &#x3D; &#123;</span><br><span class="line">          center: new googleMap.LatLng(position.coords.latitude, position.coords.longitude),</span><br><span class="line">          zoom: 17,</span><br><span class="line">          mapTypeId: googleMap.MapTypeId.ROADMAP,</span><br><span class="line">        &#125;;</span><br><span class="line">        let map &#x3D; new googleMap.Map(document.getElementById(&quot;googleMap&quot;), mapProp);</span><br><span class="line"></span><br><span class="line">        if (this.state.marker[0] &amp;&amp; this.state.marker[0].setMap) &#123;</span><br><span class="line">          this.state.marker[0].setMap(null);</span><br><span class="line">        &#125;</span><br><span class="line">        const arr &#x3D; [];</span><br><span class="line">        arr[0] &#x3D; new googleMap.Marker(&#123;</span><br><span class="line">          position: new googleMap.LatLng(position.coords.latitude, position.coords.longitude),</span><br><span class="line">        &#125;);</span><br><span class="line">        this.setState(</span><br><span class="line">          &#123;</span><br><span class="line">            marker: arr,</span><br><span class="line">            lat: position.coords.latitude,</span><br><span class="line">            lng: position.coords.longitude,</span><br><span class="line">            map,</span><br><span class="line">          &#125;,</span><br><span class="line">          () &#x3D;&gt; &#123;</span><br><span class="line">            this.state.marker[0].setMap(map);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      alert(&quot;该浏览器不支持获取地理位置&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addMap &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    googleMap.event.addListener(this.state.map, &quot;click&quot;, (e) &#x3D;&gt; &#123;</span><br><span class="line">      if (this.state.marker[0] &amp;&amp; this.state.marker[0].setMap) &#123;</span><br><span class="line">        this.state.marker[0].setMap(null);</span><br><span class="line">      &#125;</span><br><span class="line">      const arr &#x3D; [];</span><br><span class="line">      arr[0] &#x3D; new googleMap.Marker(&#123;</span><br><span class="line">        position: new googleMap.LatLng(e.latLng.lat(), e.latLng.lng()),</span><br><span class="line">      &#125;);</span><br><span class="line">      this.setState(</span><br><span class="line">        &#123;</span><br><span class="line">          marker: arr,</span><br><span class="line">          lat: e.latLng.lat(),</span><br><span class="line">          lng: e.latLng.lng(),</span><br><span class="line">        &#125;,</span><br><span class="line">        () &#x3D;&gt; &#123;</span><br><span class="line">          this.state.marker[0].setMap(this.state.map);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div style&#x3D;&#123;&#123; display: &quot;flex&quot;, alignItems: &quot;center&quot;, marginBottom: 10 &#125;&#125;&gt;</span><br><span class="line">          &lt;span&gt;</span><br><span class="line">            &lt;FormattedMessage id&#x3D;&quot;lng&quot; &#x2F;&gt;：</span><br><span class="line">          &lt;&#x2F;span&gt;</span><br><span class="line">          &lt;Input style&#x3D;&#123;&#123; width: &quot;200px&quot; &#125;&#125; value&#x3D;&#123;this.state.lng&#125; disabled &#x2F;&gt;</span><br><span class="line">          &lt;span style&#x3D;&#123;&#123; marginLeft: 20 &#125;&#125;&gt;</span><br><span class="line">            &lt;FormattedMessage id&#x3D;&quot;lat&quot; &#x2F;&gt;：</span><br><span class="line">          &lt;&#x2F;span&gt;</span><br><span class="line">          &lt;Input style&#x3D;&#123;&#123; width: &quot;200px&quot; &#125;&#125; value&#x3D;&#123;this.state.lat&#125; disabled &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;Button</span><br><span class="line">            style&#x3D;&#123;&#123; marginLeft: 20 &#125;&#125;</span><br><span class="line">            type&#x3D;&quot;primary&quot;</span><br><span class="line">            onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">              this.props.addLatLng(this.state.lat, this.state.lng);</span><br><span class="line">              this.props.onCancel();</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;FormattedMessage id&#x3D;&quot;ok&quot; &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;googleMap&quot; style&#x3D;&#123;&#123; width: &quot;900px&quot;, height: &quot;500px&quot; &#125;&#125; onClick&#x3D;&#123;this.addMap&#125;&gt;&lt;&#x2F;div&gt;;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Map;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>react项目国际化</title>
    <url>/myBlog/2021/12/04/react%E9%A1%B9%E7%9B%AE%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    <content><![CDATA[<h3 id="react项目国际化"><a href="#react项目国际化" class="headerlink" title="react项目国际化"></a>react项目国际化</h3><h4 id="这里使用的react-intl"><a href="#这里使用的react-intl" class="headerlink" title="这里使用的react-intl"></a>这里使用的react-intl</h4><h5 id="1、安装react-intl"><a href="#1、安装react-intl" class="headerlink" title="1、安装react-intl"></a>1、安装react-intl</h5><p><code>npm install react-intl --save</code> 或者 <code>cnpm install react-intl --save</code></p>
<h5 id="2、引入"><a href="#2、引入" class="headerlink" title="2、引入"></a>2、引入</h5><p>在需要国际化的文件引入react-intl</p>
<p>需要全局国际化就在app.js文件中引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; IntlProvider &#125; from &quot;react-intl&quot;;</span><br><span class="line"></span><br><span class="line">class Page extends Component &#123;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;IntlProvider&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;IntlProvider&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3、创建翻译数据文件"><a href="#3、创建翻译数据文件" class="headerlink" title="3、创建翻译数据文件"></a>3、创建翻译数据文件</h5><p>在src目录下新建一个文件夹i18n包含两个js文件一个<code>locales.js</code> 需要的语言一个<code>messages.js</code>需要翻译的数据</p>
<p>我这里是中文英语和尼泊尔语</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;locales.js</span><br><span class="line">export const LOCALES &#x3D; &#123;</span><br><span class="line">  NEPAIL: &quot;ne-Ne&quot;,</span><br><span class="line">  CHINESE: &quot;zh-CN&quot;,</span><br><span class="line">  ENGLISH: &quot;en&quot;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;messages.js</span><br><span class="line">import &#123; LOCALES &#125; from &quot;.&#x2F;locales&quot;;</span><br><span class="line"></span><br><span class="line">export const messages &#x3D; &#123;</span><br><span class="line">  [LOCALES.NEPAIL]: &#123;</span><br><span class="line">    chinese: &quot;चिनियाँ&quot;,</span><br><span class="line">    nepail: &quot;नेपाली&quot;,</span><br><span class="line">    change_lan: &quot;एउटा भाषा छान्नुहोस्&quot;,</span><br><span class="line">    station_name: &quot;चार्जिङ स्टेशनको नाम&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  [LOCALES.CHINESE]: &#123;</span><br><span class="line">    change_lan: &quot;选择语言&quot;,</span><br><span class="line">    chinese: &quot;中文&quot;,</span><br><span class="line">    nepail: &quot;尼泊尔语&quot;,</span><br><span class="line">    station_name: &quot;电站名称&quot;,</span><br><span class="line"> </span><br><span class="line">  &#125;,</span><br><span class="line">  [LOCALES.ENGLISH]: &#123;</span><br><span class="line">    change_lan: &quot;languages&quot;,</span><br><span class="line">    chinese: &quot;chinese&quot;,</span><br><span class="line">    nepail: &quot;Nepail&quot;,</span><br><span class="line">    station_name: &quot;stationName&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h5><p> 使用<code>FormattedMessage</code> 组件，允许用户对简单到复杂的字符串和消息进行翻译和格式化 </p>
<p>这个<code>locale</code> ，它接受一个字符串，决定了我们的应用程序是以什么语言呈现的。这里我使用<code>select</code>动态地改变这个值。</p>
<p><code>messages</code> 对象包含一组准备在前台显示的翻译字符串。这些也将根据当前的语言环境动态地添加。</p>
<p><code>defaultLocale</code> 道具是默认的locale，应该与应用程序的默认语言相匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; IntlProvider,FormattedMessage &#125; from &quot;react-intl&quot;;</span><br><span class="line">import &#123; LOCALES &#125; from &quot;..&#x2F;..&#x2F;i18n&#x2F;locales&quot;;</span><br><span class="line">import &#123; messages &#125; from &quot;..&#x2F;..&#x2F;i18n&#x2F;messages&quot;;</span><br><span class="line"></span><br><span class="line">class Page extends Component &#123;</span><br><span class="line">     constructor(props) &#123;</span><br><span class="line">     super(props);</span><br><span class="line">     this.state &#x3D; &#123;</span><br><span class="line">         &#x2F;&#x2F;默认语言</span><br><span class="line">      locale: LOCALES.CHINESE,</span><br><span class="line">     &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">          const &#123; locale &#125; &#x3D; this.state;</span><br><span class="line">        return (</span><br><span class="line">            &lt;IntlProvider  </span><br><span class="line">                messages&#x3D;&#123;messages[locale]&#125; </span><br><span class="line">                locale&#x3D;&#123;locale&#125; </span><br><span class="line">                &#x2F;&#x2F;默认语言</span><br><span class="line">                defaultLocale&#x3D;&#123;locale.CHINESE&#125;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                  &lt;span style&#x3D;&#123;&#123; marginRight: &quot;5px&quot; &#125;&#125;&gt;</span><br><span class="line">                    &lt;FormattedMessage id&#x3D;&quot;change_lan&quot; &#x2F;&gt;:</span><br><span class="line">                  &lt;&#x2F;span&gt;</span><br><span class="line">                  &lt;Select</span><br><span class="line">                    defaultValue&#x3D;&#123;1&#125;</span><br><span class="line">                    placeholder&#x3D;&#123;&lt;FormattedMessage id&#x3D;&quot;change_lan&quot; &#x2F;&gt;&#125;</span><br><span class="line">                    onChange&#x3D;&#123;(val) &#x3D;&gt; &#123;</span><br><span class="line">                      if (val &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                        this.setState(&#123;</span><br><span class="line">                          locale: LOCALES.CHINESE,</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125; else if (val &#x3D;&#x3D;&#x3D; 2) &#123;</span><br><span class="line">                        this.setState(&#123;</span><br><span class="line">                          locale: LOCALES.NEPAIL,</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125; else if (val &#x3D;&#x3D;&#x3D; 3) &#123;</span><br><span class="line">                        this.setState(&#123;</span><br><span class="line">                          locale: LOCALES.ENGLISH,</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    style&#x3D;&#123;&#123; width: &quot;150px&quot; &#125;&#125;</span><br><span class="line">                  &gt;</span><br><span class="line">                    &lt;Option value&#x3D;&#123;1&#125;&gt;中文&lt;&#x2F;Option&gt;</span><br><span class="line">                    &lt;Option value&#x3D;&#123;2&#125;&gt;Nepail&lt;&#x2F;Option&gt;</span><br><span class="line">                    &lt;Option value&#x3D;&#123;3&#125;&gt;Engilish&lt;&#x2F;Option&gt;</span><br><span class="line">                  &lt;&#x2F;Select&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;IntlProvider&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="5、占位符placeholder使用、message提示的使用"><a href="#5、占位符placeholder使用、message提示的使用" class="headerlink" title="5、占位符placeholder使用、message提示的使用"></a>5、占位符placeholder使用、message提示的使用</h5><p>不能使用FormattedMessage因为返回的是一个html</p>
<p>首先使用<code>injectIntl</code>包装React组件， 注入<code>intl</code>上下文 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; Form,  Input, message &#125; from &quot;antd&quot;;</span><br><span class="line">import &#123; FormattedMessage, injectIntl &#125; from &quot;react-intl&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Add extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  onFinish &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.props.form.validateFields((err, values) &#x3D;&gt; &#123;</span><br><span class="line">      if (!err) &#123;</span><br><span class="line">            const msg2 &#x3D; this.props.intl.formatMessage(&#123; id: &quot;save_success&quot; &#125;);</span><br><span class="line">            message.success(msg2, 5);</span><br><span class="line">            this.props.form.resetFields();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; getFieldDecorator, setFieldsValue &#125; &#x3D; this.props.form;</span><br><span class="line">    const placeholder &#x3D; this.props.intl.formatMessage(&#123; id: &quot;input&quot; &#125;);</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Form  name&#x3D;&quot;basic&quot; onSubmit&#x3D;&#123;this.onFinish&#125;&gt;</span><br><span class="line">          &lt;Form.Item label&#x3D;&#123;&lt;FormattedMessage id&#x3D;&quot;station_name&quot; &#x2F;&gt;&#125;&gt;</span><br><span class="line">            &#123;getFieldDecorator(&quot;name&quot;, &#123;</span><br><span class="line">              rules: [&#123; </span><br><span class="line">                  required: true, </span><br><span class="line">                  whitespace: true, </span><br><span class="line">                  message: &lt;FormattedMessage id&#x3D;&quot;required&quot; &#x2F;&gt;</span><br><span class="line">              &#125;],</span><br><span class="line">              initialValue: &quot;&quot;,</span><br><span class="line">            &#125;)(&lt;Input placeholder&#x3D;&#123;placeholder&#125; &#x2F;&gt;)&#125;</span><br><span class="line">          &lt;&#x2F;Form.Item&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Add &#x3D; Form.create(&#123;&#125;)(Add);</span><br><span class="line"></span><br><span class="line">export default injectIntl(Add);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux的使用方法（复习）</title>
    <url>/myBlog/2021/11/03/redux&amp;&amp;reacy-redux%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Redux-的使用方法"><a href="#Redux-的使用方法" class="headerlink" title="Redux 的使用方法"></a>Redux 的使用方法</h3><h6 id="1、安装-redux"><a href="#1、安装-redux" class="headerlink" title="1、安装 redux"></a>1、安装 redux</h6><p><code>npm i redux --save</code></p>
<h6 id="2、新建文件"><a href="#2、新建文件" class="headerlink" title="2、新建文件"></a>2、新建文件</h6><p><strong>新建文件夹 store 包含 store.js/reducer.js/action.js</strong></p>
<h6 id="3、新建-reducer-action-引入-store"><a href="#3、新建-reducer-action-引入-store" class="headerlink" title="3、新建 reducer/action/引入 store"></a>3、新建 reducer/action/引入 store</h6><p><strong>reducer.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultData = &#123; <span class="attr">num</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = defaultData, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;action: &quot;</span>, action);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;state: &quot;</span>, state);</span><br><span class="line">  <span class="keyword">const</span> newData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;newData: &quot;</span>, newData);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">      newData.num++;</span><br><span class="line">      <span class="keyword">return</span> newData;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;minus&quot;</span>:</span><br><span class="line">      newData.num--;</span><br><span class="line">      <span class="keyword">return</span> newData;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;getVal&quot;</span>:</span><br><span class="line">      newData.num = action.value;</span><br><span class="line">      <span class="keyword">return</span> newData;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> newData;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer;</span><br></pre></td></tr></table></figure>
<p><strong>action.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, value &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minus = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&quot;minus&quot;</span>, value &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeVal = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&quot;getVal&quot;</span>, value &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add, minus, changeVal &#125;;</span><br></pre></td></tr></table></figure>
<p><strong>store.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/myBlog/2021/09/27/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机号</span></span><br><span class="line"><span class="keyword">var</span> phoneReg = <span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>; </span><br><span class="line"><span class="comment">// 详细手机号校验规则</span></span><br><span class="line"><span class="keyword">var</span> phoneReg1 = <span class="regexp">/^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\d&#123;8&#125;$/</span>; </span><br><span class="line"><span class="comment">//验证手机号和固定电话</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^((0\d&#123;2,3&#125;-\d&#123;7,8&#125;)|(1[34578]\d&#123;9&#125;))$/</span>;;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//邮箱</span></span><br><span class="line"><span class="keyword">var</span> emailReg = <span class="regexp">/[\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\.[\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户名校验</span></span><br><span class="line"><span class="keyword">var</span> userNameReg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;  <span class="comment">//6-16位的包含大小写字母、数字、特殊符号- _ 的用户名</span></span><br><span class="line"><span class="keyword">var</span> userNameReg1 = <span class="regexp">/^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]&#123;6,20&#125;$/</span>; <span class="comment">//6-20位字母和数字组合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//身份证验证</span></span><br><span class="line"> <span class="keyword">var</span> idcardReg = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证是否两位小数</span></span><br><span class="line"><span class="keyword">var</span> twoDigReg = <span class="regexp">/(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内容只能由英文、数字、下划线组成</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内容只能包含英文字母和数字</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z0-9]+$/i</span>；</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>react-hooks中useContext的使用</title>
    <url>/myBlog/2022/02/22/useContext/</url>
    <content><![CDATA[<h3 id="react-hooks中useContext的使用"><a href="#react-hooks中useContext的使用" class="headerlink" title="react-hooks中useContext的使用"></a>react-hooks中useContext的使用</h3><h5 id="1、作用"><a href="#1、作用" class="headerlink" title="1、作用"></a>1、作用</h5><p><strong>useContext可以多层嵌套传输数据和方法</strong></p>
<h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><p>1、新建一个store.js文件，使用React.createContext()创建一个自己的Context</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">const myContext &#x3D; React.createContext(null);</span><br><span class="line"></span><br><span class="line">export &#123; myContext &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2、最外层组件</p>
<p>使用myContext.Provider包裹然后value传入自己需要的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; myContext &#125; from &quot;.&#x2F;store&quot;;</span><br><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line">import Child from &quot;.&#x2F;child&quot;;</span><br><span class="line">const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [num, setNum] &#x3D; useState(0);</span><br><span class="line">  return (</span><br><span class="line">    &lt;myContext.Provider value&#x3D;&#123;&#123; setNum, num &#125;&#125;&gt;</span><br><span class="line">      &lt;Child&gt;&lt;&#x2F;Child&gt;</span><br><span class="line">    &lt;&#x2F;myContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3、子组件</p>
<p>引入myContext并通过useContext获取到传入的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; myContext &#125; from &quot;.&#x2F;store&quot;;</span><br><span class="line">import React, &#123; useContext&#125; from &quot;react&quot;;</span><br><span class="line">import GrandSon from &quot;.&#x2F;grandSon&quot;;</span><br><span class="line"></span><br><span class="line">const Child &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; setNum, num &#125; &#x3D; useContext(myContext);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;num&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">          setNum((prev) &#x3D;&gt; prev + 1);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        添加</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;GrandSon num&#x3D;&#123;num&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Child;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3、孙组件</p>
<p>和子组件中一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; myContext &#125; from &quot;.&#x2F;store&quot;;</span><br><span class="line">import React, &#123; useContext &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const GrandSon &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; setNum, num &#125; &#x3D; useContext(myContext);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;我是孙子&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h1&gt;&#123;num&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">          setNum((prev) &#x3D;&gt; prev + 1);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        添加</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default GrandSon;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>多层传值的话结构比较清晰，不需要层层用props传值，在一个单独的组件中传值中比较方便</strong></p>
]]></content>
      <tags>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的map方法会不会改变原数组</title>
    <url>/myBlog/2021/09/21/%E6%95%B0%E7%BB%84%E7%9A%84map%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h5 id="数组的map方法会不会改变原数组"><a href="#数组的map方法会不会改变原数组" class="headerlink" title="数组的map方法会不会改变原数组"></a>数组的map方法会不会改变原数组</h5><p>****父组件朝子组件传值，二次渲染以后有一个数组的值改变了，发现该数组使用了map，map不是不会改变原数组吗。</p>
<h6 id="会改变原数组"><a href="#会改变原数组" class="headerlink" title="会改变原数组"></a>会改变原数组</h6><p>于是就自己试了一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123; <span class="attr">name</span>: <span class="string">&quot;aa&quot;</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = arr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  item.num *= <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr: &quot;</span>, arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;newArr: &quot;</span>, newArr);</span><br><span class="line"><span class="comment">/*********************</span></span><br><span class="line"><span class="comment">arr:  [ &#123; name: &#x27;aa&#x27;, num: 10 &#125; ]</span></span><br><span class="line"><span class="comment">newArr:  [ &#123; name: &#x27;aa&#x27;, num: 10 &#125; ]</span></span><br><span class="line"><span class="comment">*******************/</span></span><br></pre></td></tr></table></figure>
<p> <strong>上面代码我们看出原数组arr的值改变了，数组内是引用类型</strong></p>
<h6 id="不会改变原数组"><a href="#不会改变原数组" class="headerlink" title="不会改变原数组"></a>不会改变原数组</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; </span><br><span class="line"> <span class="keyword">const</span> newArr = arr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> item * <span class="number">10</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr: &quot;</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;newArr: &quot;</span>, newArr);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">arr:  [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="comment">newArr:  [ 10, 20, 30, 40, 50 ]</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>
<p><strong>我又试了一下值类型，发现值类型不会被改变</strong></p>
<p><strong>看来数组的map方法会改变原数组</strong></p>
<h6 id="不改变的写法"><a href="#不改变的写法" class="headerlink" title="不改变的写法"></a>不改变的写法</h6><p><strong>怎么样能让map方法不改变原数组呢？</strong></p>
<p><strong>改变原数组的原因是直接对item进行操作。</strong></p>
<p><strong>可以返回一个新的，如下</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123; <span class="attr">name</span>: <span class="string">&quot;aa&quot;</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = arr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">  name:item.name,</span><br><span class="line">  num:item.num*<span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr: &quot;</span>, arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;newArr: &quot;</span>, newArr);</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">arr:  [ &#123; name: &#x27;aa&#x27;, num: 1 &#125; ]</span></span><br><span class="line"><span class="comment">newArr:  [ &#123; name: &#x27;aa&#x27;, num: 10 &#125; ]</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>文件作为参数上传</title>
    <url>/myBlog/2021/08/12/%E6%96%87%E4%BB%B6%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h5 id="文件作为参数上传"><a href="#文件作为参数上传" class="headerlink" title="文件作为参数上传"></a>文件作为参数上传</h5><p>文件作为参数上传，需要使用<code>formData</code>格式。</p>
<p>本次是使用<code>Ant Design的form组件和Upload组件</code>实现</p>
<p>若需要别的参数，也要通过<code>formData的append的方法</code>把参数添加到formData中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//formData中添加参数</span></span><br><span class="line">formData.append(<span class="string">&quot;参数名&quot;</span>，<span class="string">&quot;参数值&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; Form, Button, Input, message, Upload &#125; from &quot;antd&quot;;</span><br><span class="line">import fetchHandler from &quot;@&#x2F;fetch&#x2F;fetchHandler&quot;;</span><br><span class="line">import &#123; prefixFile, rebateUpload &#125; from &quot;@&#x2F;fetch&#x2F;fetchApi&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">const &#123; TextArea &#125; &#x3D; Input;</span><br><span class="line"></span><br><span class="line">class UploadForm extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.props &#x3D; props;</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      fileList: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  normFile &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;Upload event:&quot;, e);</span><br><span class="line">    if (Array.isArray(e)) &#123;</span><br><span class="line">      return e;</span><br><span class="line">    &#125;</span><br><span class="line">    return e &amp;&amp; e.fileList;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 表单提交</span><br><span class="line">  onFinish &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    this.props.form.validateFields((err, values) &#x3D;&gt; &#123;</span><br><span class="line">      if (!err) &#123;</span><br><span class="line">        const &#123; fileList &#125; &#x3D; this.state;</span><br><span class="line">        const formData &#x3D; new FormData();</span><br><span class="line">        fileList.forEach((file) &#x3D;&gt; &#123;</span><br><span class="line">          formData.append(&quot;file&quot;, file);</span><br><span class="line">          formData.append(&quot;rebateName&quot;, values.rebateName);</span><br><span class="line">          formData.append(&quot;remark&quot;, values.remark);</span><br><span class="line">          formData.append(&quot;activityName&quot;, values.activityName);</span><br><span class="line">        &#125;);</span><br><span class="line">        axios(&#123;</span><br><span class="line">          method: &quot;post&quot;,</span><br><span class="line">          url: &#96;$&#123;prefixFile&#125;&#x2F;webApi&#x2F;rebate&#x2F;upload&#96;,</span><br><span class="line">          data: formData,</span><br><span class="line">          header: &#123;</span><br><span class="line">            Authorization: window.sessionStorage.getItem(&quot;token&quot;),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">          console.log(res);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 模板下载</span><br><span class="line">  downloadTemplate &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    if (this.fileUrl) &#123;</span><br><span class="line">      window.location.href &#x3D; this.fileUrl;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      window.location.href &#x3D; &#96;$&#123;prefixFile&#125;&#x2F;templates&#x2F;批量返利模板.xls&#96;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; getFieldDecorator &#125; &#x3D; this.props.form;</span><br><span class="line">    const &#123; fileList &#125; &#x3D; this.state;</span><br><span class="line">    const tailFormItemLayout &#x3D; &#123;</span><br><span class="line">      wrapperCol: &#123;</span><br><span class="line">        xs: &#123; span: 24, offset: 0 &#125;,</span><br><span class="line">        sm: &#123; span: 16, offset: 5 &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    const formItemLayout &#x3D; &#123;</span><br><span class="line">      labelCol: &#123;</span><br><span class="line">        xs: &#123; span: 24 &#125;,</span><br><span class="line">        sm: &#123; span: 4 &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      wrapperCol: &#123;</span><br><span class="line">        xs: &#123; span: 24 &#125;,</span><br><span class="line">        sm: &#123; span: 12, offset: 1 &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    const uploadProps &#x3D; &#123;</span><br><span class="line">      name: &quot;file&quot;,</span><br><span class="line">      accept: &quot;.xls&quot;,</span><br><span class="line">      &#x2F;&#x2F; onChange: this.handleChange,</span><br><span class="line">      onRemove: (file) &#x3D;&gt; &#123;</span><br><span class="line">        this.setState((state) &#x3D;&gt; &#123;</span><br><span class="line">          const index &#x3D; state.fileList.indexOf(file);</span><br><span class="line">          const newFileList &#x3D; state.fileList.slice();</span><br><span class="line">          newFileList.splice(index, 1);</span><br><span class="line">          this.props.form.setFieldsValue(&#123;</span><br><span class="line">            file: &quot;&quot;,</span><br><span class="line">          &#125;);</span><br><span class="line">          return &#123;</span><br><span class="line">            fileList: newFileList,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeUpload: (file) &#x3D;&gt; &#123;</span><br><span class="line">        this.setState(</span><br><span class="line">          &#123;</span><br><span class="line">            fileList: [file],</span><br><span class="line">          &#125;,</span><br><span class="line">          () &#x3D;&gt; &#123;</span><br><span class="line">            const &#123; fileList &#125; &#x3D; this.state;</span><br><span class="line">            const formData &#x3D; new FormData();</span><br><span class="line">            fileList.forEach((file) &#x3D;&gt; &#123;</span><br><span class="line">              formData.append(&quot;file&quot;, file);</span><br><span class="line">            &#125;);</span><br><span class="line">            this.props.form.setFieldsValue(&#123;</span><br><span class="line">              file: formData,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">        return false;</span><br><span class="line">      &#125;,</span><br><span class="line">      fileList,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;Form name&#x3D;&quot;basic&quot; onSubmit&#x3D;&#123;this.onFinish&#125;&gt;</span><br><span class="line">        &lt;Form.Item label&#x3D;&quot;返利批次名称&quot; &#123;...formItemLayout&#125;&gt;</span><br><span class="line">          &#123;getFieldDecorator(&quot;rebateName&quot;, &#123;</span><br><span class="line">            rules: [&#123; required: true, message: &quot;该项是必填项&quot; &#125;],</span><br><span class="line">            initialValue: &quot;&quot;,</span><br><span class="line">          &#125;)(&lt;Input placeholder&#x3D;&quot;请输入返利批次名称&quot; maxLength&#x3D;&#123;100&#125; &#x2F;&gt;)&#125;</span><br><span class="line">        &lt;&#x2F;Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label&#x3D;&quot;活动名称&quot; &#123;...formItemLayout&#125;&gt;</span><br><span class="line">          &#123;getFieldDecorator(&quot;activityName&quot;, &#123;</span><br><span class="line">            rules: [&#123; required: true, message: &quot;该项是必填项&quot; &#125;],</span><br><span class="line">            initialValue: &quot;&quot;,</span><br><span class="line">          &#125;)(&lt;Input placeholder&#x3D;&quot;请输入活动名称&quot; maxLength&#x3D;&#123;100&#125; &#x2F;&gt;)&#125;</span><br><span class="line">        &lt;&#x2F;Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label&#x3D;&quot;备注&quot; &#123;...formItemLayout&#125;&gt;</span><br><span class="line">          &#123;getFieldDecorator(&quot;remark&quot;, &#123;</span><br><span class="line">            rules: [&#123; required: false &#125;],</span><br><span class="line">            initialValue: &quot;&quot;,</span><br><span class="line">          &#125;)(&lt;TextArea rows&#x3D;&#123;5&#125; maxLength&#x3D;&#123;50&#125; placeholder&#x3D;&quot;请输入备注&quot; &#x2F;&gt;)&#125;</span><br><span class="line">        &lt;&#x2F;Form.Item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Form.Item label&#x3D;&quot;批量上传&quot; &#123;...formItemLayout&#125;&gt;</span><br><span class="line">          &#123;getFieldDecorator(&quot;file&quot;, &#123;</span><br><span class="line">            valuePropName: &quot;fileList&quot;,</span><br><span class="line">            getValueFromEvent: this.normFile,</span><br><span class="line">            rules: [&#123; required: true, message: &quot;该项是必填项&quot; &#125;],</span><br><span class="line">          &#125;)(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;Upload &#123;...uploadProps&#125;&gt;</span><br><span class="line">                &lt;Button type&#x3D;&quot;dashed&quot;&gt;上传文件&lt;&#x2F;Button&gt;</span><br><span class="line">              &lt;&#x2F;Upload&gt;</span><br><span class="line">              &lt;a style&#x3D;&#123;&#123; marginRight: &quot;10px&quot; &#125;&#125;&gt;模板&lt;&#x2F;a&gt;</span><br><span class="line">              &lt;a onClick&#x3D;&#123;this.downloadTemplate&#125;&gt;点击下载&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;&#x2F;Form.Item&gt;</span><br><span class="line">        &lt;Form.Item &#123;...tailFormItemLayout&#125;&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">              this.props.onCancel();</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            style&#x3D;&#123;&#123; marginRight: &quot;20px&quot; &#125;&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            退出</span><br><span class="line">          &lt;&#x2F;Button&gt;</span><br><span class="line">          &lt;Button type&#x3D;&quot;primary&quot; htmlType&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">            提交</span><br><span class="line">          &lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;&#x2F;Form.Item&gt;</span><br><span class="line">      &lt;&#x2F;Form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UploadForm &#x3D; Form.create(&#123;&#125;)(UploadForm);</span><br><span class="line"></span><br><span class="line">export default UploadForm;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>除法数值转换精度</title>
    <url>/myBlog/2021/10/08/%E9%99%A4%E6%B3%95%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E7%B2%BE%E5%BA%A6/</url>
    <content><![CDATA[<h3 id="除法数值转换精度"><a href="#除法数值转换精度" class="headerlink" title="除法数值转换精度"></a>除法数值转换精度</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arg1:除数</span></span><br><span class="line"><span class="comment">//arg2:被除数</span></span><br><span class="line"><span class="comment">// 除法转换数值精度</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> editDiscountNum = <span class="function">(<span class="params">arg1, arg2</span>) =&gt;</span> &#123;</span><br><span class="line">  arg1 = <span class="built_in">Number</span>(arg1);</span><br><span class="line">  arg2 = <span class="built_in">Number</span>(arg2);</span><br><span class="line">  <span class="keyword">if</span> (!arg2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!arg1 &amp;&amp; arg1 !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg1 === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  arg1 = toNonExponential(arg1);</span><br><span class="line">  arg2 = toNonExponential(arg2);</span><br><span class="line">  <span class="keyword">let</span> n1, n2;</span><br><span class="line">  <span class="keyword">let</span> r1, r2; <span class="comment">// 小数位数</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    r1 = arg1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    r1 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    r2 = arg2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    r2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  n1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">  n2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">  <span class="keyword">return</span> floatMultiply(n1 / n2, <span class="built_in">Math</span>.pow(<span class="number">10</span>, r2 - r1));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 乘法数值精度</span></span><br><span class="line"><span class="keyword">const</span> floatMultiply = <span class="function">(<span class="params">arg1, arg2</span>) =&gt;</span> &#123;</span><br><span class="line">  arg1 = <span class="built_in">Number</span>(arg1);</span><br><span class="line">  arg2 = <span class="built_in">Number</span>(arg2);</span><br><span class="line">  <span class="keyword">if</span> ((!arg1 &amp;&amp; arg1 !== <span class="number">0</span>) || (!arg2 &amp;&amp; arg2 !== <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  arg1 = toNonExponential(arg1);</span><br><span class="line">  arg2 = toNonExponential(arg2);</span><br><span class="line">  <span class="keyword">let</span> n1, n2;</span><br><span class="line">  <span class="keyword">let</span> r1, r2; <span class="comment">// 小数位数</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    r1 = arg1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    r1 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    r2 = arg2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    r2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  n1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">  n2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">  <span class="keyword">return</span> (n1 * n2) / <span class="built_in">Math</span>.pow(<span class="number">10</span>, r1 + r2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toNonExponential = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (num == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> m = num.toExponential().match(<span class="regexp">/\d(?:\.(\d*))?e([+-]\d+)/</span>);</span><br><span class="line">    <span class="keyword">return</span> num.toFixed(<span class="built_in">Math</span>.max(<span class="number">0</span>, (m[<span class="number">1</span>] || <span class="string">&quot;&quot;</span>).length - m[<span class="number">2</span>]));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>react hooks介绍</title>
    <url>/myBlog/2022/01/15/react-hook/</url>
    <content><![CDATA[<h2 id="Hook-是什么？"><a href="#Hook-是什么？" class="headerlink" title="Hook 是什么？"></a>Hook 是什么？</h2><p>“Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。”</p>
<p>从使用感官上来说，主要是对class组件中 <code>setState</code>和生命周期的“替换”。</p>
<h2 id="Hook的优势"><a href="#Hook的优势" class="headerlink" title="Hook的优势"></a>Hook的优势</h2><ul>
<li>脱离了class和this。（前端更偏爱组装而不是继承。this因为方法嵌套，箭头函数，call，apply，bind等，逐渐复杂化）。</li>
<li>拆分生命周期。（ 对于复杂组件， componentDidUpdate 中可能包含很多逻辑，用useeffect拆分后，条理更清晰 ）。</li>
<li>复用状态逻辑。</li>
</ul>
<h2 id="在react开发中经常关注的问题"><a href="#在react开发中经常关注的问题" class="headerlink" title="在react开发中经常关注的问题"></a>在react开发中经常关注的问题</h2><ul>
<li><p>什么行为会触发组件更新？</p>
</li>
<li><ul>
<li>setState</li>
<li>props</li>
<li>useReducer</li>
</ul>
</li>
<li><p>如何让数据在更新过程中不被重置？</p>
</li>
<li><ul>
<li>useMemo</li>
<li>useState</li>
<li>const a = useRef(); a.current = 1;</li>
<li>把变量定义在组件的外层</li>
</ul>
</li>
</ul>
<h2 id="useState和useEffect"><a href="#useState和useEffect" class="headerlink" title="useState和useEffect"></a>useState和useEffect</h2><ul>
<li><p>useState兼具触发更新和保存数据的功能。</p>
</li>
<li><p>useEffect用于弥补函数式组件生命周期的缺失 </p>
</li>
<li><ul>
<li>依赖缺失会导致哪些问题？</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>useEffect(fun, []);</li>
<li>读取到旧数据``</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>依赖的数据类型？</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>useEffect(fun, [[123] === [123], props, fn]);</li>
<li>function 用useCallback进行包裹，useCallback(fn ,[])</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>哪些东西不需要写在依赖列表</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>import，service，moment</li>
<li>useRef()</li>
<li></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="useImperativeHandle和useRef"><a href="#useImperativeHandle和useRef" class="headerlink" title="useImperativeHandle和useRef"></a>useImperativeHandle和useRef</h2><ul>
<li> useRef可以方便的实现数据持久化，对于不需要进行展示，或者可以依赖其它<code>useState</code>来借东风。 </li>
<li> ref转发？ </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">props, ref</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef();</span><br><span class="line">  useImperativeHandle(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    focus: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      inputRef.current.focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;), []);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">FancyInput = forwardRef(FancyInput);</span><br></pre></td></tr></table></figure>
<h2 id="useCallback和useMemo"><a href="#useCallback和useMemo" class="headerlink" title="useCallback和useMemo"></a>useCallback和useMemo</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">use<span class="constructor">Callback(<span class="params">fn</span>, <span class="params">deps</span>)</span>` 相当于 `use<span class="constructor">Memo(()</span> =&gt; fn, deps)</span><br></pre></td></tr></table></figure>
<h2 id="其它一些Hook"><a href="#其它一些Hook" class="headerlink" title="其它一些Hook"></a>其它一些Hook</h2><ul>
<li>useContext</li>
<li>useReducer</li>
</ul>
<h2 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h2><p>复用状态逻辑</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>useRef的使用</title>
    <url>/myBlog/2022/02/21/useRef/</url>
    <content><![CDATA[<h4 id="react-hooks之useRef，useImperativeHandle的使用"><a href="#react-hooks之useRef，useImperativeHandle的使用" class="headerlink" title="react-hooks之useRef，useImperativeHandle的使用"></a>react-hooks之useRef，useImperativeHandle的使用</h4><h5 id="1、函数内部使用"><a href="#1、函数内部使用" class="headerlink" title="1、函数内部使用"></a>1、函数内部使用</h5><p><strong>useRef可以用来做数据持久化，也可以用来获取到元素实例</strong></p>
<p><strong>ref.current的变化并不会导致函数组件的重新加载不像useState</strong></p>
<p><strong>可以用一个假的useState，结合useEffect的依赖让useRef的值改变后重新加载函数</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> myRef = useRef(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> btnRef = useRef();</span><br><span class="line">    </span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myRef.current += <span class="number">1</span>;</span><br><span class="line">  &#125;, [num]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;我是Ref:&#123;myRef.current&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        ref=&#123;btnRef&#125;</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          setNum(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;button的文字: &quot;</span>, btnRef.current.innerText);<span class="comment">//改变ref</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        改变ref</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="2、子组件使用"><a href="#2、子组件使用" class="headerlink" title="2、子组件使用"></a>2、子组件使用</h5><p><strong>子组件使用不能直接<code>&lt;Child ref=&#123;childRef&#125;&gt;&lt;Child/&gt;</code></strong></p>
<p><strong>这样子组件获取不到ref，要用forwordRef把子组件包裹起来传入两个参数（props,ref）</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> myRef = useRef(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> btnRef = useRef();</span><br><span class="line">    </span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myRef.current += <span class="number">1</span>;</span><br><span class="line">  &#125;, [num]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;我是Ref:&#123;myRef.current&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        ref=&#123;btnRef&#125;</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          setNum(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;button的文字: &quot;</span>, btnRef.current.innerText);<span class="comment">//改变ref</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        改变ref</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;Child ref=&#123;childRef&#125;&gt;&lt;/Child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>


<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;useEffect, forwardRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> Child = forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;props: &quot;</span>, props);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div ref=&#123;ref&#125;&gt;</span><br><span class="line">      &lt;h1&gt;我是子组件&lt;/h1&gt;</span><br><span class="line">      &lt;h1&gt;&#123;num&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3、useImperativeHandle"><a href="#3、useImperativeHandle" class="headerlink" title="3、useImperativeHandle"></a>3、useImperativeHandle</h5><p><strong>像父组件暴露子组件的实例（类似于子传父）</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; myContext &#125; <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext, useEffect, forwardRef, useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> GrandSon <span class="keyword">from</span> <span class="string">&quot;./grandSon&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; setNum, num &#125; = useContext(myContext);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">  useImperativeHandle(ref, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; fn &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hahahha&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div ref=&#123;ref&#125;&gt;</span><br><span class="line">      &lt;h1&gt;我是子组件&lt;/h1&gt;</span><br><span class="line">      &lt;h1&gt;&#123;num&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          setNum(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>);</span><br><span class="line">          setName(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        子组件添加</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;GrandSon num=&#123;num&#125; name=&#123;name&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>子组件就能获取到暴露的值</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> myRef = useRef(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> btnRef = useRef();</span><br><span class="line">    </span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myRef.current += <span class="number">1</span>;</span><br><span class="line">    childRef.current?.fn?.();</span><br><span class="line">  &#125;, [num]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;我是Ref:&#123;myRef.current&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        ref=&#123;btnRef&#125;</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          setNum(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;button的文字: &quot;</span>, btnRef.current.innerText);<span class="comment">//改变ref</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        改变ref</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;Child ref=&#123;childRef&#125;&gt;&lt;/Child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia新的状态管理工具</title>
    <url>/myBlog/2022/03/25/pinia%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="pinia新的状态管理工具"><a href="#pinia新的状态管理工具" class="headerlink" title="pinia新的状态管理工具"></a>pinia新的状态管理工具</h4><h5 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h5><p><code>npm install pinia --save</code></p>
<h5 id="2、新建store-在main-js中引入"><a href="#2、新建store-在main-js中引入" class="headerlink" title="2、新建store,在main.js中引入"></a>2、新建store,在main.js中引入</h5><p><strong>在根目录下新建store文件夹，新建index.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="comment">// 创建store</span></span><br><span class="line"><span class="keyword">const</span> store = createPinia();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>
<p><strong>main.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.use(store);</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3、在store文件夹下新建stateStore-js"><a href="#3、在store文件夹下新建stateStore-js" class="headerlink" title="3、在store文件夹下新建stateStore.js"></a>3、在store文件夹下新建stateStore.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> stateStore = defineStore(&#123;</span><br><span class="line">  id: <span class="string">&quot;state&quot;</span>, <span class="comment">//命名</span></span><br><span class="line">  state: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">&quot;菠萝&quot;</span>,</span><br><span class="line">      age: <span class="number">99</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//类似于计算属性</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">getterName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;使用了getter&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;我是什么水果？我是&quot;</span> + state.name;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">//还支持调用别的actions</span></span><br><span class="line">    <span class="function"><span class="title">updateName</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.updateAge(age);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">updateAge</span>(<span class="params">age</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//action 可以像写一个简单的函数一样支持 async/await的语法</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">asyncfun</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;桃子&quot;</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">await</span> timer;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h5><p><strong>先引入创建的store</strong></p>
<p><strong>解构需要引入<code>storeToRefs</code></strong></p>
<p><strong>修改state数据可以直接修改，也可以使用<code>$patch</code>,也可以使用<code>actions</code>修改</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;pinia:&#123;&#123; name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1&gt;pinia:&#123;&#123; age &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1&gt;pinia.getter:&#123;&#123; state.getterName &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;changeName&quot;&gt;修改pinia&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, inject &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; stateStore &#125; from &quot;..&#x2F;store&#x2F;state&quot;;</span><br><span class="line">&#x2F;&#x2F;解构store</span><br><span class="line">import &#123; storeToRefs &#125; from &quot;pinia&quot;;</span><br><span class="line">const state &#x3D; stateStore();</span><br><span class="line">const &#123; age, name &#125; &#x3D; storeToRefs(state);</span><br><span class="line"></span><br><span class="line">const changeName &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 通过patch修改数据两种方式对象和函数</span><br><span class="line">  &#x2F;&#x2F; 1、对象</span><br><span class="line">  &#x2F;&#x2F;   state.$patch(&#123;</span><br><span class="line">  &#x2F;&#x2F;     name: &quot;西瓜&quot;,</span><br><span class="line">  &#x2F;&#x2F;     age: 100,</span><br><span class="line">  &#x2F;&#x2F;   &#125;);</span><br><span class="line">  &#x2F;&#x2F; 2、函数</span><br><span class="line">  &#x2F;&#x2F;   state.$patch((state) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;     state.name &#x3D; &quot;哈密瓜&quot;;</span><br><span class="line">  &#x2F;&#x2F;     state.age &#x3D; 999;</span><br><span class="line">  &#x2F;&#x2F;   &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 通过action修改数据</span><br><span class="line">  state.updateName(&quot;香蕉&quot;, 88);</span><br><span class="line">  state.asyncfun();</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>自己实现一个简单的redux</title>
    <url>/myBlog/2022/03/30/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0redux/</url>
    <content><![CDATA[<h3 id="自己实现一个-redux"><a href="#自己实现一个-redux" class="headerlink" title="自己实现一个 redux"></a>自己实现一个 redux</h3><p>今天面试被问到 redux 的实现过程，晚上回来想一想发现自己也可以简单的实现一下</p>
<p>就是观察者订阅者模式</p>
<h6 id="1、createStore"><a href="#1、createStore" class="headerlink" title="1、createStore"></a>1、createStore</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="built_in">require</span>(<span class="string">&quot;./reducer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer, state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fnArr = [];</span><br><span class="line">  <span class="comment">//订阅</span></span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">    fnArr.push(fn);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//发布</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    reducer(state, &#123; ...action &#125;);</span><br><span class="line">    <span class="keyword">if</span> (fnArr.length !== <span class="number">0</span>) &#123;</span><br><span class="line">      fnArr.map(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; ...state &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 初始化state</span></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: <span class="literal">null</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer.reducer, &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.store = store;</span><br></pre></td></tr></table></figure>
<h6 id="2、reducer-js-这个没什么区别"><a href="#2、reducer-js-这个没什么区别" class="headerlink" title="2、reducer.js 这个没什么区别"></a>2、reducer.js 这个没什么区别</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">    state.num = state.num + action.value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.reducer = reducer;</span><br></pre></td></tr></table></figure>
<h6 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="built_in">require</span>(<span class="string">&quot;./store&quot;</span>);</span><br><span class="line"></span><br><span class="line">store.store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;值改变了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">store.store.dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(store.store.getState()); <span class="comment">//11</span></span><br></pre></td></tr></table></figure>
<p><strong>没想到本以为很复杂的东西，原理其实很简单。主要的还是编程的思想</strong></p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>js的内存机制、内存泄露</title>
    <url>/myBlog/2022/04/01/Js%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6%E3%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<h3 id="js-的内存机制、内存泄露"><a href="#js-的内存机制、内存泄露" class="headerlink" title="js 的内存机制、内存泄露"></a>js 的内存机制、内存泄露</h3><p><strong>面试被问到 Js 的内存机制，以为自己不会，其实就是问基础类型和引用类型的存储方式，栈和堆，很亏，记录一下</strong></p>
<h4 id="1、内存机制"><a href="#1、内存机制" class="headerlink" title="1、内存机制"></a>1、内存机制</h4><p>Js 的内存空间 分为栈和堆、还有池（一般归于堆中）。栈存储变量数字，字符等，堆存储复杂类型，对象数组等。池存储常量。</p>
<p>js 中的基础类型存储在栈中，闭包中除外。先进后出，后进先出，乒乓球盒子</p>
<p>引用类型存储在堆中。</p>
<h5 id="2、内存泄露"><a href="#2、内存泄露" class="headerlink" title="2、内存泄露"></a>2、内存泄露</h5><p>虽然 Js 有着垃圾回收机制，但是并不是随时都在执行的因为开销比较大。</p>
<p>所以日常开发中要注意代码的规范</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="comment">//obj 存在栈中 &#123; name: 1 &#125;存在堆中</span></span><br><span class="line"><span class="comment">//obj存的是&#123; name: 1 &#125;地址</span></span><br><span class="line"><span class="keyword">const</span> newObj = obj;</span><br><span class="line"><span class="comment">//newObj得到的其实是 &#123; name: 1 &#125;地址</span></span><br><span class="line"><span class="comment">//此时修改newObj，obj的值也会别修改，因为指向的同一个地址</span></span><br></pre></td></tr></table></figure>
<p>如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不声明变量直接使用</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//使用this,this指向window，因为在函数执行时判断this</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.a = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">//闭包,不及时清除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    a += <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时器没有清除一直触发</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p><strong>怎么去解决内存泄露</strong></p>
<p>写代码的过程中注意规范</p>
<p>ES6 有两个新的数据类型<code>weakMap</code>和<code>weakSet</code>。如果改类型的值不再使用，就会被自动回收。</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>css显示隐藏元素</title>
    <url>/myBlog/2022/04/01/css%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h3 id="css-显示隐藏元素"><a href="#css-显示隐藏元素" class="headerlink" title="css 显示隐藏元素"></a>css 显示隐藏元素</h3><p><strong>面试问到的,记录一下</strong></p>
<h4 id="1、display-none"><a href="#1、display-none" class="headerlink" title="1、display:none"></a>1、display:none</h4><p><strong>元素在页面不显示</strong></p>
<p><strong>但是在 dom 结构上能看到</strong></p>
<p><strong>触发回流和重绘</strong></p>
<h6 id="1、其余属性"><a href="#1、其余属性" class="headerlink" title="1、其余属性"></a>1、其余属性</h6><p>block: 块元素</p>
<p>inline: 行内元素（默认值）</p>
<p>inline-block：行内块元素</p>
<p>inherit：继承父元素的 display 属性</p>
<hr>
<h4 id="2、opacity：0"><a href="#2、opacity：0" class="headerlink" title="2、opacity：0"></a>2、opacity：0</h4><p><strong>透明度为 0</strong></p>
<p><strong>只是看不到，但是还存在，点击事件可以触发</strong></p>
<p><strong>会触发页面的重绘，不会触发重排</strong></p>
<hr>
<h4 id="3、visibility-hidden"><a href="#3、visibility-hidden" class="headerlink" title="3、visibility:hidden"></a>3、visibility:hidden</h4><p><strong>元素不可见，但是会占据空间</strong></p>
<p><strong>不会触发事件</strong></p>
<p><strong>会触发页面的重绘，不会触发重排</strong></p>
<h6 id="1、其余属性-1"><a href="#1、其余属性-1" class="headerlink" title="1、其余属性"></a>1、其余属性</h6><p>visible： 默认值，可见</p>
<p>collapse：用在 table 元素上，表现和<code>display:none</code>一致；用在其它元素上，表现和<code>visibility:hidden</code>一致</p>
<p>inherit： 继承父元素的 visibility 的属性</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>git撤销提交</title>
    <url>/myBlog/2022/04/01/%E6%92%A4%E9%94%80%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<p><strong>因为提交了错误的分支,记录一下后面使用</strong></p>
<h3 id="git-撤销提交"><a href="#git-撤销提交" class="headerlink" title="git 撤销提交"></a>git 撤销提交</h3><h5 id="1、git-log"><a href="#1、git-log" class="headerlink" title="1、git log"></a>1、git log</h5><p>git log 查看 commit 记录，记下自己要撤回的 commitId</p>
<p><strong>很重要因为 reset 后会删除提交记录，所以要把 commitId 记下来</strong></p>
<h5 id="2、git-reset-commitId"><a href="#2、git-reset-commitId" class="headerlink" title="2、git reset commitId"></a>2、git reset commitId</h5><p>撤销本地的提交</p>
<h5 id="3、-git-push-origin-“分支名称”-–force"><a href="#3、-git-push-origin-“分支名称”-–force" class="headerlink" title="3、 git push origin “分支名称” –force"></a>3、 git push origin “分支名称” –force</h5><p>本地覆盖仓库的代码</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟Dom</title>
    <url>/myBlog/2022/04/02/%E8%99%9A%E6%8B%9FDom/</url>
    <content><![CDATA[<h3 id="虚拟Dom"><a href="#虚拟Dom" class="headerlink" title="虚拟Dom"></a>虚拟Dom</h3><p><strong>一直以来都知道虚拟dom这个概念就是用代码来生成Dom，可以用diff算法</strong></p>
<p>今天自己来实现一下，如下</p>
<p>创建一个对象，包含元素的各种属性，我这里就写了标签名和文字。嵌套的加个个Child</p>
<p>然后循环数组创建元素插入到body中，如果有child就插入到父元素中。</p>
<p><strong>因为是一个数组，每次改变的时候就可以对比上次和本次dom数组</strong></p>
<p><strong>判断哪里变化了，变化了才修改这就是diff算法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> vDom = [</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          node: <span class="string">&quot;p&quot;</span>,</span></span><br><span class="line"><span class="javascript">          text: <span class="string">&quot;我是p标签&quot;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          node: <span class="string">&quot;div&quot;</span>,</span></span><br><span class="line"><span class="javascript">          text: <span class="string">&quot;我是div&quot;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          node: <span class="string">&quot;ul&quot;</span>,</span></span><br><span class="line"><span class="javascript">          text: <span class="string">&quot;我是ul&quot;</span>,</span></span><br><span class="line"><span class="javascript">          child: [&#123; <span class="attr">node</span>: <span class="string">&quot;td&quot;</span>, <span class="attr">text</span>: <span class="string">&quot;我是td&quot;</span> &#125;],</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ];</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tree = <span class="built_in">document</span>.body;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> showDom = <span class="function">(<span class="params">vDom, dom</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        vDom.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> node = <span class="built_in">document</span>.createElement(item.node);</span></span><br><span class="line">          node.innerHTML = item.text;</span><br><span class="line">          if (item.child) &#123;</span><br><span class="line">            showDom(item.child, node);</span><br><span class="line">          &#125;</span><br><span class="line">          dom.appendChild(node);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">      showDom(vDom, tree);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>页面中和dom元素显示如下：</strong></p>
<p><img src="https://s1.ax1x.com/2022/04/02/qIkXAf.png" alt="qIkXAf.png"></p>
<p><img src="https://s1.ax1x.com/2022/04/02/qIkLHP.png" alt="qIkLHP.png"></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>useState问题记录</title>
    <url>/myBlog/2022/04/28/useState%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="useState问题记录"><a href="#useState问题记录" class="headerlink" title="useState问题记录"></a><code>useState</code>问题记录</h3><p>遇到这样一个问题，在一个新增页面，需要通过表单项，使<code>table</code>的<code>columns</code>动态的增加一列减少一列。</p>
<p>我就把<code>columns</code>放在<code>useState</code>中，对<code>然后通过useEffect</code>对<code>columns</code>的数组进行<code>push</code>和<code>pop</code></p>
<p>因为<code>columns</code>的操作项中有打开新的<code>tab</code>页的功能，发现打开同一个<code>tab</code>页的时候不是覆盖，而是会出现多个相同的<code>activekey</code></p>
<p>一开始很莫名其妙，觉得出鬼了，别的页面也是一样的，没有问题，就这个页面有问题，一步步<code>debugger</code>找了半天的原因，原来是框架的<code>addTab</code>事件使用了<code>useState</code>拿到的那个<code>panes</code>一直是打开新增页面的<code>panes</code>的值。</p>
<p>代码如下：差不多就是这么个场景</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> addPage = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&quot;奖品名称&quot;</span>,</span><br><span class="line">      dataIndex: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&quot;操作&quot;</span>,</span><br><span class="line">      key: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">      render: <span class="function">(<span class="params">record</span>) =&gt;</span> (</span><br><span class="line">          &lt;a</span><br><span class="line">            onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              props.addTab(&#123;</span><br><span class="line">                initSetting: &#123;</span><br><span class="line">                  id: record.id,</span><br><span class="line">                &#125;,</span><br><span class="line">                path: <span class="string">&quot;/prize/add/detail&quot;</span>,</span><br><span class="line">                title: <span class="string">&quot;奖品详情&quot;</span>,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            详情</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">    <span class="keyword">const</span> priceColumn =  &#123;</span><br><span class="line">      title: <span class="string">&quot;价格&quot;</span>,</span><br><span class="line">      dataIndex: <span class="string">&quot;price&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> [columns,setColumns] = useState(columns)</span><br><span class="line">    </span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(props.addColumns===<span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            setColumns(<span class="function"><span class="params">prev</span>=&gt;</span>&#123;</span><br><span class="line">                prev.push(priceColumn)</span><br><span class="line">                <span class="keyword">return</span> [...prev]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(props.addColumns===<span class="string">&quot;2&quot;</span>)&#123;</span><br><span class="line">             setColumns(<span class="function"><span class="params">prev</span>=&gt;</span>&#123;</span><br><span class="line">                prev.pop()</span><br><span class="line">                <span class="keyword">return</span> [...prev]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;,[props.addColumns])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Table</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">dataSource</span>=<span class="string">&#123;props.value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>addTab</code>的方法如下：</p>
<p><code>panes</code>一直是之前的<code>panes</code>，导致<code>existedPane</code>一直为<code>undefined</code></p>
<p><code>useRef</code>一直获取到的是最新的，所以就一直往<code>panes</code>里加入相同的<code>tab</code>页</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AddTab = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//省略了一些代码.....</span></span><br><span class="line"> <span class="keyword">const</span> [panes, setPanes] = useState([]);</span><br><span class="line"> <span class="keyword">const</span> cachePanesRef = useRef(panes);</span><br><span class="line"> <span class="comment">//addtab后会调用的函数，就错在这里</span></span><br><span class="line"> <span class="keyword">const</span> handleTabAdd = <span class="function">(<span class="params">$route</span>) =&gt;</span> &#123;</span><br><span class="line">    setActivityPane($route.key);</span><br><span class="line">    <span class="keyword">const</span> existedPane = panes.find(<span class="function">(<span class="params">c</span>) =&gt;</span> c.key === $route.key);</span><br><span class="line">    <span class="keyword">const</span> currentPane = flatRoutes.find(<span class="function">(<span class="params">el</span>) =&gt;</span> el.key === $route.key);</span><br><span class="line">    <span class="keyword">if</span> (!existedPane) &#123;</span><br><span class="line">      setPanes([</span><br><span class="line">        ...cachePanesRef.current,</span><br><span class="line">        &#123;</span><br><span class="line">          key: currentPane.key,</span><br><span class="line">          path: currentPane.path,</span><br><span class="line">          C: currentPane.component,</span><br><span class="line">          name: $route.titleText || currentPane.name,</span><br><span class="line">          initSetting: $route?.initSetting,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略了一些代码.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这样就形成了闭包，传过去<code>panes</code>数组一直是第一次点击打开的那个。</p>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>reduxjs/toolkit使用</title>
    <url>/myBlog/2022/05/09/reduxjsToolkit%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="reduxjs-toolkit-使用"><a href="#reduxjs-toolkit-使用" class="headerlink" title="reduxjs/toolkit 使用"></a>reduxjs/toolkit 使用</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><p>要和<code>react-redux</code>一起使用</p>
<p><code>cnpm i react-redux @reduxjs/toolkit -D </code></p>
<h4 id="2、新建-redux-文件夹"><a href="#2、新建-redux-文件夹" class="headerlink" title="2、新建 redux 文件夹"></a>2、新建 redux 文件夹</h4><p>在下面新建<code>store.ts、slice.ts、hook.ts</code>三个文件</p>
<h5 id="store-ts"><a href="#store-ts" class="headerlink" title="store.ts"></a><code>store.ts</code></h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> stateSlice <span class="keyword">from</span> <span class="string">&quot;./slice&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> otherSlice <span class="keyword">from</span> <span class="string">&quot;./otherSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  <span class="comment">// 每个reducer代表一个模块的状态管理器</span></span><br><span class="line">  reducer: &#123;</span><br><span class="line">    state: stateSlice,</span><br><span class="line">    other: otherSlice,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RootState作用是返回store的方法getState的类型 function</span></span><br><span class="line"><span class="keyword">export</span> type RootState = ReturnType&lt;<span class="keyword">typeof</span> store.getState&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppDispatch 作用是拿到Store的dispatch方法的类型 function</span></span><br><span class="line"><span class="keyword">export</span> type AppDispatch = <span class="keyword">typeof</span> store.dispatch;</span><br></pre></td></tr></table></figure>
<h5 id="slice-ts"><a href="#slice-ts" class="headerlink" title="slice.ts"></a><code>slice.ts</code></h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice, createAsyncThunk, PayloadAction &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line">interface InitialState &#123;</span><br><span class="line">  count: number;</span><br><span class="line">  text?: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: InitialState = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  text: <span class="string">&quot;我是文字&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface PromiseNum &#123;</span><br><span class="line">  number: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise_one: <span class="built_in">Promise</span>&lt;PromiseNum&gt; = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res(&#123; <span class="attr">number</span>: <span class="number">10</span> &#125;);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步Action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getAsyncInfo = createAsyncThunk(<span class="string">&quot;getAsyncInfo&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> promise_one;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> stateSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">&quot;state&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    add: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.count += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    minus: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.count -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    change: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.text = <span class="string">&quot;我是改变了的文字&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    back: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.text = <span class="string">&quot;我是文字&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  extraReducers: <span class="function">(<span class="params">builder</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 进行请求阶段的一些操作</span></span><br><span class="line">    builder.addCase(getAsyncInfo.pending, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;进行中&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    builder.addCase(getAsyncInfo.fulfilled, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;action.payload: &quot;</span>, action.payload); <span class="comment">//&#123;number:&quot;10&quot;&#125;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;state: &quot;</span>, state.text); <span class="comment">//我是文字</span></span><br><span class="line">      state.count += action.payload.number;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    builder.addCase(getAsyncInfo.rejected, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; add, minus, change, back &#125; = stateSlice.actions;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> stateSlice.reducer;</span><br></pre></td></tr></table></figure>
<h5 id="hook-ts"><a href="#hook-ts" class="headerlink" title="hook.ts"></a>hook.ts</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TypedUseSelectorHook, useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> type &#123; RootState, AppDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use hook 节约每次引入type的工作</span></span><br><span class="line"><span class="comment">// useSelector: 节约配置RootState type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAppDispatch = <span class="function">() =&gt;</span> useDispatch&lt;AppDispatch&gt;();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAppSelector: TypedUseSelectorHook&lt;RootState&gt; = useSelector;</span><br></pre></td></tr></table></figure>
<h4 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h4><p>首先是在根页面，引入<code>store，Provider</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&quot;./reportWebVitals&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&quot;./redux/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>) <span class="keyword">as</span> HTMLElement);</span><br><span class="line">root.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">reportWebVitals();</span><br></pre></td></tr></table></figure>
<p>然后在对应页面中使用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallowEqual &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useAppDispatch, useAppSelector &#125; <span class="keyword">from</span> <span class="string">&quot;../redux/hook&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; add, minus, getAsyncInfo &#125; <span class="keyword">from</span> <span class="string">&quot;../redux/slice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> APage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;A渲染了&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; count &#125; = useAppSelector(<span class="function">(<span class="params">state: any</span>) =&gt;</span> (&#123; ...state.state &#125;), shallowEqual);</span><br><span class="line">  <span class="keyword">const</span> dispatch = useAppDispatch();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;我是Apage&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;我是count:&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          dispatch(add());</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        加<span class="number">1</span></span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          dispatch(minus());</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        减<span class="number">1</span></span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          dispatch(getAsyncInfo());</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        异步加<span class="number">10</span></span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>注意:同一个 slice 中的 state 只要改变了，那么只要使用该 slice 中数据的页面就会重新渲染。</strong></p>
<p><strong>使用其他 slice 中 state 的页面不受影响</strong></p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Echarts柱状极坐标风向玫瑰图的实现</title>
    <url>/myBlog/2022/05/19/echarts%E5%AE%9E%E7%8E%B0%E9%A3%8E%E5%90%91%E7%8E%AB%E7%91%B0%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="Echarts柱状极坐标风向玫瑰图的实现"><a href="#Echarts柱状极坐标风向玫瑰图的实现" class="headerlink" title="Echarts柱状极坐标风向玫瑰图的实现"></a>Echarts柱状极坐标风向玫瑰图的实现</h2><h3 id="echarts代码"><a href="#echarts代码" class="headerlink" title="echarts代码"></a>echarts代码</h3><p>本来看到玫瑰图，就看到了echarts示例中饼图的南丁格尔玫瑰图。</p>
<p>发现不太像。后来发现是柱状图极坐标系堆叠图。</p>
<p>图例是自己实现的，因为是绑定到单个数据上。</p>
<p>eharts的配置项真的太难了。找的很头疼，实现的也很头疼。</p>
<p>效果如下：</p>
<p><img src="https://s1.ax1x.com/2022/05/19/OHzGA1.png" alt="OHzGA1.png"></p>
<p><img src="https://s1.ax1x.com/2022/05/19/OHxvkt.png" alt="OHxvkt.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * @Author: shimmer</span><br><span class="line"> * @Date: 2022-05-11 17:09:11</span><br><span class="line"> * @LastEditors: shimmer</span><br><span class="line"> * @LastEditTime: 2022-05-19 13:22:53</span><br><span class="line"> * @Description:</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">import React, &#123;FC, useEffect, useState&#125; from &#39;react&#39;;</span><br><span class="line">import ReactECharts from &#39;echarts-for-react&#39;;</span><br><span class="line">import styles from &#39;..&#x2F;styles.module.scss&#39;;</span><br><span class="line">import &#123;color, pathArr&#125; from &#39;..&#x2F;constant&#39;;</span><br><span class="line"></span><br><span class="line">interface Title &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  flag: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const EchartsPageB: FC&lt;any&gt; &#x3D; (&#123;picData&#125;) &#x3D;&gt; &#123;</span><br><span class="line">  const [titleArr, setTitleArr] &#x3D; useState&lt;Title[]&gt;([]);</span><br><span class="line">  const [echartsData, setEchartsData] &#x3D; useState&lt;any[]&gt;([]);</span><br><span class="line">  const [page, setPage] &#x3D; useState&lt;number&gt;(1);</span><br><span class="line">  const [currentPage, setCurrentPage] &#x3D; useState&lt;number&gt;(1);</span><br><span class="line"></span><br><span class="line">  useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    setEchartsData(picData.series);</span><br><span class="line">    const count &#x3D; picData.series.length % 12;</span><br><span class="line">    if (count &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">      setPage(picData.series.length &#x2F; 12);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      const str &#x3D; String(picData.series.length &#x2F; 12);</span><br><span class="line">      setPage(Number(parseInt(str, 10)) + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    setTitleArr(picData.series.map((item: Title) &#x3D;&gt; (&#123;title: item.title, flag: 1&#125;)));</span><br><span class="line">  &#125;, [picData]);</span><br><span class="line"></span><br><span class="line">  const option &#x3D; &#123;</span><br><span class="line">    grid: &#123;</span><br><span class="line">      left: 50,</span><br><span class="line">      right: 50,</span><br><span class="line">      bottom: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">    angleAxis: &#123;</span><br><span class="line">      type: &#39;category&#39;,</span><br><span class="line">      axisTick: false,</span><br><span class="line">      boundaryGap: false,</span><br><span class="line">      splitLine: &#123;</span><br><span class="line">        show: true,</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: &#39;#8d979d&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;color: &#39;#8d979d&#39;&#125;,</span><br><span class="line">      data: pathArr,</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#39;item&#39;,</span><br><span class="line">      position(pos: number[], params: any, dom: any, rect: any, size: any) &#123;</span><br><span class="line">        &#x2F;&#x2F; 鼠标在左侧时 tooltip 显示到右侧，鼠标在右侧时 tooltip 显示到左侧。</span><br><span class="line">        interface Obj &#123;</span><br><span class="line">          left: string | number;</span><br><span class="line">          top: number | string;</span><br><span class="line">          bottom: number | string;</span><br><span class="line">        &#125;</span><br><span class="line">        const obj: Obj &#x3D; &#123;left: &#39;&#39;, top: &#39;&#39;, bottom: &#39;&#39;&#125;;</span><br><span class="line">        const count: boolean &#x3D; pos[1] &lt; size.viewSize[1] &#x2F; 2;</span><br><span class="line">        if (count) &#123;</span><br><span class="line">          obj.bottom &#x3D; 10;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          obj.top &#x3D; 10;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.left &#x3D; pos[0] &lt; size.viewSize[0] &#x2F; 2 ? pos[0] : pos[0] - size.contentSize[0];</span><br><span class="line">        return obj;</span><br><span class="line">      &#125;,</span><br><span class="line">      backgroundColor: &#39;rgba(1,9,13,0.7)&#39;,</span><br><span class="line">      borderWidth: 1,</span><br><span class="line">      borderColor: &#39;#2E3C44&#39;,</span><br><span class="line">      formatter: (params: any) &#x3D;&gt; &#123;</span><br><span class="line">        const data &#x3D; picData.series[params.dataIndex].tips[0];</span><br><span class="line">        const infoHtml &#x3D; &#96;&lt;div style&#x3D;&quot;width:250px;padding:0;&quot;&gt;</span><br><span class="line">            &lt;div style&#x3D;&quot;color:white;padding:10px 9px 10px 9px;font-size:16px;font-weight:bold&quot;&gt;风向玫瑰图&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div  class&#x3D;$&#123;styles.tooltipHr&#125;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;$&#123;styles.styleA&#125;&gt;</span><br><span class="line">              &lt;span class&#x3D;$&#123;styles.styleE&#125;&gt;风向:&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;div class&#x3D;$&#123;styles.styleB&#125;&gt;</span><br><span class="line">                &lt;span class&#x3D;$&#123;styles.styleC&#125;&gt;$&#123;data[0].path&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;$&#123;styles.styleD&#125;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;$&#123;styles.styleA&#125;&gt;</span><br><span class="line">              &lt;span class&#x3D;$&#123;styles.styleE&#125;&gt;风速区间:&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;div class&#x3D;$&#123;styles.styleB&#125;&gt;</span><br><span class="line">                &lt;span class&#x3D;$&#123;styles.styleC&#125;&gt;$&#123;data[2].value&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;$&#123;styles.styleD&#125;&gt;m&#x2F;s&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;$&#123;styles.styleA&#125;&gt;</span><br><span class="line">              &lt;span class&#x3D;$&#123;styles.styleE&#125;&gt;频次:&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;div class&#x3D;$&#123;styles.styleB&#125;&gt;</span><br><span class="line">               &lt;span class&#x3D;$&#123;styles.styleC&#125;&gt;$&#123;data[0].value&#125;&lt;&#x2F;span&gt;</span><br><span class="line">               &lt;span class&#x3D;$&#123;styles.styleD&#125;&gt;次&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;  </span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;$&#123;styles.styleA&#125;&gt;</span><br><span class="line">              &lt;span class&#x3D;$&#123;styles.styleE&#125;&gt;频次占比:&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;div class&#x3D;$&#123;styles.styleB&#125;&gt;</span><br><span class="line">               &lt;span class&#x3D;$&#123;styles.styleC&#125;&gt;$&#123;data[3].value&#125;&lt;&#x2F;span&gt;</span><br><span class="line">               &lt;span class&#x3D;$&#123;styles.styleD&#125;&gt;%&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;&#x2F;div&gt; </span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">           </span><br><span class="line">          &lt;&#x2F;div&gt;&#96;;</span><br><span class="line"></span><br><span class="line">        return infoHtml;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    polar: &#123;</span><br><span class="line">      radius: &#39;80%&#39;,</span><br><span class="line">      center: [&#39;42%&#39;, &#39;50%&#39;],</span><br><span class="line">    &#125;,</span><br><span class="line">    radiusAxis: &#123;&#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: &#39;bar&#39;,</span><br><span class="line">        data: echartsData.map((item: any) &#x3D;&gt; &#123;</span><br><span class="line">          const pathIndex &#x3D; pathArr.findIndex((k) &#x3D;&gt; k &#x3D;&#x3D;&#x3D; item.tips[0][0].path);</span><br><span class="line">          const newValue &#x3D; item.values[0];</span><br><span class="line">          const dataArr &#x3D; [newValue, pathIndex];</span><br><span class="line">          return dataArr;</span><br><span class="line">        &#125;),</span><br><span class="line">        coordinateSystem: &#39;polar&#39;,</span><br><span class="line">        colorBy: &#39;data&#39;,</span><br><span class="line">        stack: &#39;path&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    color,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const changeLegend &#x3D; (item: Title, index: number) &#x3D;&gt; &#123;</span><br><span class="line">    if (item.flag &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">      const newTitleArr &#x3D; titleArr;</span><br><span class="line">      newTitleArr[index].flag &#x3D; 0;</span><br><span class="line">      setTitleArr(newTitleArr);</span><br><span class="line"></span><br><span class="line">      const newArr &#x3D; echartsData.map((k: any, j: number) &#x3D;&gt; &#123;</span><br><span class="line">        const obj &#x3D; &#123;...k&#125;;</span><br><span class="line">        if (index &#x3D;&#x3D;&#x3D; j) &#123;</span><br><span class="line">          obj.values &#x3D; [0];</span><br><span class="line">        &#125;</span><br><span class="line">        return obj;</span><br><span class="line">      &#125;);</span><br><span class="line">      setEchartsData(Object.assign([...newArr]));</span><br><span class="line">    &#125; else if (item.flag &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">      const newTitleArr &#x3D; titleArr;</span><br><span class="line">      newTitleArr[index].flag &#x3D; 1;</span><br><span class="line">      setTitleArr(newTitleArr);</span><br><span class="line">      const arr &#x3D; picData.series.filter((k: any) &#x3D;&gt; k.title &#x3D;&#x3D;&#x3D; item.title);</span><br><span class="line">      const newArr &#x3D; echartsData.map((x: any, j: number) &#x3D;&gt; &#123;</span><br><span class="line">        const obj &#x3D; &#123;...x&#125;;</span><br><span class="line">        if (index &#x3D;&#x3D;&#x3D; j) &#123;</span><br><span class="line">          obj.values &#x3D; arr[0].values;</span><br><span class="line">        &#125;</span><br><span class="line">        return obj;</span><br><span class="line">      &#125;);</span><br><span class="line">      setEchartsData(Object.assign([...newArr]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&#123;styles.windRose&#125;&gt;</span><br><span class="line">      &lt;div className&#x3D;&#123;styles.title&#125;&gt;</span><br><span class="line">        &lt;span className&#x3D;&#123;styles.dot&#125; &#x2F;&gt;</span><br><span class="line">        &lt;span className&#x3D;&#123;styles.stationName&#125;&gt;&#123;picData.title&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;ReactECharts option&#x3D;&#123;option&#125; style&#x3D;&#123;&#123;height: &#39;400px&#39;&#125;&#125; &#x2F;&gt;</span><br><span class="line">      &lt;div className&#x3D;&#123;styles.legend&#125;&gt;</span><br><span class="line">        &#123;titleArr.map((item: Title, index: number) &#x3D;&gt; &#123;</span><br><span class="line">          if (index + 1 &gt; (currentPage - 1) * 12 &amp;&amp; index + 1 &lt; currentPage * 12) &#123;</span><br><span class="line">            return (</span><br><span class="line">              &lt;div className&#x3D;&#123;styles.legendItem&#125; key&#x3D;&#123;item.title&#125;&gt;</span><br><span class="line">                &lt;span</span><br><span class="line">                  className&#x3D;&#123;styles.legendIcon&#125;</span><br><span class="line">                  style&#x3D;&#123;&#123;background: item.flag ? color[index] : &#39;#6c7379&#39;&#125;&#125;</span><br><span class="line">                  onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">                    changeLegend(item, index);</span><br><span class="line">                  &#125;&#125;</span><br><span class="line">                &#x2F;&gt;</span><br><span class="line">                &lt;span className&#x3D;&#123;styles.legendName&#125;&gt;&#123;item.title&#125;&lt;&#x2F;span&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">          return &#39;&#39;;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">        &lt;div className&#x3D;&#123;styles.changePage&#125;&gt;</span><br><span class="line">          &lt;span</span><br><span class="line">            className&#x3D;&#123;styles.changePageA&#125;</span><br><span class="line">            onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">              if (currentPage &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                return;</span><br><span class="line">              &#125;</span><br><span class="line">              setCurrentPage(currentPage - 1);</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line">            &#123;&#39;&lt;&#39;&#125;</span><br><span class="line">          &lt;&#x2F;span&gt;</span><br><span class="line">          &lt;span className&#x3D;&#123;styles.changePageB&#125;&gt;&#123;currentPage&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;span className&#x3D;&#123;styles.changePageC&#125;&gt;&#123;&#96;&#x2F; $&#123;page&#125;&#96;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;span</span><br><span class="line">            className&#x3D;&#123;styles.changePageD&#125;</span><br><span class="line">            onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">              if (currentPage &#x3D;&#x3D;&#x3D; page) &#123;</span><br><span class="line">                return;</span><br><span class="line">              &#125;</span><br><span class="line">              setCurrentPage(currentPage + 1);</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line">            &#123;&#39;&gt;&#39;&#125;</span><br><span class="line">          &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default EchartsPageB;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="样式代码"><a href="#样式代码" class="headerlink" title="样式代码"></a>样式代码</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">  <span class="selector-class">.windRose</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="selector-class">.title</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#0a445a</span>;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="selector-class">.dot</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#097488</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.stationName</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.legend</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">110px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">      <span class="selector-class">.legendItem</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">110px</span>;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">7px</span>;</span><br><span class="line">        <span class="selector-class">.legendIcon</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">          <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.legendName</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.changePage</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#0a445a</span>;</span><br><span class="line">        <span class="selector-class">.changePageA</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">          <span class="attribute">text-align</span>: center;</span><br><span class="line">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00e4ff</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#00e4ff</span>;</span><br><span class="line">          <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.changePageB</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">          <span class="attribute">text-align</span>: center;</span><br><span class="line">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00e4ff</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.changePageC</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.changePageD</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">          <span class="attribute">text-align</span>: center;</span><br><span class="line">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00e4ff</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#00e4ff</span>;</span><br><span class="line">          <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.echartsBox</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    <span class="attribute">height</span>: calc(<span class="number">100%</span> - <span class="number">48px</span>);</span><br><span class="line">    <span class="selector-class">.windFrqBox</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.windRoseBox</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltipHr</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#4c555a</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.styleA</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">9px</span> <span class="number">0</span> <span class="number">9px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.styleE</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.styleB</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.styleC</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00e4ff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.styleD</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#6c7379</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
</search>
