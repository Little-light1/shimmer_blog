<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shimmer&#39;s Blog</title>
  
  <subtitle>黑暗中寻光的人</subtitle>
  <link href="https://gitee.com/shimmer612/shimmer-blog/atom.xml" rel="self"/>
  
  <link href="https://gitee.com/shimmer612/shimmer-blog/"/>
  <updated>2021-03-04T01:39:59.558Z</updated>
  <id>https://gitee.com/shimmer612/shimmer-blog/</id>
  
  <author>
    <name>Shimmer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>扩展运算符(...)的复习</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/03/04/2021-03-04-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6(...)%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/03/04/2021-03-04-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6(...)%E7%9A%84%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-03-03T16:00:00.000Z</published>
    <updated>2021-03-04T01:39:59.558Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近看项目代码，经常看到函数里运用扩展运算符。总是模模糊糊的，看明白又好像没有明白的感觉。</strong></p><p><strong>像下面这样</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> setCacheComponents([</span><br><span class="line">        ...cacheComponentsClone,</span><br><span class="line">        &#123;</span><br><span class="line">          ...currentPane,</span><br><span class="line">          name: name || obj.item.props.children[<span class="number">1</span>] <span class="comment">// 如果调用addtab时传入了name则使用此name</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]);</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------</span></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          tableData: [</span><br><span class="line">            ...state.tableData,</span><br><span class="line">            &#123;</span><br><span class="line">              params: &#123;</span><br><span class="line">                ...payload.params,</span><br><span class="line">                page: payload.page || <span class="number">1</span>,</span><br><span class="line">                pageSize: payload.pageSize || <span class="number">10</span></span><br><span class="line">              &#125;,</span><br><span class="line">              tableKey: payload.tableKey,</span><br><span class="line">              loading: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>就整理了一下扩展运算符的用法。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    sex: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    hobby:&#123;</span><br><span class="line">        play: <span class="string">&quot;ball&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newObj);<span class="comment">//&#123; name: &#x27;张三&#x27;, age: &#x27;20&#x27;, sex: &#x27;男&#x27;, hobby: &#123; play: &#x27;ball&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = [...arr,...arr1]</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转换成数组</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abcdefg&#x27;</span> </span><br><span class="line"><span class="keyword">const</span> newStr = [...str]</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;,&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值   数组对象都可以</span></span><br><span class="line"><span class="keyword">const</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> bb = [...aa,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><p><strong>项目里常用的就是在函数里，用来解构赋值的比较多</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;最近看项目代码，经常看到函数里运用扩展运算符。总是模模糊糊的，看明白又好像没有明白的感觉。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;像下面这样&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;ta</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>一些小记录</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/03/03/%E5%B0%8F%E8%AE%B0/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/03/03/%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-03-02T16:00:00.000Z</published>
    <updated>2021-03-03T08:17:17.395Z</updated>
    
    <content type="html"><![CDATA[<p><strong>开发中写样式less中，最外层取一个不易重的类名，其余子元素类名写在里面</strong></p><p><strong>尽量不要写到margin负值</strong></p><p><strong>样式遵循设计图</strong></p><p><strong>图片名称起相关英文名</strong></p><p><strong>flex布局多使用space-around做分割，除非必须用space-between</strong></p><p><strong>类名过长用xx-xx这样写</strong></p><p><strong>页面起名大驼峰比如<code>ChargeManage</code></strong></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;开发中写样式less中，最外层取一个不易重的类名，其余子元素类名写在里面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尽量不要写到margin负值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样式遵循设计图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    
    <category term="tips" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>React项目(UmiJS)中使用高德地图</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/03/02/2021-03-02-React%E9%A1%B9%E7%9B%AE(UmiJS)%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/03/02/2021-03-02-React%E9%A1%B9%E7%9B%AE(UmiJS)%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/</id>
    <published>2021-03-01T16:00:00.000Z</published>
    <updated>2021-03-02T01:21:36.707Z</updated>
    
    <content type="html"><![CDATA[<h5 id="React-AMap"><a href="#React-AMap" class="headerlink" title="React AMap"></a>React AMap</h5><p>这是一个基于 React 封装的高德地图组件.</p><p><strong>文档地址</strong></p><p><code>https://uiw.gitee.io/react-amap/#/</code></p><h6 id="01、安装"><a href="#01、安装" class="headerlink" title="01、安装"></a>01、安装</h6><p><code>npm install @uiw/react-amap --save</code></p><h6 id="02、使用"><a href="#02、使用" class="headerlink" title="02、使用"></a>02、使用</h6><p>在文档左侧找到需要使用的例子。在右侧直接复制对应代码。按需进行修改。</p><h6 id="03、例子（贝塞尔曲线的使用）"><a href="#03、例子（贝塞尔曲线的使用）" class="headerlink" title="03、例子（贝塞尔曲线的使用）"></a>03、例子（贝塞尔曲线的使用）</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, APILoader, BezierCurve &#125; <span class="keyword">from</span> <span class="string">&quot;@uiw/react-amap&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CarLine = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [show] = useState(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> path = [<span class="comment">// 每个弧线段有两种描述方式</span></span><br><span class="line">        [<span class="number">116.39</span>, <span class="number">39.91</span>, <span class="number">116.37</span>, <span class="number">39.91</span>],<span class="comment">// 起点</span></span><br><span class="line">        <span class="comment">// 第一段弧线</span></span><br><span class="line">        [<span class="number">116.380298</span>, <span class="number">39.907771</span>, <span class="number">116.38</span>, <span class="number">39.90</span>],<span class="comment">// 控制点，途经点</span></span><br><span class="line">        <span class="comment">// 第二段弧线</span></span><br><span class="line">        [<span class="number">116.385298</span>, <span class="number">39.907771</span>, <span class="number">116.40</span>, <span class="number">39.90</span>],<span class="comment">// 控制点，途经点// 弧线段有两种描述方式1</span></span><br><span class="line">        <span class="comment">// 第三段弧线</span></span><br><span class="line">        [<span class="comment">// 弧线段有两种描述方式2</span></span><br><span class="line">            [<span class="number">116.392872</span>, <span class="number">39.887391</span>],<span class="comment">// 控制点</span></span><br><span class="line">            [<span class="number">116.40772</span>, <span class="number">39.909252</span>],<span class="comment">// 控制点</span></span><br><span class="line">            [<span class="number">116.41</span>, <span class="number">39.89</span>]<span class="comment">// 途经点</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 第四段弧线</span></span><br><span class="line">        [<span class="number">116.423857</span>, <span class="number">39.889498</span>, <span class="number">116.422312</span>, <span class="number">39.899639</span>, <span class="number">116.425273</span>, <span class="number">39.902273</span>]</span><br><span class="line">        <span class="comment">// 控制点，控制点，途经点，每段最多两个控制点</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleParams = <span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> values</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;APILoader akay=<span class="string">&quot;a7a90e05a37d3f6bf76d4a9032fc9129&quot;</span>&gt;</span><br><span class="line">                &lt;div style=&#123;&#123; <span class="attr">width</span>: <span class="string">&quot;100%&quot;</span>, <span class="attr">height</span>: <span class="string">&quot;600px&quot;</span> &#125;&#125; &gt;</span><br><span class="line">                    &lt;<span class="built_in">Map</span> zoom=&#123;<span class="number">14</span>&#125; center=&#123;[<span class="number">116.397637</span>, <span class="number">39.900001</span>]&#125;&gt;</span><br><span class="line">                        &lt;BezierCurve</span><br><span class="line">                            visiable=&#123;show&#125;</span><br><span class="line">                            path=&#123;path&#125;</span><br><span class="line">                            isOutline=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                            outlineColor=<span class="string">&quot;&quot;</span></span><br><span class="line">                            borderWeight=&#123;<span class="number">3</span>&#125;</span><br><span class="line">                            strokeColor=<span class="string">&quot;red&quot;</span></span><br><span class="line">                            strokeOpacity=&#123;<span class="number">1</span>&#125;</span><br><span class="line">                            strokeWeight=&#123;<span class="number">6</span>&#125;</span><br><span class="line">                            <span class="comment">// 线样式还支持 &#x27;dashed&#x27;</span></span><br><span class="line">                            strokeStyle=<span class="string">&quot;solid&quot;</span></span><br><span class="line">                            <span class="comment">// strokeStyle是dashed时有效</span></span><br><span class="line">                            strokeDasharray=&#123;[<span class="number">10</span>, <span class="number">10</span>]&#125;</span><br><span class="line">                            lineJoin=<span class="string">&quot;round&quot;</span></span><br><span class="line">                            lineCap=<span class="string">&quot;round&quot;</span></span><br><span class="line">                            zIndex=&#123;<span class="number">50</span>&#125;</span><br><span class="line">                        /&gt;</span><br><span class="line">                    &lt;/<span class="built_in">Map</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/APILoader&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CarLine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/shimmer612/mypicturehouse/raw/master/myPicture/Snipaste_2021-03-02_09-02-09.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;React-AMap&quot;&gt;&lt;a href=&quot;#React-AMap&quot; class=&quot;headerlink&quot; title=&quot;React AMap&quot;&gt;&lt;/a&gt;React AMap&lt;/h5&gt;&lt;p&gt;这是一个基于 React 封装的高德地图组件.&lt;/p&gt;
&lt;p&gt;&lt;strong</summary>
      
    
    
    
    
    <category term="React UmiJS" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/React-UmiJS/"/>
    
  </entry>
  
  <entry>
    <title>对Ant-Design Table组件进行封装</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/02/26/2021-02-26-%E5%AF%B9Ant-Design-Table%E7%BB%84%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/02/26/2021-02-26-%E5%AF%B9Ant-Design-Table%E7%BB%84%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85/</id>
    <published>2021-02-25T16:00:00.000Z</published>
    <updated>2021-02-26T07:59:39.891Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Table组件封装页面,</strong></p><p><strong>dataSource通过Modal中的获取的数据传过来，主要对columns进行封装。把一些常用的属性给暴露出来。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Spin, Table, Space, Popconfirm, Tooltip &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> CommonPagination <span class="keyword">from</span> <span class="string">&quot;@/components/CommonPagination&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; formatNum &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/utils&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchForm = <span class="function">(<span class="params">&#123; tableConfig, tableData &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tableItem = tableData.find(<span class="function">(<span class="params">item</span>) =&gt;</span> item.tableKey === tableConfig.tableKey) || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123; loading &#125; = tableItem; <span class="comment">// 根据tablekey取到对应请求的loading状态</span></span><br><span class="line">  <span class="keyword">const</span> dataSource = tableItem.data || [];</span><br><span class="line">  <span class="keyword">const</span> columns = tableConfig.columns.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.actionMap) &#123;</span><br><span class="line">      item = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          <span class="comment">// 生成action列表</span></span><br><span class="line">          <span class="keyword">const</span> actionList = (item.actionMap || []).map(<span class="function">(<span class="params">action, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;href&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> (action.render) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                    if (action.onClick) &#123;</span></span><br><span class="line"><span class="xml">                      action.onClick(res)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                  &#125;&#125;&gt;&#123;action.render(res)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                  if (action.onClick) &#123;</span></span><br><span class="line"><span class="xml">                    action.onClick(res)</span></span><br><span class="line"><span class="xml">                  &#125;</span></span><br><span class="line"><span class="xml">                &#125;&#125;&gt;&#123;action.text&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;confirm&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="xml">&lt;Popconfirm</span></span><br><span class="line"><span class="xml">                  key=&#123;index&#125;</span></span><br><span class="line"><span class="xml">                  title=&#123;<span class="tag">&lt;<span class="name">div</span>&gt;</span>确认要执行&#123;action.text ? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;action.text&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> : action.render(res)&#125;操作吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">                  onConfirm=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="xml">                    if (action.onConfirm) &#123;</span></span><br><span class="line"><span class="xml">                      action.onConfirm(res)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                  &#125;&#125;</span></span><br><span class="line"><span class="xml">                  onCancel=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="xml">                    if (action.onCancel) &#123;</span></span><br><span class="line"><span class="xml">                      action.onCancel(res)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                  &#125;&#125;</span></span><br><span class="line"><span class="xml">                  okText=&quot;确认&quot;</span></span><br><span class="line"><span class="xml">                  cancelText=&quot;取消&quot;</span></span><br><span class="line"><span class="xml">                &gt;</span></span><br><span class="line"><span class="xml">                  &#123;action.text ? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;action.text&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> : action.render(res)&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Popconfirm</span>&gt;</span></span></span><br><span class="line">              <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>未知类型，请检查<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Space</span> <span class="attr">size</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">              actionList.map(action =&gt; action)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.numFormat) &#123;</span><br><span class="line">      item = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> formatNum(res, ...item.numFormat);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.timeFormat) &#123;</span><br><span class="line">      item = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> res ? moment(res).format(item.timeFormat) : <span class="string">&quot;--&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.tipCol) &#123;</span><br><span class="line">      <span class="keyword">const</span> render = item.render;</span><br><span class="line">      item = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        ellipsis: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.tipCol === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (item.tipCol === <span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;Tooltip  placement=<span class="string">&quot;topLeft&quot;</span> title=&#123;render ? render(res) : res&#125;&gt;</span><br><span class="line">                &lt;span&gt;&#123;render ? render(res) : res&#125;&lt;/span&gt;</span><br><span class="line">              &lt;/Tooltip&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Spin spinning=&#123;loading === <span class="literal">true</span>&#125;&gt;</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">marginTop</span>: <span class="number">24</span>, <span class="attr">padding</span>: <span class="number">24</span>, <span class="attr">background</span>: <span class="string">&quot;#fff&quot;</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;Table</span><br><span class="line">          pagination=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          columns=&#123;columns&#125;</span><br><span class="line">          dataSource=&#123;dataSource || []&#125;</span><br><span class="line">          scroll=&#123;&#123; <span class="attr">x</span>: <span class="string">&quot;max-content&quot;</span> &#125;&#125;</span><br><span class="line">          bordered</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;CommonPagination tableKey=&#123;tableConfig.tableKey&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Spin&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">&#123; <span class="built_in">global</span> &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  tableData: <span class="built_in">global</span>.tableData || [],</span><br><span class="line">&#125;))(SearchForm);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分页封装页面</strong></p><p><strong>根据modal传过来的数据进行前台分页。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Pagination &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  display: <span class="string">&quot;flex&quot;</span>,</span><br><span class="line">  justifyContent: <span class="string">&quot;flex-end&quot;</span>,</span><br><span class="line">  alignItems: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">  backgroundColor: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">  height: <span class="string">&quot;60px&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> CommonPagination = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch, tableData, tableKey &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">page</span>: pageData, params &#125; = tableData.find(<span class="function"><span class="params">item</span> =&gt;</span> item.tableKey === tableKey) || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 分页变化</span></span><br><span class="line">  <span class="keyword">const</span> pageChange = <span class="function">(<span class="params">page</span>) =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">&quot;global/getTableData&quot;</span>,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        tableKey,</span><br><span class="line">        params: &#123;</span><br><span class="line">          page,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div style=&#123;styles&#125;&gt;</span><br><span class="line">      &#123;pageData &amp;&amp; (</span><br><span class="line">        &lt;Pagination</span><br><span class="line">          total=&#123;pageData.total&#125;</span><br><span class="line">          showTotal=&#123;<span class="function">() =&gt;</span> <span class="string">`共计 <span class="subst">$&#123;pageData.total&#125;</span> 个`</span>&#125;</span><br><span class="line">          defaultCurrent=&#123;<span class="number">1</span>&#125;</span><br><span class="line">          showSizeChanger=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          onChange=&#123;pageChange&#125;</span><br><span class="line">          current=&#123;params.page&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">&#123;<span class="built_in">global</span> &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  tableData: <span class="built_in">global</span>.tableData || [],</span><br><span class="line">&#125;))(CommonPagination);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><p><strong>### CommonTable（通用表格）</strong></p><p><strong>必传参数tableConfig</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tableConfig=&#123;</span><br><span class="line"></span><br><span class="line">  tableKey:<span class="string">&#x27;tableKey&#x27;</span>, <span class="comment">// 必传</span></span><br><span class="line"></span><br><span class="line">  columns:[ <span class="comment">// 必传</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&quot;Age&quot;</span>,</span><br><span class="line"></span><br><span class="line">      key: <span class="string">&quot;age&quot;</span>,</span><br><span class="line"></span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line">      numFormat:[<span class="number">1</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      title: <span class="string">&quot;Time&quot;</span>,</span><br><span class="line"></span><br><span class="line">      width: <span class="number">150</span>,</span><br><span class="line"></span><br><span class="line">      key: <span class="string">&quot;time&quot;</span>,</span><br><span class="line"></span><br><span class="line">     timeFormat: <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span></span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      title: <span class="string">&quot;Action&quot;</span>,</span><br><span class="line"></span><br><span class="line">      width: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">      actionMap:[</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">          type: <span class="string">&quot;href&quot;</span>,</span><br><span class="line"></span><br><span class="line">          text: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">          <span class="function"><span class="title">onClick</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;123&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;res.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">          type: <span class="string">&quot;confirm&quot;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">onConfirm</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;onOk&quot;</span>);</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">onCancel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;onCancel&quot;</span>);</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          text: <span class="string">&quot;删除&quot;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;res.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  ], </span><br><span class="line"></span><br><span class="line">  config:&#123;&#125; <span class="comment">// table的配置，与官方文档一致</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;CommonTable tableConfig=&#123;tableConfig&#125; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中<code>columns</code>与官方文档配置一致，当有如下参数时会进行特殊处理：</p><ul><li><p><strong>tipCol (文字过长省略,Tooltip上方提示)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">columns: [</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">   title: &quot;Address&quot;,</span><br><span class="line"></span><br><span class="line">   dataIndex: &quot;address&quot;,</span><br><span class="line"></span><br><span class="line">   width: 150,</span><br><span class="line"></span><br><span class="line">   key: &quot;address&quot;,</span><br><span class="line"></span><br><span class="line">   tipCol: true,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>true</code>时开启<code>false</code>关闭</p></li></ul><ul><li><p><strong>numFormat（时间格式化）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">columns: [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    title: <span class="string">&quot;Age&quot;</span>,</span><br><span class="line"></span><br><span class="line">    key: <span class="string">&quot;age&quot;</span>,</span><br><span class="line"></span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line">    numFormat:[<span class="number">1</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p> <code>numFormat[保留几位小数，是否进行千分位格式化]</code>，<code>numFormat[2,true]</code>效果<code>1234.567=&gt;1,234.57</code></p><ul><li><p><strong>timeFormat（日期格式化）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">columns: [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    title: <span class="string">&quot;Time&quot;</span>,</span><br><span class="line"></span><br><span class="line">    width: <span class="number">150</span>,</span><br><span class="line"></span><br><span class="line">    key: <span class="string">&quot;time&quot;</span>,</span><br><span class="line"></span><br><span class="line">    timeFormat: <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>timeFormat:时间戳格式</code>，格式化为指定格式</p></li><li><p>actionMap（操作栏）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   title: <span class="string">&quot;Action&quot;</span>,</span><br><span class="line"></span><br><span class="line">   width: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">    actionMap:[</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        type: <span class="string">&quot;href&quot;</span>,</span><br><span class="line"></span><br><span class="line">        text: <span class="string">&quot;123&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">onClick</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;123&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;res.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        type: <span class="string">&quot;confirm&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">onConfirm</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;onOk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">onCancel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;onCancel&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        text: <span class="string">&quot;删除&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;res.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p> <code>actionMap的type</code>用于决定操作类型，具体如下：</p><ul><li><p><code>href</code>，text和render至少有一个，render优先级高于text。当只有text参数时，生成结果为<code>&lt;a&gt;&#123;text&#125;&lt;/a&gt;</code>。当有render时，生成结果为render的返回值。</p></li><li><p><code>confirm</code>，用于操作前的确认。render与text的关系与<code>href</code>一致。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Table组件封装页面,&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dataSource通过Modal中的获取的数据传过来，主要对columns进行封装。把一些常用的属性给暴露出来。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    
    <category term="AntDesign - React" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/AntDesign-React/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0初探</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/02/26/vue3%E7%AC%94%E8%AE%B0/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/02/26/vue3%E7%AC%94%E8%AE%B0/</id>
    <published>2021-02-25T16:00:00.000Z</published>
    <updated>2021-02-26T09:05:15.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="✨-官网地址"><a href="#✨-官网地址" class="headerlink" title="✨ 官网地址"></a>✨ 官网地址</h2><p>官网文档：<a href="https://v3.cn.vuejs.org/">https://v3.cn.vuejs.org/</a></p><h2 id="一、vue3安装与项目创建【掌握】"><a href="#一、vue3安装与项目创建【掌握】" class="headerlink" title="一、vue3安装与项目创建【掌握】"></a>一、vue3安装与项目创建【掌握】</h2><p>参考地址：<a href="https://www.vue3js.cn/docs/zh/guide/installation.html">https://www.vue3js.cn/docs/zh/guide/installation.html</a></p><h3 id="准备工作：升级脚手架"><a href="#准备工作：升级脚手架" class="headerlink" title="准备工作：升级脚手架"></a>准备工作：升级脚手架</h3><p>对于 Vue 3，你应该使用 <code>npm</code> 上可用的 Vue CLI v4.5 作为 <code>@vue/cli@next</code>。要升级，你应该需要全局重新安装最新版本的 <code>@vue/cli</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @vue/cli@next</span><br><span class="line"><span class="meta">#</span><span class="bash"> OR</span></span><br><span class="line">npm install -g @vue/cli@next</span><br></pre></td></tr></table></figure><p>然后在 Vue 项目运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue upgrade --next</span><br></pre></td></tr></table></figure><h3 id="方式1：以原有vueCli脚手架创建"><a href="#方式1：以原有vueCli脚手架创建" class="headerlink" title="方式1：以原有vueCli脚手架创建"></a>方式1：以原有vueCli脚手架创建</h3><p>创建项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure><p>直接选择 <code>Vue 3 Preview</code> ，并回车，不考虑eslint问题。</p><img src="https://i.loli.net/2021/02/03/cxOksAVuJhP1eLN.png" style="border: 2px solid darkred" /><p>然后执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line"><span class="comment"># 用vscode打开当前目录</span></span><br><span class="line">code .</span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure><h3 id="方式2：vite创建"><a href="#方式2：vite创建" class="headerlink" title="方式2：vite创建"></a>方式2：vite创建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm init vite-app demo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于</span></span><br><span class="line">npx create-vite-app demo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后执行</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行项目</span></span><br><span class="line">npm run dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><p>创建项目并运行，会发现我们 <code>npm run dev</code> 后是秒开项目的，运行速度极快。</p><h2 id="二、Composition-API（组合式API）【掌握】"><a href="#二、Composition-API（组合式API）【掌握】" class="headerlink" title="二、Composition API（组合式API）【掌握】"></a>二、Composition API（组合式API）【掌握】</h2><blockquote><p>相当于 React Hooks</p></blockquote><p>我们先使用以前vue2的方式实现一个累加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        btnClick()&#123;</span><br><span class="line">            this.count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这套代码可以实现一个累加的效果，但如果以后我们想把这个组件中的 <code>count</code> 字段与 <code>btnClick</code> 单独拎出来管理，那就比较麻烦了，因为 <code>count</code> 和 <code>btnClick</code> 不在同一个方法内，很难抽离。</p><h3 id="1、setup"><a href="#1、setup" class="headerlink" title="1、setup"></a>1、setup</h3><p>setup有以下特性：</p><blockquote><p>1、setup函数是处于 生命周期函数 beforeCreate 和 Created 两个钩子函数之间的函数 也就说在 setup函数中是无法 使用 data 和 methods 中的数据和方法的</p><p>2、setup函数是 Composition API（组合API）的入口</p><p>3、在setup函数中定义的变量和方法最后都是需要 return 出去的 不然无法再模板中使用</p><p>4、由于我们不能在 setup函数中使用 data 和 methods，所以Vue 为了避免我们错误的使用，直接将 setup函数中的this修改成了 undefined</p><p>5、setup函数只能是同步的不能是异步的</p></blockquote><h3 id="2、API-ref"><a href="#2、API-ref" class="headerlink" title="2、API - ref"></a>2、API - ref</h3><p>我们先来体验一下vue3怎么处理这个累加效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        const count &#x3D; ref(1);&#x2F;&#x2F; 此时我们使用ref指定count的默认值为1，因此上面data中的count会失效</span><br><span class="line">        let btnClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            count.value++;&#x2F;&#x2F; 修改ref中的值要用xxx.value</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;count, btnClick&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果我想单独管理这个累加效果，我就可以这么操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=<span class="string">&quot;btnClick&quot;</span>&gt;累加&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// count: 0// 一旦把setup中的代码抽离，return中对应的值要去掉，否则ref无效</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 函数调用后就会返回一个对象，因此我们直接return</span></span><br><span class="line">        <span class="keyword">return</span> clickCountFn()</span><br><span class="line">      <span class="comment">// 如果后期还想同时返回其他数据，可以将clickCountFn()的返回结果展开</span></span><br><span class="line">      <span class="comment">// return &#123;...clickCountFn(), 其他数据&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个函数，这样这块功能我们就能单独管理了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCountFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> btnClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        count.value++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;count, btnClick&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3、API-reactive"><a href="#3、API-reactive" class="headerlink" title="3、API - reactive"></a>3、API - reactive</h3><p>再来了解另一个API ：</p><blockquote><p>reactive函数和ref作用非常接近，但是它的参数是一个对象，我们可以在对象中定义其方法，而通过这个形式，就不需要再对其进行进行 <code>.value</code> 调用了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;obj.username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick1&quot;&gt;修改姓名&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref, reactive&#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">      &#x2F;&#x2F; 使用reactive</span><br><span class="line">        let obj &#x3D; reactive(&#123;</span><br><span class="line">            username: &quot;Jack&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">        let btnClick1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            obj.username &#x3D; &quot;Mary&quot;</span><br><span class="line">        &#125;</span><br><span class="line">return &#123;...clickCountFn(), obj, btnClick1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function clickCountFn()&#123;</span><br><span class="line">    const count &#x3D; ref(1);</span><br><span class="line">    let btnClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        count.value++;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;count, btnClick&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>reactive</code> 生成的对象与 <code>ref</code> 生成的值都是响应式的。</p><p>这里可以看到我们在 html 中调用数据时，使用的是 <code>obj.username</code> ，那我们是否可以直接写 <code>username</code> 呢？答案是可以的，但这里需要注意：</p><blockquote><p>由于reactive返回的对象本质上已经是一个Proxy对象，所以通过…扩展符号展开的属性，是无法进行响应式的</p></blockquote><p>也就是说，如果这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;...clickCountFn(), ...obj, btnClick1&#125;</span><br></pre></td></tr></table></figure><p>那么是无法实现的。</p><h3 id="4、API-toRefs"><a href="#4、API-toRefs" class="headerlink" title="4、API - toRefs"></a>4、API - toRefs</h3><p>正确的写法应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- 无需obj.username，直接username即可 --&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;btnClick1&quot;&gt;修改姓名&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 新增toRefs方法</span><br><span class="line">import &#123;ref, reactive, toRefs&#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let obj &#x3D; reactive(&#123;</span><br><span class="line">            username: &quot;Jack&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">        let btnClick1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            obj.username &#x3D; &quot;Mary&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 通过toRefs方法</span><br><span class="line">        let refObj &#x3D; toRefs(obj);</span><br><span class="line">      &#x2F;&#x2F; 通过...refObj将数据扩展</span><br><span class="line">        return &#123;...clickCountFn(), ...refObj, btnClick1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 其他代码...</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="三、Provide与Inject（提供-注入）【掌握】"><a href="#三、Provide与Inject（提供-注入）【掌握】" class="headerlink" title="三、Provide与Inject（提供/注入）【掌握】"></a>三、Provide与Inject（提供/注入）【掌握】</h2><h3 id="1、Vue2写法"><a href="#1、Vue2写法" class="headerlink" title="1、Vue2写法"></a>1、Vue2写法</h3><p>以往我们的父传子是通过props传的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child :num&#x3D;&quot;num&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            num: 123</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child.vue子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;父组件传过来的值：&#123;&#123;num&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#39;num&#39;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这个时候限制死了数据必须来自父组件，我们其实还有 <code>Provide</code> 和 <code>Inject</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    provide: &#123;</span><br><span class="line">        num: 456</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child.vue子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;父组件传过来的值：&#123;&#123;num&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    inject: [&#39;num&#39;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><code>Provide/Inject</code> 相比于 <code>props</code> 的好处在于：</p><p>如果组件嵌套较多，那么 <code>props</code> 需要一级一级往下传递，后期很难维护。<code>Provide+Inject</code> 相当于是跨级组件传值，比如孙子组件也想用上面这个 <code>num</code> 的值，就不用一级一级往下传，直接在孙子组件使用即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Sun.vue孙子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h4&gt;孙子组件：&#123;&#123;num&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F; 将Sun组件在Child组件中引入，即可实现跨级组件传值</span><br><span class="line">    inject: [&#39;num&#39;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2、Vue3写法"><a href="#2、Vue3写法" class="headerlink" title="2、Vue3写法"></a>2、Vue3写法</h3><p>vue3中的 <code>provide/inject</code>。两者都只能在当前活动实例的 <code>setup()</code> 期间调用。</p><p>格式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// provide</span></span><br><span class="line"><span class="keyword">import</span> &#123;provide&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 显式导入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 此处name必须是String类型，value则不限制</span></span><br><span class="line">    provide(name, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inject</span></span><br><span class="line"><span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 显式导入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// name即为传过来的字段，第二个参数可选，可填写默认值</span></span><br><span class="line">        <span class="keyword">const</span> val = inject(name, defaultValue);</span><br><span class="line">      <span class="keyword">return</span> &#123;val&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们修改以上案例的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;provide&#125; from &#39;vue&#39; &#x2F;&#x2F; 显式导入</span><br><span class="line">import Child from &#39;.&#x2F;Child.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        provide(&#39;num&#39;, 789)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Sun.vue孙子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h4&gt;孙子组件：&#123;&#123;mynum&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;inject&#125; from &#39;vue&#39; &#x2F;&#x2F; 显式导入</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">        const mynum &#x3D; inject(&#39;num&#39;);</span><br><span class="line">        return &#123;mynum&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="3、响应性"><a href="#3、响应性" class="headerlink" title="3、响应性"></a>3、响应性</h3><p>所谓的 <code>Provide/Inject</code> 响应性，其实就是把传递的值结合上文提及的 <code>ref</code> 或 <code>reactive</code> 一起使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child &#x2F;&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;changeNumFn&quot;&gt;修改num&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;provide, ref&#125; from &#39;vue&#39; &#x2F;&#x2F; 显式导入</span><br><span class="line">import Child from &#39;.&#x2F;Child.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      &#x2F;&#x2F; 使用ref来定义num的值</span><br><span class="line">        const num &#x3D; ref(123);</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 声明一个函数，专门用于修改num</span><br><span class="line">        let changeNumFn &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            num.value &#x3D; 456;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        provide(&#39;num&#39;, num)</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 返回这个函数</span><br><span class="line">        return &#123;changeNumFn&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>此时，当你点击按钮时，孙子组件接收到的 <code>num</code> 就会被修改了。</p><h2 id="四、Teleport（传送门）【掌握】"><a href="#四、Teleport（传送门）【掌握】" class="headerlink" title="四、Teleport（传送门）【掌握】"></a>四、Teleport（传送门）【掌握】</h2><p>在vue2中，想要将子节点渲染到存在于父组件以外的 <code>DOM</code> 节点时，需要通过第三方库 <a href="https://links.jianshu.com/go?to=https://github.com/LinusBorg/portal-vue">portal-vue</a> 去实现。而vue3中，<code>Teleport</code> 是一种能够将我们的模板移动到 <code>DOM</code> 中 <code>Vue app</code> 之外的其他位置的技术。</p><blockquote><p>官方文档：<a href="https://vue3js.cn/docs/zh/guide/teleport.html">《teleport》</a></p></blockquote><p>举个最简单的例子：</p><p>我们在 <code>index.html</code> 中 <code>#app</code> 同级的地方新增一个 <code>#test</code> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于vue的 <code>main.js</code> 中规定了打包出来的代码都放入 <code>#app</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>因此，你现在没有办法将代码放入 <code>#test</code> 中。此时，我们可以使用传送门：</p><p><code>App.vue</code> 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Home &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#39;.&#x2F;components&#x2F;Home.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><code>Home.vue</code> 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;这段话是渲染在#app中的&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;teleport to&#x3D;&quot;#test&quot;&gt;</span><br><span class="line">      &lt;p&gt;这段话是渲染在#test中的--1&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;teleport&gt;</span><br><span class="line">&lt;teleport to&#x3D;&quot;#test&quot;&gt;</span><br><span class="line">      &lt;p&gt;这段话是渲染在#test中的--2&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;teleport&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>此时，你打开浏览器控制台，就可以看到第2、3个p标签已经被渲染到 <code>#test</code> 中。</p><blockquote><p>备注：</p><p>1、<teleport>标签身上都to属性，填写的是css选择器。</p><p>2、多个传送门书写时，会按照自上而下的顺序传送至另一个DOM元素。</p></blockquote><h2 id="五、Suspense（等待）【掌握】"><a href="#五、Suspense（等待）【掌握】" class="headerlink" title="五、Suspense（等待）【掌握】"></a>五、Suspense（等待）【掌握】</h2><p>Suspense组件用于在等待某个异步组件解析时显示后备内容。</p><p>那我们什么时候需要使用异步组件呢？多了去了，比如：</p><ul><li>在页面加载之前显示加载动画</li><li>显示占位符内容</li><li>处理延迟加载的图像</li></ul><p>那么，让我们看看 <code>Suspense</code> 怎么使用，我们先来提一个需求：</p><blockquote><p>在等待组件获取数据并解析时显示“玩命加载中…”之类的内容</p></blockquote><p>OK，我们来写一个 <code>Article.vue</code> 组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default&#123;</span><br><span class="line">  async setup() &#123;</span><br><span class="line">    let content &#x3D; ref(&#39;内容&#39;)</span><br><span class="line">    content.value &#x3D; await new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; 3秒后修改content</span><br><span class="line">            resolve(&quot;你好世界&quot;);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123;content&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>用个 <code>Home.vue</code> 组件来调用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">      &lt;template #default&gt;</span><br><span class="line">          &lt;Article&gt;&lt;&#x2F;Article&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;template #fallback&gt;</span><br><span class="line">          &lt;p&gt;玩命加载中...&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;Suspense&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Article from &#39;.&#x2F;Article.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        Article</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>可以看出，<code>&lt;Suspense&gt;</code> 中，包含了两个template标签，<code>#default</code> 定义了我们要写入的内容， <code>#fallback</code> 定义了我们要预显示的内容。</p><blockquote><p>⚠️ 注意：</p><p>作为template中的内容（即插槽），必须要有根元素。</p></blockquote><h2 id="六、Fragment（碎片）【了解】"><a href="#六、Fragment（碎片）【了解】" class="headerlink" title="六、Fragment（碎片）【了解】"></a>六、Fragment（碎片）【了解】</h2><p>vue2中，如果你创建一个Vue组件，那么它只能有一个根节点。这意味着不能创建这样的组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;你好&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;世界&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>原因是代表任何Vue组件的Vue实例需要绑定到一个单一的DOM元素中。唯一可以创建一个具有多个DOM节点的组件的方法就是创建一个没有底层Vue实例的功能组件。</p><p>这情况同样存在于react，但react可以使用空标签 <code>&lt;&gt;&lt;/&gt;</code> 来包裹，或者是使用一个名为Fragment的虚拟元素：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Columns</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;td&gt;你好&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;世界&lt;/td&gt;</span><br><span class="line">      &lt;/React.Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管Fragment看起来像一个普通的DOM元素，但它是虚拟的，根本不会在DOM树中呈现。目前你可以在Vue 2中使用vue-fragments库来使用Fragments，而在Vue 3中，你直接使用就行了，无需引入任何库。</p><h2 id="七、TreeShaking（消除未使用代码）【了解】"><a href="#七、TreeShaking（消除未使用代码）【了解】" class="headerlink" title="七、TreeShaking（消除未使用代码）【了解】"></a>七、TreeShaking（消除未使用代码）【了解】</h2><p>TreeShaking 是一个术语，指的是在打包构建过程中移除没有被引用到的代码，这些代码可以成为 <strong>dead code</strong>。这个概念最早在基于 ES6 的打包工具 Rollup 中提出，后来被引入到 webpack 中。TreeShaking 比较依赖于 ES6 模块系统的静态结构特性，比如 <code>import</code> 和 <code>export</code>。</p><p>文档参考：<a href="https://vue3js.cn/docs/zh/guide/migration/global-api-treeshaking.html#_2-x-%E8%AF%AD%E6%B3%95">https://vue3js.cn/docs/zh/guide/migration/global-api-treeshaking.html#_2-x-%E8%AF%AD%E6%B3%95</a></p><p>举个例子：</p><p>vue2中我们常使用 <code>Vue.nextTick(()=&gt;&#123;&#125;)</code> 来预操作DOM，但有时候我们不用这个 <code>nextTick</code> ，比如改用别的方式来代替（如setTimeout），那么项目打包时，vue 全局的 <code>nextTick</code> 就成为一个多余的代码，从而使你的项目打包体积变大。</p><p>在vue3中，官方团队重构了所有全局 API 的组织方式，让所有的 API 都支持了 TreeShaking。所以vue3中如果还想使用全局的 <code>nextTick</code> ，就需要引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 和 DOM 有关的一些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你在 Vue 3 中不引入而直接调用 <code>Vue.nextTick()</code> ，就会得到一个报错：<code>undefined is not a function</code>。</p><p>官方也给出了Vue 2.x 中的受此更改影响的全局 API：</p><ul><li><code>Vue.nextTick</code></li><li><code>Vue.observable</code> (用 <code>Vue.reactive</code> 替换)</li><li><code>Vue.version</code></li><li><code>Vue.compile</code> (仅全构建)</li><li><code>Vue.set</code> (仅兼容构建)</li><li><code>Vue.delete</code> (仅兼容构建)</li></ul><h2 id="八、Performance（性能）【了解】"><a href="#八、Performance（性能）【了解】" class="headerlink" title="八、Performance（性能）【了解】"></a>八、Performance（性能）【了解】</h2><p>vue3.0相对于vue2.0来说性能快1.2到1.5倍，主要原因如下：</p><h3 id="1、diff方法优化"><a href="#1、diff方法优化" class="headerlink" title="1、diff方法优化"></a>1、diff方法优化</h3><ul><li>Vue2 中的虚拟dom是进行全量的对比</li><li>Vue3 新增了静态标记（PatchFlag），只比对带有 PF 的节点，并且通过 Flag 的信息得知 当前节点要比对的具体内容。</li></ul><h3 id="2、静态提升"><a href="#2、静态提升" class="headerlink" title="2、静态提升"></a>2、静态提升</h3><ul><li>Vue2中无论元素是否参与更新, 每次都会重新创建, 然后再渲染</li><li>Vue3中对于不参与更新的元素, 会做静态提升, 只会被创建一次, 在渲染时直接复用即可</li></ul><h3 id="3、cacheHandlers-事件侦听器缓存"><a href="#3、cacheHandlers-事件侦听器缓存" class="headerlink" title="3、cacheHandlers 事件侦听器缓存"></a>3、cacheHandlers 事件侦听器缓存</h3><ul><li>默认情况下onClick会被视为动态绑定, 所以每次都会去追踪它的变化</li><li>但是因为是同一个函数，所以没有追踪变化, 直接缓存起来复用即可</li></ul><h3 id="4、ssr渲染"><a href="#4、ssr渲染" class="headerlink" title="4、ssr渲染"></a>4、ssr渲染</h3><ul><li>当有大量静态的内容时候，这些内容会被当做纯字符串推进一个buffer里面，  即使存在动态的绑定，会通过模板插值嵌入进去。这样会比通过虚拟dmo来渲染的快上很多很多。</li><li>当静态内容大到一定量级时候，会用_createStaticVNode方法在客户端去生成一个static node，  这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染。</li></ul><h2 id="九、Setup的生命周期【了解】"><a href="#九、Setup的生命周期【了解】" class="headerlink" title="九、Setup的生命周期【了解】"></a>九、Setup的生命周期【了解】</h2><p>组合式API需要在setup中使用，setup中含有的生命钩子与vue的大体一致：</p><p>具体参考：<a href="https://vue3js.cn/docs/zh/guide/composition-api-lifecycle-hooks.html">《setup生命周期钩子》</a></p><h2 id="十、TypeScript支持【了解】"><a href="#十、TypeScript支持【了解】" class="headerlink" title="十、TypeScript支持【了解】"></a>十、TypeScript支持【了解】</h2><p>vue3新增了对TS语法的支持。    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;✨-官网地址&quot;&gt;&lt;a href=&quot;#✨-官网地址&quot; class=&quot;headerlink&quot; title=&quot;✨ 官网地址&quot;&gt;&lt;/a&gt;✨ 官网地址&lt;/h2&gt;&lt;p&gt;官网文档：&lt;a href=&quot;https://v3.cn.vuejs.org/&quot;&gt;https://v3.cn.</summary>
      
    
    
    
    
    <category term="Vue3" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>davJs学习02</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/02/24/umi%E4%B8%AD%EF%BC%8Cdavjs%E5%AD%A6%E4%B9%A002/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/02/24/umi%E4%B8%AD%EF%BC%8Cdavjs%E5%AD%A6%E4%B9%A002/</id>
    <published>2021-02-23T16:00:00.000Z</published>
    <updated>2021-02-24T07:30:24.443Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近公司新项目用的UmiJs3.x，整个项目的数据，通过内置的Davjs来控制。</strong></p><p><strong>昨天自己分析了一下Davjs。但是脑海中的概念还是很模糊。今天再梳理一下。</strong></p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p><strong>首先是在Models文件夹下创建一个JS文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> GlobalModel = &#123;</span><br><span class="line">    <span class="comment">//model的名称</span></span><br><span class="line">  namespace: <span class="string">&quot;global&quot;</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">      <span class="comment">//放数据的地方</span></span><br><span class="line">      user:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    <span class="comment">// 异步获取数据，不能直接修改数据，需要通过put调用reducers的方法。</span></span><br><span class="line">     <span class="string">`其中call和普通是dva 提供的effect 函数内部的处理函数</span></span><br><span class="line"><span class="string">      call：执行异步函数， put：发出一个 Action，类似于 dispatch  select获取数据，`</span></span><br><span class="line">      *<span class="function"><span class="title">getTableData</span>(<span class="params">&#123; payload &#125;, &#123; put, select, call &#125;</span>)</span> &#123;</span><br><span class="line">          </span><br><span class="line"> <span class="keyword">const</span> tableList = <span class="keyword">yield</span> select(<span class="function">(<span class="params">state</span>) =&gt;</span> state.global.tableData);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123;</span><br><span class="line">        type: <span class="string">&quot;setTableParams&quot;</span>,</span><br><span class="line">        payload,</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">   <span class="comment">//同步获取数据</span></span><br><span class="line">      <span class="function"><span class="title">setTableParams</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">              ...state</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> GlobalModel;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p><strong>对应页面中</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TableDemo = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//能直接获取到users</span></span><br><span class="line">    <span class="keyword">const</span> &#123;dispatch, users&#125; = props</span><br><span class="line">    </span><br><span class="line">    dispatch(&#123;</span><br><span class="line">        <span class="comment">//global这个model中，getTableData这个异步操作函数</span></span><br><span class="line">      type: <span class="string">&quot;global/getTableData&quot;</span>,</span><br><span class="line">      payload: &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;users.name&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把global中state中的数据绑定到页面的props上</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">&#123; <span class="built_in">global</span> &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  users: <span class="built_in">global</span>.users</span><br><span class="line">&#125;))(TableDemo);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>还可以调用Service文件夹里的接口，获取数据</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;最近公司新项目用的UmiJs3.x，整个项目的数据，通过内置的Davjs来控制。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;昨天自己分析了一下Davjs。但是脑海中的概念还是很模糊。今天再梳理一下。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;第一步&quot;&gt;</summary>
      
    
    
    
    
    <category term="Davjs" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/Davjs/"/>
    
    <category term="React" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/React/"/>
    
    <category term="UmiJs" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/UmiJs/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/02/23/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/02/23/%E5%85%B3%E4%BA%8E%E6%88%91/</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-02-23T08:49:18.453Z</updated>
    
    <content type="html"><![CDATA[<p>姓名：张振</p><p>年龄：25</p><p>现居：江苏-常州</p><hr><p><strong>路</strong></p><p><strong>很长</strong></p><p><strong>顺道寻光</strong></p><img src="https://avatars.githubusercontent.com/u/58460937?s=460&u=2262a14212d169693533720c53b02167303cab09&v=4" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;姓名：张振&lt;/p&gt;
&lt;p&gt;年龄：25&lt;/p&gt;
&lt;p&gt;现居：江苏-常州&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很长&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺道寻光&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;h</summary>
      
    
    
    
    
    <category term="Aboutme" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/Aboutme/"/>
    
  </entry>
  
  <entry>
    <title>Dav结构的分析</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/02/22/davjs%E5%AD%A6%E4%B9%A0/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/02/22/davjs%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-22T10:34:00.000Z</published>
    <updated>2021-02-23T02:22:05.583Z</updated>
    
    <content type="html"><![CDATA[<p>下面是davjs   models的一个基本结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="comment">//dav model的名字</span></span><br><span class="line">namespace: <span class="string">&#x27;example&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据</span></span><br><span class="line">state: &#123;<span class="attr">num</span>:<span class="number">1</span>&#125;, <span class="comment">//表示当前的example中的state状态，这里可以给初始值，这里num初始为1</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//这里是做异步处理的相当于VueX的action</span></span><br><span class="line">effects: &#123; </span><br><span class="line"> <span class="comment">//payload是参数   put触发action ，select获取数据， call异步操作   </span></span><br><span class="line">*<span class="function"><span class="title">addByONe</span>(<span class="params">&#123; payload&#125;, &#123; call, put,select &#125;</span>)</span> &#123; </span><br><span class="line">    </span><br><span class="line"> <span class="comment">//这里使用select</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.num) <span class="comment">//这里就获取到了当前state中的数据num</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> param1;</span><br><span class="line"> </span><br><span class="line">param1 = num + payload; 这里就可以使用num进行操作了</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> put(&#123;</span><br><span class="line">type: <span class="string">&#x27;save&#x27;</span>,</span><br><span class="line">num:param1</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">   </span><br><span class="line"><span class="comment">//用来保存更新state值 上面的put方法调用这里的方法,</span></span><br><span class="line">reducers: &#123;</span><br><span class="line"><span class="function"><span class="title">save</span>(<span class="params">state, action</span>)</span> &#123; <span class="comment">//这里的state是当前总的state，这里的action包含了上面传递的参数和type</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> &#123; ...state, ...action.num &#125;; <span class="comment">//这里用ES6语法来更新当前state中num的值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面是davjs   models的一个基本结构&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
      
    
    
    
    
    <category term="Davjs" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/Davjs/"/>
    
    <category term="React" scheme="https://gitee.com/shimmer612/shimmer-blog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="https://gitee.com/shimmer612/shimmer-blog/2021/02/11/hello-world/"/>
    <id>https://gitee.com/shimmer612/shimmer-blog/2021/02/11/hello-world/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-02-23T05:25:35.342Z</updated>
    
    <content type="html"><![CDATA[<p><strong>大家新年快乐</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;大家新年快乐&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
