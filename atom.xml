<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shimmer</title>
  
  <subtitle>黑暗中寻光的人</subtitle>
  <link href="https://gitee.com/shimmer612/myBlog/atom.xml" rel="self"/>
  
  <link href="https://gitee.com/shimmer612/myBlog/"/>
  <updated>2021-04-06T09:32:21.065Z</updated>
  <id>https://gitee.com/shimmer612/myBlog/</id>
  
  <author>
    <name>Shimmer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>杂记04</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/04/06/2021-04-06-%E6%9D%82%E8%AE%B004/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/04/06/2021-04-06-%E6%9D%82%E8%AE%B004/</id>
    <published>2021-04-05T16:00:00.000Z</published>
    <updated>2021-04-06T09:32:21.065Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2021年的清明节假期过后的第一天。"><a href="#2021年的清明节假期过后的第一天。" class="headerlink" title="2021年的清明节假期过后的第一天。"></a>2021年的清明节假期过后的第一天。</h5><p>今天改了一天的bug。</p><p>今年的新年愿望是2021年好好待我，顺顺利利。</p><p>好像没有什么用。</p><p>人生最灰暗的清明节。</p><p>我的光真的消失了。</p><p>朋友和我说，我和她说我已经不是原来的我了。</p><p>我真的不是原来的我了。</p><p>或者我一直是原来的那个我</p><p>只是他们的眼里我变了。</p><p>马上25周岁了。身边连一个朋友都没有，这好像是最悲哀的。</p><p>在身边人眼中，都以为我活的潇洒。</p><p>那不过是我极度自卑的伪装罢了。</p><p>我又开始迷茫了。</p><p>失去了天上我在追寻的明灯。</p><p>那是我一直前进的动力。</p><p>我真的是跨不过去这道坎。</p><p>它太深了。</p><p>生活中我总是以一个大哥哥的样子去面对别人。</p><p>很多人的烦恼都会和我说。</p><p>我也会给予我的看法。</p><p>可是当角色转换。</p><p>心中充满困惑的是我。</p><p>明白无数道理，依然过不好这一生。</p><p>我最近时长安慰自己。</p><p>强者生来就是孤独的。</p><p>可是我不是强者。</p><p>我只是孤独。</p><p>我多么想假期能有个人能一起出去玩耍。</p><p>不是一个人呆在床上看手机，发呆。</p><p>我之前不明白为什么有人会得抑郁症。</p><p>现在我好像得了抑郁症。</p><p>只是生活，治好了我的抑郁症。</p><p>它不允许我抑郁、消沉。</p><p>第二天还是要早起、上班。</p><p>面对着一行又一行的代码。</p><p>那一个个英文和数字。</p><p>二十年前的我，以为我现在应该是一个作家。</p><p>明天和文字打交道。</p><p>热爱生活，享受生活。</p><p>现在的我只是在经历生活。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;2021年的清明节假期过后的第一天。&quot;&gt;&lt;a href=&quot;#2021年的清明节假期过后的第一天。&quot; class=&quot;headerlink&quot; title=&quot;2021年的清明节假期过后的第一天。&quot;&gt;&lt;/a&gt;2021年的清明节假期过后的第一天。&lt;/h5&gt;&lt;p&gt;今天改了一天</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://gitee.com/shimmer612/myBlog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>杂记03</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/04/02/2021-04-02-%E6%9D%82%E8%AE%B003/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/04/02/2021-04-02-%E6%9D%82%E8%AE%B003/</id>
    <published>2021-04-01T16:00:00.000Z</published>
    <updated>2021-04-02T02:39:26.585Z</updated>
    
    <content type="html"><![CDATA[<h5 id="最近"><a href="#最近" class="headerlink" title="最近"></a>最近</h5><p>已经好多天没有写博客了，本来想保持一天一更或是两天一更的，很遗憾没有保持。</p><p>最近换了项目组，三年前的老项目，因为之前一直在用react的函数式组件和antd4在写项目。</p><p>突然换到类组件和antd3。非常的不适应。每天一上班就写代码，一直写到下班，写到加班。</p><p>承受了我这个前端实习生职级不该承受的重担。</p><p>也幸好挺过来了，今天提测了。</p><p>不知道有没有bug.</p><p>有bug应该是必定的吧！哈哈哈！</p><p>之前在宿舍写过相关的一篇，没有发，那一篇满是抱怨，今天看来，都过去了。生活日子还在继续。</p><p>至少抗压能力是练出来了。</p><p>不知道还要在这个项目呆多久。说是借过来用一用。但是我想，我是回不去了。</p><p>社会本来就是这样残酷的。</p><p>从一开始的几天每天上班心里发堵，一堵堵一天。后来想想何必呢。只是上班，工作。日子还要继续。</p><p>我还要很多的事情没有完成。</p><p>还要攒这两个月的工资毕业旅行呢。</p><h5 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h5><p>进入4月份了。十几年的学生生涯还剩下最后的三个月。上周末最后一门挂科，补考也过了。作为学生的所有任务也都完成了。</p><p>时间真的是一个很奇特的计量维度。</p><p>它的快慢，完全是由你自己来控制。</p><p>有时候一个小时感觉无比漫长。</p><p>有时候一天一年转瞬而逝。</p><p>昨天看了赵英俊生前拍的视频。</p><p>活着真好啊！</p><p>是啊！活着真好！</p><p>还可以看看这方天地，追寻未追到的人。</p><p>呼吸空气，经历人生。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;最近&quot;&gt;&lt;a href=&quot;#最近&quot; class=&quot;headerlink&quot; title=&quot;最近&quot;&gt;&lt;/a&gt;最近&lt;/h5&gt;&lt;p&gt;已经好多天没有写博客了，本来想保持一天一更或是两天一更的，很遗憾没有保持。&lt;/p&gt;
&lt;p&gt;最近换了项目组，三年前的老项目，因为之前一直在用r</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://gitee.com/shimmer612/myBlog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>react类组件的数据顺序</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/04/02/2021-04-02-react%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E9%A1%BA%E5%BA%8F/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/04/02/2021-04-02-react%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E9%A1%BA%E5%BA%8F/</id>
    <published>2021-04-01T16:00:00.000Z</published>
    <updated>2021-04-02T04:00:31.357Z</updated>
    
    <content type="html"><![CDATA[<h5 id="昨日"><a href="#昨日" class="headerlink" title="昨日"></a>昨日</h5><p>昨天写代码的时候，父组件通过props传值给子组件。我在子组件中在<code>ComponentDidMount</code>中用<code>setState</code>赋值<code>render</code>中拿不到。</p><p>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">useDetail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.props = props</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            useInfo: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            useInfo:<span class="built_in">this</span>.props.UseInfo</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拿不到值</span></span><br><span class="line">        <span class="keyword">const</span> useInfo = <span class="built_in">this</span>.state.useInfo</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> strategy = useInfo &amp;&amp; useInfo.strategy ?                  <span class="built_in">JSON</span>.parse(useInfo.strategy.discountStrategy) : []</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这样就能获取到值，<code>render</code>在<code>componentDidMount</code>之前,所以值为<code>undefined</code>,传入的值可以直接放在<code>state</code>中赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">useDetail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.props = props</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            useInfo: <span class="built_in">this</span>.props.UseInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> useInfo = <span class="built_in">this</span>.state.useInfo</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> strategy = useInfo &amp;&amp; useInfo.strategy ? <span class="built_in">JSON</span>.parse(useInfo.strategy.discountStrategy) : []&#125;</span><br></pre></td></tr></table></figure><h5 id="over"><a href="#over" class="headerlink" title="over~"></a>over~</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;昨日&quot;&gt;&lt;a href=&quot;#昨日&quot; class=&quot;headerlink&quot; title=&quot;昨日&quot;&gt;&lt;/a&gt;昨日&lt;/h5&gt;&lt;p&gt;昨天写代码的时候，父组件通过props传值给子组件。我在子组件中在&lt;code&gt;ComponentDidMount&lt;/code&gt;中用&lt;code</summary>
      
    
    
    
    
    <category term="react" scheme="https://gitee.com/shimmer612/myBlog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react hooks理解</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/25/2021-03-25-react-hooks%E7%90%86%E8%A7%A3/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/25/2021-03-25-react-hooks%E7%90%86%E8%A7%A3/</id>
    <published>2021-03-24T16:00:00.000Z</published>
    <updated>2021-03-25T05:50:55.167Z</updated>
    
    <content type="html"><![CDATA[<p>在函数式组件中发现了这样的一个问题，代码如下。<br>按理说<strong>1处</strong>打印出来的<code>isShow</code>应该为<code>true</code>可是却是<code>false</code></p><p><strong>2处</strong>打印出来的是true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = <span class="function">()=&gt;</span> &#123;    </span><br><span class="line"><span class="keyword">const</span> [isShow, setIsShow] = useState(<span class="literal">false</span>)</span><br><span class="line"> <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(isShow)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;button onClick=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        setIsShow(<span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1</span></span><br><span class="line">        <span class="built_in">console</span>.log(isShow)</span><br><span class="line">    &#125;&#125;&gt;新增&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去百度了一些资料。</p><p>原来函数式组件每次更新的时候都会重新执行一次函数，此时 <strong>1处</strong>打印的<code>isShow</code>其实是初始的状态的旧值。形成了闭包。</p><p><strong>2处</strong>外层能打印出来，是因为函数每次更新都要执行。</p><p>只有用<code>useEffect</code>才能获取到,绑定<code>isShow</code>为依赖。可以这样写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = <span class="function">()=&gt;</span> &#123;   </span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> [isShow, setIsShow] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(isShow)</span><br><span class="line">&#125;,[isShow])</span><br><span class="line"> <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(isShow)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;button onClick=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        setIsShow(<span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1</span></span><br><span class="line">        <span class="built_in">console</span>.log(isShow)</span><br><span class="line">    &#125;&#125;&gt;新增&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>hooks是有序的，会被react从上到下依次读取，所以不能在条件中使用，这样会导致解析的时候前后声明顺序不一致。hooks必须放在函数内部顶层。</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在函数式组件中发现了这样的一个问题，代码如下。&lt;br&gt;按理说&lt;strong&gt;1处&lt;/strong&gt;打印出来的&lt;code&gt;isShow&lt;/code&gt;应该为&lt;code&gt;true&lt;/code&gt;可是却是&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2处&lt;/st</summary>
      
    
    
    
    
    <category term="react hooks" scheme="https://gitee.com/shimmer612/myBlog/tags/react-hooks/"/>
    
  </entry>
  
  <entry>
    <title>react hooks useEffect的使用</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/24/2021-03-24-react-hooks-useEffect%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/24/2021-03-24-react-hooks-useEffect%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-23T16:00:00.000Z</published>
    <updated>2021-03-24T05:47:33.481Z</updated>
    
    <content type="html"><![CDATA[<h5 id="useEffect的tips"><a href="#useEffect的tips" class="headerlink" title="useEffect的tips"></a>useEffect的tips</h5><p>useEffect的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//逻辑</span></span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><p>如果没有第二个空数组参数，useEffect就会在页面状态改变的时候执行，加了空数组参数，只会在页面mount的时候更新一次。</p><p><strong>传第二个参数：</strong>可以用作页面数据初始化</p><p><strong>不传第二个参数</strong></p><p>按照useEffect的这个在页面状态变化的时候调用的特性，可以做很多东西。</p><p>可以每次数据变化的时候，把数据传给后台，相当于监听。</p><p>分数变化的时候打印当前得了多少分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Main = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相当于componentDidMount和componentDidUpdate</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 打印点击的次数</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">`当前得分为<span class="subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 onClick=&#123;<span class="function">() =&gt;</span> &#123; setCount(count + <span class="number">1</span>) &#125;&#125;&gt;当前得分为：&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Main /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="useEffect-不应该返回任何内容"><a href="#useEffect-不应该返回任何内容" class="headerlink" title="useEffect 不应该返回任何内容"></a>useEffect 不应该返回任何内容</h5><p>但是使用async await  会返回一个隐式的promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是错误的</span></span><br><span class="line">useEffect(<span class="keyword">async</span>()=&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span>  ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>应该把async await  写在useEffect里面，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应该这样写</span></span><br><span class="line">useEffect(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">     <span class="keyword">await</span>.....</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><p>今天就记录到这，马上我把react-redux在复习一下。好久不用都忘的差不多了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;useEffect的tips&quot;&gt;&lt;a href=&quot;#useEffect的tips&quot; class=&quot;headerlink&quot; title=&quot;useEffect的tips&quot;&gt;&lt;/a&gt;useEffect的tips&lt;/h5&gt;&lt;p&gt;useEffect的语法：&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="react hooks" scheme="https://gitee.com/shimmer612/myBlog/tags/react-hooks/"/>
    
  </entry>
  
  <entry>
    <title>杂记02</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/22/2021-03-22-%E6%9D%82%E8%AE%B002/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/22/2021-03-22-%E6%9D%82%E8%AE%B002/</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-03-22T09:28:12.629Z</updated>
    
    <content type="html"><![CDATA[<p>今天也没学什么新东西，但是博客总要点新的东西吧。就随便写一点吧。</p><p>今天想给自己的在线购物商城加一个客服聊天功能。百度了下用<code>socket.io</code>可以实现，但是自己折腾了半天也没有成功，就放弃了。</p><p>不过给订单页面加了一个快递查询的功能，用的假数据，点击直接返回一串快递信息，是我自己淘宝买东西的物流信息。用<code>element-ui</code>的<code>TimeLine</code>实现的。</p><p>其实想了很多功能，却不知道怎么实现，比如点击付款按钮，跳出来一个二维码，扫描二维码，跳转到订单页面，没有找到什么插件可以监听二维码的扫描事件。用的<code>qrimage</code>只能生成二维码，扫描跳转到设置特定的页面。</p><p>痛点很多，要学习的东西也很多。</p><p>总感觉自己不是一个合格的前端。</p><p>不务正业去学了后台。写了几个接口学了<code>mongo</code>,也满足自己平时写写小项目自己写后台了。也挺不错的。express真的挺香的。</p><p>昨天去滆湖公园放了风筝，很开心。和高中同学聊聊天散散步真的很愉快。</p><p>还是没事多出去走一走，呼吸呼吸新鲜的空气。</p><p>整个人的精神会好很多。</p><p>看着漫天的飞翔的风筝，抽芽的柳树，盛开的油菜花和家乡的Sakura。</p><p>那时候之前所有的烦闷与苦痛全部抛在脑后。</p><p>真好！</p><p><img src="https://z3.ax1x.com/2021/03/22/6ouenP.jpg" alt="6ouenP.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天也没学什么新东西，但是博客总要点新的东西吧。就随便写一点吧。&lt;/p&gt;
&lt;p&gt;今天想给自己的在线购物商城加一个客服聊天功能。百度了下用&lt;code&gt;socket.io&lt;/code&gt;可以实现，但是自己折腾了半天也没有成功，就放弃了。&lt;/p&gt;
&lt;p&gt;不过给订单页面加了一个快递查</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://gitee.com/shimmer612/myBlog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>创建一个vue3.0+element-plus项目</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/20/2021-03-20-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAvue3.0+element-plus%E9%A1%B9%E7%9B%AE/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/20/2021-03-20-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAvue3.0+element-plus%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-03-19T16:00:00.000Z</published>
    <updated>2021-03-20T06:15:27.903Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建一个vue3-0-element-plus项目"><a href="#创建一个vue3-0-element-plus项目" class="headerlink" title="创建一个vue3.0+element-plus项目"></a>创建一个vue3.0+element-plus项目</h5><p><strong>首先要确认自己电脑中的@vue/cli&gt;4.5</strong></p><p><strong>可以用<code>vue -V</code>查看</strong></p><p><strong>没有的话可以用<code>npm i -g @vue/cli</code>升级</strong></p><p><strong>升级成功后</strong></p><p>**<code>vue create my-pro</code>**这里选择Vue 3的项目。</p><p><img src="https://s4.ax1x.com/2021/03/20/6h81Dx.png"></p><p>创建成功后。</p><p>执行下面的命令。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> my-<span class="keyword">pro</span></span><br><span class="line">vue <span class="built_in">add</span> element-plus</span><br></pre></td></tr></table></figure><p>全局加载和按需加载自己选择。</p><p>安装成功后。</p><p><code>npm run serve</code></p><p>发现项目跑起来了。</p><p><img src="https://s4.ax1x.com/2021/03/20/6h8hMn.png"></p><p>按需加载的话，需要在src/plugins/element.js文件里，引入自己所需要的组件就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ElButton,ElTimeline &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app) =&gt; &#123;</span><br><span class="line">  app.use(ElButton)</span><br><span class="line">  app.use(ElTimeline)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;创建一个vue3-0-element-plus项目&quot;&gt;&lt;a href=&quot;#创建一个vue3-0-element-plus项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个vue3.0+element-plus项目&quot;&gt;&lt;/a&gt;创建一个vue3.0+</summary>
      
    
    
    
    
    <category term="vue3" scheme="https://gitee.com/shimmer612/myBlog/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>杂记</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/19/2021-03-19-%E6%9D%82%E8%AE%B0/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/19/2021-03-19-%E6%9D%82%E8%AE%B0/</id>
    <published>2021-03-18T16:00:00.000Z</published>
    <updated>2021-03-20T06:22:46.821Z</updated>
    
    <content type="html"><![CDATA[<p>年初七到常州实习，租的短租房，和软件班的一个同事合住，六十一天。当晚凌晨两点多，接到了她的电话。她问我，人在哪，明天上不上班。我说我在常州明天上班。那我就舒服多了她说。</p><p>认识这么久好像除了当初追她的时候，也是凌晨两点多，接过她一次电话。她说你害怕那种夜里无助的感觉，不想再把自己全身心托付给另一个人了。</p><p>第二个电话就是分手这次。</p><p>还在一起的时候，她希望夜里打电话，我要接到。我当时无法理解，她说的那种夜里无助，害怕的感觉，打我的电话却打不通的那种绝望，有多难受。</p><p>我不理解夜里有什么好奔溃的，早点睡觉不行吗？我也没想到追她的时候她和我说的话。完全的抛在了脑后。</p><p>后来我才慢慢的明白，她说的那种感觉。</p><p>人和人是不一样的，我这么多年一直没有理解这个道理。直到最近才深有体会。</p><p>我总觉得，我可以做到的事，我不以为意地事情，我觉得可以的OK的事情，别人也应该可以。</p><p>原来，人的性格各有不同，要尊重不同的性格，不同的人生。</p><p>可是都是亡羊补牢，为时已晚。</p><p>她就这样又一次的闯进了我的生活，打乱了我生活的节奏，扰乱了我的心绪，然后挥挥衣袖，没有一丝的拖泥带水，消失在丛林深处。</p><p>煎熬了两周，我重新开始了我的生活节奏，上班下班，锻炼，减肥。我内心深处，自然而然地认为，或许我变得更好，她就会回来。</p><p>真的很感谢她，没有她，可能我现在还是一个在学校宿舍混吃等死，找不到工作的应届生吧。为了她努力学习找工作，让我现在坐在办公室里，成为了班级里少数优秀的人。</p><p>别人向往投来羡慕的目光，我知道这一切都是因为她，但是现在她不在了。</p><p>我曾急切地想把她找回来。急切地想得到她热烈地回应。</p><p>想到高中时候地一篇作文题目。</p><p>你若盛开，蝴蝶自来。</p><p>我不知道最后，来的是不是她这只蝴蝶，我只知道只要我盛开了，才会有蝴蝶。</p><p>谁回去叮一朵没有盛开地花呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;年初七到常州实习，租的短租房，和软件班的一个同事合住，六十一天。当晚凌晨两点多，接到了她的电话。她问我，人在哪，明天上不上班。我说我在常州明天上班。那我就舒服多了她说。&lt;/p&gt;
&lt;p&gt;认识这么久好像除了当初追她的时候，也是凌晨两点多，接过她一次电话。她说你害怕那种夜里无助的</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://gitee.com/shimmer612/myBlog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Vue3中路由的相关配置</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/16/Vue3%E4%B8%AD%E8%B7%AF%E7%94%B1%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/16/Vue3%E4%B8%AD%E8%B7%AF%E7%94%B1%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</id>
    <published>2021-03-15T16:00:00.000Z</published>
    <updated>2021-03-17T01:25:00.647Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Vue3中路由的相关配置"><a href="#Vue3中路由的相关配置" class="headerlink" title="Vue3中路由的相关配置"></a>Vue3中路由的相关配置</h5><h6 id="1、路由的配置"><a href="#1、路由的配置" class="headerlink" title="1、路由的配置"></a>1、路由的配置</h6><p><strong>在src路径下新建router文件夹，然后在该文件夹新建index.js文件</strong></p><p><strong>安装vue-router</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i vue-router@next --save</span><br></pre></td></tr></table></figure><p><strong>index.js文件配置如下。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/addCount.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Father = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/father.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        redirect: <span class="string">&#x27;/add&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/father&quot;</span>,</span><br><span class="line">        component: Father,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/add&quot;</span>,</span><br><span class="line">        component: addCount</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(),</span><br><span class="line">    routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>然后配置main.js     引入router</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"><span class="comment">//使用router</span></span><br><span class="line"><span class="comment">//引入elementPlus</span></span><br><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="comment">//引入router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="comment">//使用ElementPlus</span></span><br><span class="line">app.use(ElementPlus)</span><br><span class="line"><span class="comment">//使用router</span></span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="2、路由的跳转"><a href="#2、路由的跳转" class="headerlink" title="2、路由的跳转"></a>2、路由的跳转</h6><p><strong>方式一</strong></p><p><strong>引入useRouter</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;changeRouter&quot;</span>&gt; 跳转路由 &lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> router = useRouter()</span><br><span class="line">    <span class="keyword">const</span> changeRouter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      router.push(<span class="string">&#x27;/father&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; changeRouter &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style  scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>方式二router-link</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/child&quot;</span>&gt;子页面&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p><strong>方式三</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;el-button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;toAdd&quot;</span>&gt;下一页&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router/index.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">toAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      router.push(<span class="string">&#x27;/add&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h6 id="3、路由的传参"><a href="#3、路由的传参" class="headerlink" title="3、路由的传参"></a>3、路由的传参</h6><p><strong>引入useRoute</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;changeRouter&quot;</span>&gt; 跳转路由 &lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter, useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> router = useRouter()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> route = useRoute()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> changeRouter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">  router.push(&#123;</span><br><span class="line">        path: <span class="string">&#x27;/father&#x27;</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          name: <span class="string">&#x27;zz&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; changeRouter &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style  scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>如下图：在father页面就可以通过route.query.name获取到”zz”</strong></p><p><a href=""><img src="https://s3.ax1x.com/2021/03/16/6saqCn.png" alt="6saqCn.png"></a></p><h6 id="4、路由的嵌套"><a href="#4、路由的嵌套" class="headerlink" title="4、路由的嵌套"></a>4、路由的嵌套</h6><p><strong>通过router-view和子路由的方式嵌套</strong></p><p><strong>router/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Father = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/father.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> children = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/child.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        redirect: <span class="string">&#x27;/father&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/father&quot;</span>,</span><br><span class="line">        component: Father,</span><br><span class="line">        children:</span><br><span class="line">            [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">&#x27;/child&#x27;</span>,</span><br><span class="line">                    component: children</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(),</span><br><span class="line">    routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>father.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;h&quot;</span>&gt;我是爷爷&lt;/h1&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/child&quot;</span>&gt;下一页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>child.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      &lt;h1&gt;我是儿子&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;Sunzi /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Sunzi <span class="keyword">from</span> <span class="string">&#x27;./sunzi.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Sunzi,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>运行如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/2021031614574953.gif#pic_center"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Vue3中路由的相关配置&quot;&gt;&lt;a href=&quot;#Vue3中路由的相关配置&quot; class=&quot;headerlink&quot; title=&quot;Vue3中路由的相关配置&quot;&gt;&lt;/a&gt;Vue3中路由的相关配置&lt;/h5&gt;&lt;h6 id=&quot;1、路由的配置&quot;&gt;&lt;a href=&quot;#1、路由的配</summary>
      
    
    
    
    
    <category term="Vue3" scheme="https://gitee.com/shimmer612/myBlog/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>如何在vue的css中使用data中的变量</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/15/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E7%9A%84css%E4%B8%AD%E4%BD%BF%E7%94%A8data%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/15/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E7%9A%84css%E4%B8%AD%E4%BD%BF%E7%94%A8data%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</id>
    <published>2021-03-14T16:00:00.000Z</published>
    <updated>2021-03-16T02:54:26.599Z</updated>
    
    <content type="html"><![CDATA[<p> 如何在vue的css中使用data中的变量。</p><p>很简单用v-bind</p><p><strong>一个简单的例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;h1&quot;</span> &gt;我是&#123;&#123; color &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.h1 &#123;</span><br><span class="line">  color: v-bind(color);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>运行如下图所示：成功设置了文字的颜色。</p><p><img src="https://s3.ax1x.com/2021/03/15/6BXT8s.png"></p><p><strong>这样就可以做一个文字颜色不断变化的demo</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;h1&quot;</span> @click=<span class="string">&quot;changeColor&quot;</span>&gt;我是&#123;&#123; color &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;changeColor&quot;</span>&gt;变色&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.changeColor()</span><br><span class="line">    &#125;,<span class="number">500</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = [</span><br><span class="line">        <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hotpink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lime&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;skyblue&#x27;</span>,</span><br><span class="line">      ]</span><br><span class="line">      <span class="built_in">this</span>.color = arr[<span class="built_in">this</span>.count]</span><br><span class="line">      <span class="built_in">this</span>.count++</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.count === <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.h1 &#123;</span><br><span class="line">  color: v-bind(color);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下图：</p><p><a href="https://imgtu.com/i/6Bv861"><img src="https://s3.ax1x.com/2021/03/15/6Bv861.gif" alt="6Bv861.gif"></a></p><p>是不是感觉要方便许多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 如何在vue的css中使用data中的变量。&lt;/p&gt;
&lt;p&gt;很简单用v-bind&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个简单的例子&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
    <category term="Vue3" scheme="https://gitee.com/shimmer612/myBlog/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>CSS的一些知识点</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/12/2021-03-12-CSS%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/12/2021-03-12-CSS%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-03-11T16:00:00.000Z</published>
    <updated>2021-03-12T08:32:26.410Z</updated>
    
    <content type="html"><![CDATA[<p>今天是三月十二日植树节，记录一些自己写样式的时候，以前不知道的东西。</p><h5 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h5><p><strong>设置<code>padding</code>的时候为了不改变盒子的大小要设置<code>box-sizing:border-box</code></strong></p><h5 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h5><p><strong>盒子内部阴影在末尾加一个<code>inset</code>比如<code>box-shadow: 0 0 5px 0 red inset</code></strong></p><h5 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h5><p><strong>设置透明度的时候<code>opacity:0.8</code>这样会让父元素子元素也改变透明度。可以改成<code>rgba(255,255,255,0.8)</code>的这种方式</strong></p><h5 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h5><p><strong>网页字体最小就是<code>12px</code></strong></p><h5 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h5><p><strong>设置背景图时使用路径时<code> background-image: url(~@/assets/carMonitor/warn-info.png);</code>写成这种样式。还有加上<code> background-size: cover;</code></strong></p><p>不想写了，今天很难受，心情很不好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天是三月十二日植树节，记录一些自己写样式的时候，以前不知道的东西。&lt;/p&gt;
&lt;h5 id=&quot;1、&quot;&gt;&lt;a href=&quot;#1、&quot; class=&quot;headerlink&quot; title=&quot;1、&quot;&gt;&lt;/a&gt;1、&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;设置&lt;code&gt;padding&lt;/cod</summary>
      
    
    
    
    
    <category term="css" scheme="https://gitee.com/shimmer612/myBlog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>node.js+express+mongodb来开发后端</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/11/2021-03-10-node.js+express+mongodb%E6%9D%A5%E5%BC%80%E5%8F%91%E5%90%8E%E7%AB%AF/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/11/2021-03-10-node.js+express+mongodb%E6%9D%A5%E5%BC%80%E5%8F%91%E5%90%8E%E7%AB%AF/</id>
    <published>2021-03-10T16:00:00.000Z</published>
    <updated>2021-03-11T01:21:12.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="node-js-express-mongodb来开发后端"><a href="#node-js-express-mongodb来开发后端" class="headerlink" title="node.js+express+mongodb来开发后端"></a>node.js+express+mongodb来开发后端</h3><p>大四临近毕业，要开始写毕业设计，但是作为前端的我，对后端一窍不通。然后想到nodejs也可以写后端。用的就是javascript。应该学习成本不是很高。</p><p>如今已经写好了毕设。但是对当时怎么用nodejs+express+mongodb写接口有点遗忘了。</p><p>今天来记录一下。以便后面来复习和查找。</p><h5 id="1、安装express"><a href="#1、安装express" class="headerlink" title="1、安装express"></a>1、安装express</h5><p><code>npm install express --save</code></p><h5 id="2、新建一个js文件"><a href="#2、新建一个js文件" class="headerlink" title="2、新建一个js文件"></a>2、新建一个js文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express并绑定到app上</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源路径</span></span><br><span class="line">app.use(<span class="string">&#x27;/public&#x27;</span>, express.static(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// express 处理json</span></span><br><span class="line">app.use(express.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的开发</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/user&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/address&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/admin&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/banner&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/cat&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/goods&#x27;</span>))</span><br><span class="line"><span class="comment">// app.use(&#x27;/&#x27;,require(&#x27;./router/hotGoods&#x27;))</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/order&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/shopcart&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/star&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/upload&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;./router/goodsBuyCount&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行端口，服务跑在本地的3002端口上</span></span><br><span class="line">app.listen(<span class="number">3002</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success in port 3002，服务已经跑起来啦&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3、mongoose的使用"><a href="#3、mongoose的使用" class="headerlink" title="3、mongoose的使用"></a>3、mongoose的使用</h5><p>安装mongoose</p><p><code>npm i mongoose --save</code></p><p>新建一个<code>js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/storedb&#x27;</span>, &#123;</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">    useCreateIndex: <span class="literal">true</span>,</span><br><span class="line">    useUnifiedTopology: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据模型，类似于表</span></span><br><span class="line"><span class="keyword">const</span> CateSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    <span class="comment">//字段名称与字段类型 还可以加一些判断。required:true代表必传，unique 代表唯一的</span></span><br><span class="line">    cat_id: &#123; <span class="attr">type</span>:<span class="built_in">Number</span> &#125;,</span><br><span class="line">    cat_name: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//绑定到模型</span></span><br><span class="line"><span class="keyword">const</span> Category = mongoose.model(<span class="string">&#x27;category&#x27;</span>, CateSchema, <span class="string">&#x27;category&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="4、接口的实现"><a href="#4、接口的实现" class="headerlink" title="4、接口的实现"></a>4、接口的实现</h5><p>这里直接使用express router  不直接用<code>app.get()或者app.post()</code>这样去使用了。</p><p>新建一个<code>js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入mongoose数据模型</span></span><br><span class="line"><span class="keyword">const</span> &#123; Address &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../storedb&#x27;</span>)</span><br><span class="line"><span class="comment">//绑定router</span></span><br><span class="line"><span class="keyword">let</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户地址</span></span><br><span class="line">router.get(<span class="string">&#x27;/getAddress&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> address = <span class="keyword">await</span> Address.find(&#123; <span class="attr">user_id</span>: req.query.user_id &#125;)</span><br><span class="line">    res.send(address)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除地址</span></span><br><span class="line">router.delete(<span class="string">&#x27;/deleteAddress&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> address = req.query</span><br><span class="line">    <span class="keyword">const</span> userId = req.query.user_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Address.deleteOne(&#123; <span class="attr">user_id</span>: userId, <span class="attr">add_id</span>: address.add_id &#125;)</span><br><span class="line"></span><br><span class="line">    res.send(&#123;</span><br><span class="line">        message: <span class="string">&quot;删除地址成功！&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改地址</span></span><br><span class="line">router.post(<span class="string">&#x27;/changeAddress&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> address = req.body</span><br><span class="line">    <span class="keyword">const</span> addId = req.body.add_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Address.updateOne(&#123; <span class="attr">add_id</span>: addId &#125;, &#123;</span><br><span class="line">        user_name: address.user_name,</span><br><span class="line">        user_phone: address.user_phone,</span><br><span class="line">        user_address: address.user_address</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    res.send(&#123;</span><br><span class="line">        message: <span class="string">&quot;修改地址成功！&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p>一般查询用get</p><p>增加修改用post</p><p>删除用delete</p><p><strong>说一下mongoose的增删改查</strong></p><p><strong>增加</strong></p><p>Address代表表名</p><p>里面是增加的一个地址，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Address.create(&#123; <span class="attr">user_id</span>: <span class="number">1234</span>,</span><br><span class="line">        add_id: <span class="number">123</span>,</span><br><span class="line">        user_name: <span class="string">&quot;zz&quot;</span>,</span><br><span class="line">        user_phone: <span class="number">123456789</span>,</span><br><span class="line">        user_address: <span class="string">&quot;大道&quot;</span></span><br><span class="line">               &#125;)</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><p>删除user_id中add_id为123的那个地址</p><p><code>Address.deleteOne(&#123; user_id: 1234, add_id: 123 &#125;)</code></p><p><strong>修改</strong></p><p>修改第一个参数是修改哪一个，查找条件。add_id为多少的哪一个。</p><p>第二个参数为修改后的数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Address<span class="selector-class">.updateOne</span>(&#123; add_id: addId &#125;, &#123;</span><br><span class="line">        user_name: <span class="selector-tag">address</span><span class="selector-class">.user_name</span>,</span><br><span class="line">        user_phone: <span class="selector-tag">address</span><span class="selector-class">.user_phone</span>,</span><br><span class="line">        user_address: <span class="selector-tag">address</span>.user_address</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><strong>查询</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有的</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Address</span>.</span></span>find<span class="literal">()</span></span><br><span class="line"><span class="comment">//查询user_id为123的所有地址</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Address</span>.</span></span>find(&#123;user_id:<span class="number">123</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>mongoose的一些常用查询参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//skip查询的时候跳过多少个</span></span><br><span class="line"><span class="comment">//limit限制一次查询几个</span></span><br><span class="line"><span class="comment">//sort是排序 1是正序-1是倒序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skip(), limit(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> goods = <span class="keyword">await</span> Goods.find().limit(pageSize).skip((pageNum - <span class="number">1</span>) * pageSize).sort(&#123; <span class="attr">goods_id</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$in 查询goods_id为$in后面的数组</span></span><br><span class="line"><span class="keyword">const</span> aa = <span class="keyword">await</span> Goods.find(&#123; <span class="attr">goods_id</span>: &#123; <span class="attr">$in</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>] &#125; &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$or  满足其中一个条件就可以</span></span><br><span class="line"><span class="comment">//$regex 匹配查询</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> Goods.find(&#123;</span><br><span class="line">        $or: [</span><br><span class="line">            &#123; <span class="attr">goods_name</span>: &#123; <span class="attr">$regex</span>: reg &#125; &#125;,</span><br><span class="line">            &#123; <span class="attr">goods_title</span>: &#123; <span class="attr">$regex</span>: reg &#125; &#125;,</span><br><span class="line">            &#123; <span class="attr">goods_subtitle</span>: &#123; <span class="attr">$regex</span>: reg &#125; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//aggregate聚合查询</span></span><br><span class="line"><span class="comment">//$lookup  两个表关联查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的意思是根据cat_id在goods表中查询，查询到的数据放到goods这个字段下。</span></span><br><span class="line"><span class="keyword">const</span> index = req.params.categoryId - <span class="number">1</span></span><br><span class="line">    <span class="keyword">await</span> Category.aggregate([</span><br><span class="line">        &#123;</span><br><span class="line">            $lookup: &#123;</span><br><span class="line">                <span class="keyword">from</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">                localField: <span class="string">&quot;cat_id&quot;</span>,</span><br><span class="line">                foreignField: <span class="string">&quot;cat_id&quot;</span>,</span><br><span class="line">                <span class="keyword">as</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&#123;<span class="attr">$sort</span>:&#123;<span class="string">&quot;cat_id&quot;</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">        , <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            res.send(data[index])</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="5、上传文件"><a href="#5、上传文件" class="headerlink" title="5、上传文件"></a>5、上传文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line">fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Goods &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../storedb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/uploadImg&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> goods = req.query</span><br><span class="line">    <span class="keyword">let</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">    form.encoding = <span class="string">&#x27;utf-8&#x27;</span>; <span class="comment">// 编码</span></span><br><span class="line">    <span class="comment">// 保留扩展名</span></span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//文件存储路径 最后要注意加 &#x27;/&#x27; 否则会被存在public下</span></span><br><span class="line">    form.uploadDir = path.join(__dirname, <span class="string">&#x27;../public/imgs/accessory/&#x27;</span>)</span><br><span class="line">    form.parse(req,  <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="keyword">let</span> oldFilename = files.file.name</span><br><span class="line">        fs.rename(files.file.path, form.uploadDir + generateFilename(oldFilename), <span class="keyword">async</span> err =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;重命名失败&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">await</span> Goods.updateOne(&#123; <span class="attr">goods_id</span>: goods.goods_id &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        goods_pic: <span class="string">`public/imgs/accessory/<span class="subst">$&#123;generateFilename(oldFilename)&#125;</span>`</span>,</span><br><span class="line">                    &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">                 res.send(&#123;</span><br><span class="line">                     message: <span class="string">&quot;保存成功！&quot;</span></span><br><span class="line">                 &#125;)   </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateFilename</span>(<span class="params">oldFilename</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//将老的文件名拼上时间戳，这样既不会命名冲突又可以看出文件的上传事件</span></span><br><span class="line">        <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">let</span> names = oldFilename.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;names[<span class="number">0</span>]&#125;</span>_<span class="subst">$&#123;<span class="string">&quot;&quot;</span> + d.getFullYear() + (d.getMonth() + <span class="number">1</span>) + d.getDate() + <span class="string">&#x27;_&#x27;</span> + d.getHours() + d.getMinutes() + d.getSeconds()&#125;</span>.<span class="subst">$&#123;names[<span class="number">1</span>]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="6、启动"><a href="#6、启动" class="headerlink" title="6、启动"></a>6、启动</h5><p>在项目根目录打开终端运行<code>node app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出现   success in port 3002，服务已经跑起来啦 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为上面是这样写的</span></span><br><span class="line"><span class="comment">// 运行端口，服务跑在本地的3002端口上</span></span><br><span class="line">app.listen(<span class="number">3002</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success in port 3002，服务已经跑起来啦&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明运行成功。</p><h5 id="7、调用接口"><a href="#7、调用接口" class="headerlink" title="7、调用接口"></a>7、调用接口</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取用户地址</span></span><br><span class="line">    <span class="keyword">async</span> getAddress () &#123;</span><br><span class="line">      <span class="keyword">const</span> userId = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$http.get(<span class="string">&#x27;getAddress&#x27;</span>, &#123;</span><br><span class="line">        params: &#123;</span><br><span class="line">          user_id: userId</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.address = res.data</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求地址</span></span><br><span class="line">Request URL: http:<span class="comment">//localhost:3002/getAddress?user_id=1255</span></span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: <span class="number">200</span> OK</span><br><span class="line">Remote Address: [::<span class="number">1</span>]:<span class="number">3002</span></span><br><span class="line">Referrer Policy: strict-origin-when-cross-origin</span><br><span class="line"><span class="comment">//返回相应的数据</span></span><br><span class="line">[&#123;</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>:<span class="string">&quot;602e26a4a8185949dc9ea23e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_id&quot;</span>:<span class="string">&quot;1255&quot;</span>,</span><br><span class="line">    <span class="string">&quot;add_id&quot;</span>:<span class="string">&quot;157&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_name&quot;</span>:<span class="string">&quot;wky&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_phone&quot;</span>:<span class="string">&quot;18888888888&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_address&quot;</span>:<span class="string">&quot;无锡市滨湖区太湖学院北区&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>:<span class="number">0</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>到这里基本上就完成了大部分的功能。</p><p>当然还有登录注册。jwt签名生成token，密码的加密等等。</p><p>这个我也忘记的差不多了。</p><p>去整理一下，再记录下来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;node-js-express-mongodb来开发后端&quot;&gt;&lt;a href=&quot;#node-js-express-mongodb来开发后端&quot; class=&quot;headerlink&quot; title=&quot;node.js+express+mongodb来开发后端&quot;&gt;&lt;/a&gt;no</summary>
      
    
    
    
    
    <category term="nodejs" scheme="https://gitee.com/shimmer612/myBlog/tags/nodejs/"/>
    
    <category term="express" scheme="https://gitee.com/shimmer612/myBlog/tags/express/"/>
    
    <category term="mongodb" scheme="https://gitee.com/shimmer612/myBlog/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>从数组中取出随机几个数组成新数组（不重复取）</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/10/2021-03-10-%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%96%E5%87%BA%E9%9A%8F%E6%9C%BA%E5%87%A0%E4%B8%AA%E6%95%B0%E7%BB%84%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%EF%BC%88%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%8F%96%EF%BC%89/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/10/2021-03-10-%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%96%E5%87%BA%E9%9A%8F%E6%9C%BA%E5%87%A0%E4%B8%AA%E6%95%B0%E7%BB%84%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%EF%BC%88%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%8F%96%EF%BC%89/</id>
    <published>2021-03-09T16:00:00.000Z</published>
    <updated>2021-03-10T09:14:23.203Z</updated>
    
    <content type="html"><![CDATA[<p>​     要给自己的商城，加一个推荐商品的功能。想让他随机从商品表中取出4个数据。</p><p>​     一开始我用<code>Math.random()*arr.length</code>但是会取出相同的。这样就不太对，哪有推荐两个相同的商品呢。</p><p>​    然后想到获取当前选择的下标，把选择的那个删除。下一次随机，就随机不到那个数了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前台传来的当前商品的id</span></span><br><span class="line"><span class="keyword">const</span> nowGoodsIndex = req.query.goods_id-<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> goods = <span class="keyword">await</span> Goods.find()</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存入数组的id,因为id就是从1开始往上加。</span></span><br><span class="line">    goods.forEach(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">        arr.push(index+<span class="number">1</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//用splice把当前商品的id删除避免重复</span></span><br><span class="line">    arr.splice(nowGoodsIndex, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newArr = []</span><br><span class="line">    <span class="comment">//随机取出4个，取出来一个就把那个数在数组中删掉。避免重复。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length);</span><br><span class="line">        newArr.push(arr[index]);</span><br><span class="line">        <span class="comment">//获取后，在数组中删除已经加入的随机数</span></span><br><span class="line">        arr.splice(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​     要给自己的商城，加一个推荐商品的功能。想让他随机从商品表中取出4个数据。&lt;/p&gt;
&lt;p&gt;​     一开始我用&lt;code&gt;Math.random()*arr.length&lt;/code&gt;但是会取出相同的。这样就不太对，哪有推荐两个相同的商品呢。&lt;/p&gt;
&lt;p&gt;​ </summary>
      
    
    
    
    
    <category term="javascript" scheme="https://gitee.com/shimmer612/myBlog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS margin折叠</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/09/2021-03-09-CSS-margin%E6%8A%98%E5%8F%A0/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/09/2021-03-09-CSS-margin%E6%8A%98%E5%8F%A0/</id>
    <published>2021-03-08T16:00:00.000Z</published>
    <updated>2021-03-09T09:49:37.080Z</updated>
    
    <content type="html"><![CDATA[<h5 id="margin折叠"><a href="#margin折叠" class="headerlink" title="margin折叠"></a>margin折叠</h5><p><strong>今天在写页面的时候发现，子元素设置了<code>margin-top:101px</code>不生效，父元素却向下移动了。</strong></p><p><strong>这就是margin折叠</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> //这里给子元素设置margin-top</span><br><span class="line">//父元素却向下移动了101px</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;car-message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>             </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .main &#123;</span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">1440px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">810px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">~@/assets/bg.png</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">19px</span> <span class="number">0</span> <span class="number">17px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.car-message &#123;</span><br><span class="line"><span class="css">  <span class="attribute">margin-top</span>: <span class="number">101px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">~@/assets/one.png</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">1404px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">51px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>百度了下</strong></p><p><strong>外边距叠加存在两种情况：一是父子外边距叠加；二是兄弟外边距叠加。</strong></p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p><strong>兄弟间重叠时</strong></p><ol><li><strong>底部元素变为行内盒子(<code>display: inline-block</code>);</strong></li><li><strong>底部元素的position的值为absolute/fixed</strong></li></ol><p><strong>父元素与子元素重叠</strong></p><ol><li><strong>父元素加入(<code>overflow: hidden</code>);</strong></li><li><strong>父元素添加透明边框(<code>border:1px solid transparent</code>);</strong></li><li><strong>子元素变为行内盒子(<code>display: inline-block</code>);</strong></li><li><strong>子元素加入浮动属性或定位</strong></li></ol><p><strong>这里我给父元素设置了<code>overflow:hidden</code>就解决了。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;margin折叠&quot;&gt;&lt;a href=&quot;#margin折叠&quot; class=&quot;headerlink&quot; title=&quot;margin折叠&quot;&gt;&lt;/a&gt;margin折叠&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;今天在写页面的时候发现，子元素设置了&lt;code&gt;margin-top:101</summary>
      
    
    
    
    
    <category term="css" scheme="https://gitee.com/shimmer612/myBlog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>react 中使用Swiper轮播图插件</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/08/2021-03-08-react-%E4%B8%AD%E4%BD%BF%E7%94%A8Swiper%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%8F%92%E4%BB%B6/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/08/2021-03-08-react-%E4%B8%AD%E4%BD%BF%E7%94%A8Swiper%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%8F%92%E4%BB%B6/</id>
    <published>2021-03-07T16:00:00.000Z</published>
    <updated>2021-03-09T05:15:36.072Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一步、安装"><a href="#第一步、安装" class="headerlink" title="第一步、安装"></a>第一步、安装</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i swiper</span><br></pre></td></tr></table></figure><h5 id="第二步、使用"><a href="#第二步、使用" class="headerlink" title="第二步、使用"></a>第二步、使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Swiper, SwiperSlide &#125; <span class="keyword">from</span> <span class="string">&#x27;swiper/react&#x27;</span>;</span><br><span class="line"><span class="comment">//根据自己的需要引用样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/swiper.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Swiper</span><br><span class="line">      spaceBetween=&#123;<span class="number">50</span>&#125;</span><br><span class="line">      slidesPerView=&#123;<span class="number">3</span>&#125;</span><br><span class="line">      onSlideChange=&#123;<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;slide change&#x27;</span>)&#125;</span><br><span class="line">      onSwiper=&#123;<span class="function">(<span class="params">swiper</span>) =&gt;</span> <span class="built_in">console</span>.log(swiper)&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;SwiperSlide&gt;Slide <span class="number">1</span>&lt;/SwiperSlide&gt;</span><br><span class="line">      &lt;SwiperSlide&gt;Slide <span class="number">2</span>&lt;/SwiperSlide&gt;</span><br><span class="line">      &lt;SwiperSlide&gt;Slide <span class="number">3</span>&lt;/SwiperSlide&gt;</span><br><span class="line">      &lt;SwiperSlide&gt;Slide <span class="number">4</span>&lt;/SwiperSlide&gt;</span><br><span class="line">    &lt;/Swiper&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>到这一个轮播图就已经实现了，但是只是轮播图没有别的东西，比如左右的按钮。这些需要我们手动添加。</strong></p><h5 id="第三步、添加功能（例：navigation按钮）"><a href="#第三步、添加功能（例：navigation按钮）" class="headerlink" title="第三步、添加功能（例：navigation按钮）"></a>第三步、添加功能（例：navigation按钮）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入所需功能和样式文件</span></span><br><span class="line"><span class="keyword">import</span> SwiperCore, &#123; Navigation &#125; <span class="keyword">from</span> <span class="string">&quot;swiper&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;swiper/components/navigation/navigation.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">SwiperCore.use([Navigation]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件上添加属性</span></span><br><span class="line">  &lt;Swiper</span><br><span class="line">    spaceBetween=&#123;<span class="number">50</span>&#125;</span><br><span class="line">    slidesPerView=&#123;<span class="number">1</span>&#125;</span><br><span class="line">    navigation</span><br><span class="line">    style=&#123;&#123; <span class="attr">padding</span>: <span class="string">&quot;24px&quot;</span> &#125;&#125;</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure><p><strong>以上就是在react中使用swiper插件。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;第一步、安装&quot;&gt;&lt;a href=&quot;#第一步、安装&quot; class=&quot;headerlink&quot; title=&quot;第一步、安装&quot;&gt;&lt;/a&gt;第一步、安装&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="React" scheme="https://gitee.com/shimmer612/myBlog/tags/React/"/>
    
    <category term="swiper" scheme="https://gitee.com/shimmer612/myBlog/tags/swiper/"/>
    
  </entry>
  
  <entry>
    <title>react hooks学习</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/05/react%20hooks%E5%AD%A6%E4%B9%A0/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/05/react%20hooks%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-03-23T07:16:48.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-hooks学习"><a href="#react-hooks学习" class="headerlink" title="react hooks学习"></a>react hooks学习</h2><h5 id="01、什么是react-hooks"><a href="#01、什么是react-hooks" class="headerlink" title="01、什么是react hooks"></a>01、什么是react hooks</h5><p>react hooks就是react提供的内置函数，这些函数可以让，函数式组件和类组件一样拥有组件状态和副作用。</p><p><strong>什么是状态？</strong></p><p>React中的放数据的地方。</p><p><strong>什么是副作用？</strong></p><p>在 React 组件中执行数据获取、订阅或者手动修改 DOM，我们统一把这些操作称为“副作用”</p><h5 id="02、useState"><a href="#02、useState" class="headerlink" title="02、useState"></a>02、<code>useState</code></h5><p><code>useState</code> 就类似于类组件中的<code>this.state</code></p><p><code>useState</code>的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useState , useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Main =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 onClick=&#123;<span class="function">()=&gt;</span>&#123;setCount(count+<span class="number">2</span>)&#125;&#125;&gt;当前的数为：&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Main /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getEementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="03、useEffect"><a href="#03、useEffect" class="headerlink" title="03、useEffect"></a>03、<code>useEffect</code></h5><p><code>useEffect</code>就相当于生命周期的<code>componentDidMoun</code>t和<code>componentDidUPdate</code></p><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useState , useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Main =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相当于componentDidMount和componentDidUpdate</span></span><br><span class="line">    <span class="comment">//要加第二个参数空数组，不然会一直调用</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 打印点击的次数</span></span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">`You clicked <span class="subst">$&#123;count/<span class="number">2</span>&#125;</span> times`</span>)</span><br><span class="line">  &#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 onClick=&#123;<span class="function">()=&gt;</span>&#123;setCount(count+<span class="number">2</span>)&#125;&#125;&gt;当前的数为：&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Main /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;react-hooks学习&quot;&gt;&lt;a href=&quot;#react-hooks学习&quot; class=&quot;headerlink&quot; title=&quot;react hooks学习&quot;&gt;&lt;/a&gt;react hooks学习&lt;/h2&gt;&lt;h5 id=&quot;01、什么是react-hooks&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="React" scheme="https://gitee.com/shimmer612/myBlog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>javascript常用数组方法的复习</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/04/2021-03-04-javascript%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/04/2021-03-04-javascript%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-03-03T16:00:00.000Z</published>
    <updated>2021-03-04T04:00:22.334Z</updated>
    
    <content type="html"><![CDATA[<p><strong>分析项目代码经常会看到一些数组方法，some,slice等等。概念都模糊不清，感觉知道又感觉不知道。还是要到W3C上去查一下用法。</strong></p><p><strong>所以这次把一些常用的数组方法整理一下，用来巩固复习</strong></p><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><code>forEach()</code></h5><p><strong><code>forEach() </code>对数组的每一项进行操作</strong></p><p><strong><code>callback</code> 函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong></p><p><strong>返回值<code>undefined</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = []</span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    arr1.push(item*<span class="number">2</span>) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 2, 4, 6, 8, 10, 12 ]</span></span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a><code>filter()</code></h5><p><strong><code>filter() </code>返回一个新数组，包含复合要求的所有元素</strong></p><p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong></p><p><strong>返回值：复合要求的新数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.filter(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map()"></a><code>map()</code></h5><p><strong><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值</strong></p><p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong></p><p><strong>返回值：原数组每个元素执行回调函数的结果组成的新数组。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[ 2, 4, 6, 8, 10, 12 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ false, false, false, true, true, true ]</span></span><br></pre></td></tr></table></figure><h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a><code>slice()</code></h5><p><strong><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</strong></p><p><code>**begin</code> 可选**</p><p><strong>提取起始处的索引（从 <code>0</code> 开始），从该索引开始提取原数组元素。</strong></p><p><strong>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，<code>slice(-2)</code> 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。</strong></p><p><strong>如果省略 <code>begin</code>，则 <code>slice</code> 从索引 <code>0</code> 开始。</strong></p><p><strong>如果 <code>begin</code> 超出原数组的索引范围，则会返回空数组。</strong></p><p><strong><code>end</code> 可选</strong></p><p><strong>提取终止处的索引（从 <code>0</code> 开始），在该索引处结束提取原数组元素。<code>slice</code> 会提取原数组中索引从 <code>begin</code> 到 <code>end</code> 的所有元素（包含 <code>begin</code>，但不包含 <code>end</code>）</strong></p><p><strong>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 <code>slice(-2,-1)</code> 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。</strong></p><p><strong>如果 <code>end</code> 被省略，则 <code>slice</code> 会一直提取到原数组末尾。</strong></p><p><strong>如果 <code>end</code> 大于数组的长度，<code>slice</code> 也会一直提取到原数组末尾。</strong></p><p><strong>返回值：一个含有被提取元素的新数组。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr1  = arr.slice(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.slice()</span><br><span class="line"><span class="built_in">console</span>.log(arr1);<span class="comment">//[ 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><h5 id="find"><a href="#find" class="headerlink" title="find()"></a><code>find()</code></h5><p><strong><code>find()</code>方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 [<code>undefined</code>]</strong></p><p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong></p><p><strong>数组中第一个满足所提供测试函数的元素的值，否则返回 [<code>undefined</code>]</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">let</span> arr =<span class="meta"> [1,2,3,4,5,6]</span></span><br><span class="line"><span class="attribute">let</span> arr<span class="number">1</span> = arr.find(item=&gt;item&gt;<span class="number">4</span>)</span><br><span class="line"><span class="attribute">console</span>.log(arr<span class="number">1</span>); //<span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a><code>sort()</code></h5><p><strong><code>sort()</code>对数组的元素进行排序，并返回数组</strong></p><p><strong>如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.sort()</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ 1, 2, 3, 4, 5, 6, 7, 8 ]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr3.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b-a</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[ 8, 7, 6, 5, 4, 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure><h5 id="some"><a href="#some" class="headerlink" title="some()"></a><code>some()</code></h5><p><strong><code>some()</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</strong></p><p><strong>注意：如果用一个空数组进行测试，在任何情况下它返回的都是<code>false</code>。</strong></p><p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong>    </p><p><strong>返回值： 数组中有至少一个元素通过回调函数的测试就会返回<code>true</code>；所有元素都没有通过回调函数的测试返回值才会为<code>false</code>。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aa = arr.some(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> bb = arr.some(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">7</span>)</span><br><span class="line"><span class="built_in">console</span>.log(aa);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="every"><a href="#every" class="headerlink" title="every()"></a><code>every()</code></h5><p><strong><code>every()</code>方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</strong></p><p><strong>注意：若收到一个空数组，此方法在一切情况下都会返回 <code>true</code>。</strong></p><p><strong><code>callback </code>函数接收3个值，<code>item</code>数组项，<code>index</code>元素下标，<code>arr</code>数组本身</strong>    </p><p><strong>返回值：如果回调函数的每一次返回都为true，返回 <code>true</code> ，否则返回 <code>false</code>。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aa = arr.every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> bb = arr.every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//fasle</span></span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>差不多就是这些常用的。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;分析项目代码经常会看到一些数组方法，some,slice等等。概念都模糊不清，感觉知道又感觉不知道。还是要到W3C上去查一下用法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以这次把一些常用的数组方法整理一下，用来巩固复习&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://gitee.com/shimmer612/myBlog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>扩展运算符(...)的复习</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/04/2021-03-04-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6(...)%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/04/2021-03-04-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6(...)%E7%9A%84%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-03-03T16:00:00.000Z</published>
    <updated>2021-03-04T01:39:59.558Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近看项目代码，经常看到函数里运用扩展运算符。总是模模糊糊的，看明白又好像没有明白的感觉。</strong></p><p><strong>像下面这样</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> setCacheComponents([</span><br><span class="line">        ...cacheComponentsClone,</span><br><span class="line">        &#123;</span><br><span class="line">          ...currentPane,</span><br><span class="line">          name: name || obj.item.props.children[<span class="number">1</span>] <span class="comment">// 如果调用addtab时传入了name则使用此name</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]);</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------</span></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          tableData: [</span><br><span class="line">            ...state.tableData,</span><br><span class="line">            &#123;</span><br><span class="line">              params: &#123;</span><br><span class="line">                ...payload.params,</span><br><span class="line">                page: payload.page || <span class="number">1</span>,</span><br><span class="line">                pageSize: payload.pageSize || <span class="number">10</span></span><br><span class="line">              &#125;,</span><br><span class="line">              tableKey: payload.tableKey,</span><br><span class="line">              loading: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>就整理了一下扩展运算符的用法。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    sex: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    hobby:&#123;</span><br><span class="line">        play: <span class="string">&quot;ball&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newObj);<span class="comment">//&#123; name: &#x27;张三&#x27;, age: &#x27;20&#x27;, sex: &#x27;男&#x27;, hobby: &#123; play: &#x27;ball&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = [...arr,...arr1]</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转换成数组</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abcdefg&#x27;</span> </span><br><span class="line"><span class="keyword">const</span> newStr = [...str]</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;,&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值   数组对象都可以</span></span><br><span class="line"><span class="keyword">const</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> bb = [...aa,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><p><strong>项目里常用的就是在函数里，用来解构赋值的比较多</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;最近看项目代码，经常看到函数里运用扩展运算符。总是模模糊糊的，看明白又好像没有明白的感觉。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;像下面这样&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;ta</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://gitee.com/shimmer612/myBlog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>一些小记录</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/03/%E5%B0%8F%E8%AE%B0/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/03/%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-03-02T16:00:00.000Z</published>
    <updated>2021-03-03T08:17:17.395Z</updated>
    
    <content type="html"><![CDATA[<p><strong>开发中写样式less中，最外层取一个不易重的类名，其余子元素类名写在里面</strong></p><p><strong>尽量不要写到margin负值</strong></p><p><strong>样式遵循设计图</strong></p><p><strong>图片名称起相关英文名</strong></p><p><strong>flex布局多使用space-around做分割，除非必须用space-between</strong></p><p><strong>类名过长用xx-xx这样写</strong></p><p><strong>页面起名大驼峰比如<code>ChargeManage</code></strong></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;开发中写样式less中，最外层取一个不易重的类名，其余子元素类名写在里面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尽量不要写到margin负值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样式遵循设计图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    
    <category term="tips" scheme="https://gitee.com/shimmer612/myBlog/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>React项目(UmiJS)中使用高德地图</title>
    <link href="https://gitee.com/shimmer612/myBlog/2021/03/02/2021-03-02-React%E9%A1%B9%E7%9B%AE(UmiJS)%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    <id>https://gitee.com/shimmer612/myBlog/2021/03/02/2021-03-02-React%E9%A1%B9%E7%9B%AE(UmiJS)%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/</id>
    <published>2021-03-01T16:00:00.000Z</published>
    <updated>2021-03-02T01:21:36.707Z</updated>
    
    <content type="html"><![CDATA[<h5 id="React-AMap"><a href="#React-AMap" class="headerlink" title="React AMap"></a>React AMap</h5><p>这是一个基于 React 封装的高德地图组件.</p><p><strong>文档地址</strong></p><p><code>https://uiw.gitee.io/react-amap/#/</code></p><h6 id="01、安装"><a href="#01、安装" class="headerlink" title="01、安装"></a>01、安装</h6><p><code>npm install @uiw/react-amap --save</code></p><h6 id="02、使用"><a href="#02、使用" class="headerlink" title="02、使用"></a>02、使用</h6><p>在文档左侧找到需要使用的例子。在右侧直接复制对应代码。按需进行修改。</p><h6 id="03、例子（贝塞尔曲线的使用）"><a href="#03、例子（贝塞尔曲线的使用）" class="headerlink" title="03、例子（贝塞尔曲线的使用）"></a>03、例子（贝塞尔曲线的使用）</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, APILoader, BezierCurve &#125; <span class="keyword">from</span> <span class="string">&quot;@uiw/react-amap&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CarLine = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [show] = useState(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> path = [<span class="comment">// 每个弧线段有两种描述方式</span></span><br><span class="line">        [<span class="number">116.39</span>, <span class="number">39.91</span>, <span class="number">116.37</span>, <span class="number">39.91</span>],<span class="comment">// 起点</span></span><br><span class="line">        <span class="comment">// 第一段弧线</span></span><br><span class="line">        [<span class="number">116.380298</span>, <span class="number">39.907771</span>, <span class="number">116.38</span>, <span class="number">39.90</span>],<span class="comment">// 控制点，途经点</span></span><br><span class="line">        <span class="comment">// 第二段弧线</span></span><br><span class="line">        [<span class="number">116.385298</span>, <span class="number">39.907771</span>, <span class="number">116.40</span>, <span class="number">39.90</span>],<span class="comment">// 控制点，途经点// 弧线段有两种描述方式1</span></span><br><span class="line">        <span class="comment">// 第三段弧线</span></span><br><span class="line">        [<span class="comment">// 弧线段有两种描述方式2</span></span><br><span class="line">            [<span class="number">116.392872</span>, <span class="number">39.887391</span>],<span class="comment">// 控制点</span></span><br><span class="line">            [<span class="number">116.40772</span>, <span class="number">39.909252</span>],<span class="comment">// 控制点</span></span><br><span class="line">            [<span class="number">116.41</span>, <span class="number">39.89</span>]<span class="comment">// 途经点</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 第四段弧线</span></span><br><span class="line">        [<span class="number">116.423857</span>, <span class="number">39.889498</span>, <span class="number">116.422312</span>, <span class="number">39.899639</span>, <span class="number">116.425273</span>, <span class="number">39.902273</span>]</span><br><span class="line">        <span class="comment">// 控制点，控制点，途经点，每段最多两个控制点</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleParams = <span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> values</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;APILoader akay=<span class="string">&quot;a7a90e05a37d3f6bf76d4a9032fc9129&quot;</span>&gt;</span><br><span class="line">                &lt;div style=&#123;&#123; <span class="attr">width</span>: <span class="string">&quot;100%&quot;</span>, <span class="attr">height</span>: <span class="string">&quot;600px&quot;</span> &#125;&#125; &gt;</span><br><span class="line">                    &lt;<span class="built_in">Map</span> zoom=&#123;<span class="number">14</span>&#125; center=&#123;[<span class="number">116.397637</span>, <span class="number">39.900001</span>]&#125;&gt;</span><br><span class="line">                        &lt;BezierCurve</span><br><span class="line">                            visiable=&#123;show&#125;</span><br><span class="line">                            path=&#123;path&#125;</span><br><span class="line">                            isOutline=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                            outlineColor=<span class="string">&quot;&quot;</span></span><br><span class="line">                            borderWeight=&#123;<span class="number">3</span>&#125;</span><br><span class="line">                            strokeColor=<span class="string">&quot;red&quot;</span></span><br><span class="line">                            strokeOpacity=&#123;<span class="number">1</span>&#125;</span><br><span class="line">                            strokeWeight=&#123;<span class="number">6</span>&#125;</span><br><span class="line">                            <span class="comment">// 线样式还支持 &#x27;dashed&#x27;</span></span><br><span class="line">                            strokeStyle=<span class="string">&quot;solid&quot;</span></span><br><span class="line">                            <span class="comment">// strokeStyle是dashed时有效</span></span><br><span class="line">                            strokeDasharray=&#123;[<span class="number">10</span>, <span class="number">10</span>]&#125;</span><br><span class="line">                            lineJoin=<span class="string">&quot;round&quot;</span></span><br><span class="line">                            lineCap=<span class="string">&quot;round&quot;</span></span><br><span class="line">                            zIndex=&#123;<span class="number">50</span>&#125;</span><br><span class="line">                        /&gt;</span><br><span class="line">                    &lt;/<span class="built_in">Map</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/APILoader&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CarLine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/shimmer612/mypicturehouse/raw/master/myPicture/Snipaste_2021-03-02_09-02-09.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;React-AMap&quot;&gt;&lt;a href=&quot;#React-AMap&quot; class=&quot;headerlink&quot; title=&quot;React AMap&quot;&gt;&lt;/a&gt;React AMap&lt;/h5&gt;&lt;p&gt;这是一个基于 React 封装的高德地图组件.&lt;/p&gt;
&lt;p&gt;&lt;strong</summary>
      
    
    
    
    
    <category term="React UmiJS" scheme="https://gitee.com/shimmer612/myBlog/tags/React-UmiJS/"/>
    
  </entry>
  
</feed>
